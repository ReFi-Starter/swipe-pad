---
description: 
globs: 
alwaysApply: false
---
Directory structure:
└── refi-starter-swipe-pad/
    ├── README.md
    ├── bunfig.toml
    ├── components.json
    ├── docker-compose.yml
    ├── drizzle.config.ts
    ├── eslint.config.mjs
    ├── next.config.ts
    ├── package.json
    ├── playwright.config.mts
    ├── postcss.config.mjs
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vitest.config.mts
    ├── wagmi-cli.config.ts
    ├── wagmi.config.ts
    ├── .env.local.example
    ├── .node-version
    ├── .npmrc
    ├── contracts/
    ├── db/
    │   ├── drizzle.server.ts
    │   ├── index.ts
    │   ├── migrations/
    │   │   └── meta/
    │   │       └── _journal.json
    │   └── schema/
    │       ├── achievements.ts
    │       ├── campaign-notes.ts
    │       ├── campaign-tags.ts
    │       ├── campaigns.ts
    │       ├── categories.ts
    │       ├── friendships.ts
    │       ├── index.ts
    │       ├── supported-currencies.ts
    │       ├── supported-languages.ts
    │       ├── swipe-amounts.ts
    │       ├── transactions.ts
    │       ├── user-achievements.ts
    │       └── users.ts
    ├── docs/
    │   ├── architecture-overview.md
    │   ├── LAYOUT_ARCHITECTURE.md
    │   ├── neon-database-architecture.md
    │   ├── neon-database-connection.md
    │   ├── neon-database-init.sql
    │   ├── project-specification.md
    │   └── milestones/
    │       ├── 001-contract-implementation.md
    │       ├── 001-project-setup.md
    │       ├── donation-flow.md
    │       └── donation-pool.md
    ├── e2e/
    │   └── home.test.ts
    ├── public/
    │   └── icons/
    ├── scripts/
    │   ├── bun-postinstall.sh
    │   ├── generate-types.sh
    │   └── db/
    │       ├── clean-seed.ts
    │       ├── clear-tables.ts
    │       ├── migrate.ts
    │       ├── minimal-seed.ts
    │       └── seed.ts
    ├── src/
    │   ├── app/
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── (onboarding)/
    │   │   │   └── layout.tsx
    │   │   ├── api/
    │   │   │   └── trpc/
    │   │   │       └── [trpc]/
    │   │   │           └── route.ts
    │   │   ├── create/
    │   │   │   └── page.tsx
    │   │   ├── home/
    │   │   │   └── page.tsx
    │   │   ├── my-donations/
    │   │   │   └── page.tsx
    │   │   ├── my-projects/
    │   │   │   └── page.tsx
    │   │   ├── onboarding/
    │   │   │   ├── layout.tsx
    │   │   │   └── page.tsx
    │   │   ├── profile/
    │   │   │   ├── page.tsx
    │   │   │   └── settings/
    │   │   │       └── page.tsx
    │   │   ├── project/
    │   │   │   └── [id]/
    │   │   │       └── page.tsx
    │   │   ├── social/
    │   │   │   └── page.tsx
    │   │   └── swipe/
    │   │       ├── layout.tsx
    │   │       └── page.tsx
    │   ├── components/
    │   │   ├── achievement-badge.tsx
    │   │   ├── action-bar.tsx
    │   │   ├── address-avatar.tsx
    │   │   ├── animated-button.tsx
    │   │   ├── animated-icon.tsx
    │   │   ├── batch-status-indicator.tsx
    │   │   ├── batch-transaction-provider.tsx
    │   │   ├── bottom-nav.tsx
    │   │   ├── campaign-card.tsx
    │   │   ├── campaign-detail-drawer.tsx
    │   │   ├── campaign-details.tsx
    │   │   ├── campaign-heart-button.tsx
    │   │   ├── campaign-image.tsx
    │   │   ├── campaign-list-view.tsx
    │   │   ├── campaign-list.tsx
    │   │   ├── category-filter.tsx
    │   │   ├── combo-indicator.tsx
    │   │   ├── community-notes-button.tsx
    │   │   ├── community-notes-drawer.tsx
    │   │   ├── community-notes-panel.tsx
    │   │   ├── connect-button.tsx
    │   │   ├── container-aware-image.tsx
    │   │   ├── content-view.tsx
    │   │   ├── create-donation.tsx
    │   │   ├── donate-modal.tsx
    │   │   ├── donation-summary.tsx
    │   │   ├── emoji-animation.tsx
    │   │   ├── expand-button.tsx
    │   │   ├── footer.tsx
    │   │   ├── friend-card.tsx
    │   │   ├── header-celo.tsx
    │   │   ├── header.tsx
    │   │   ├── impact-share-card.tsx
    │   │   ├── layout.tsx
    │   │   ├── leaderboard-card.tsx
    │   │   ├── navbar.tsx
    │   │   ├── onboarding-card.tsx
    │   │   ├── privacy-toggle.tsx
    │   │   ├── project-card.tsx
    │   │   ├── project-detail-drawer.tsx
    │   │   ├── project-details.tsx
    │   │   ├── project-header.tsx
    │   │   ├── project-heart-button.tsx
    │   │   ├── project-image.tsx
    │   │   ├── project-list-view.tsx
    │   │   ├── project-list.tsx
    │   │   ├── project-swipe-view.tsx
    │   │   ├── providers.tsx
    │   │   ├── streak-badge.tsx
    │   │   ├── swipe-card-stack.tsx
    │   │   ├── swipe-card.tsx
    │   │   ├── swipe-settings.tsx
    │   │   ├── theme-provider.tsx
    │   │   ├── toast-with-progress.tsx
    │   │   ├── top-bar.tsx
    │   │   ├── top-up-modal.tsx
    │   │   ├── trust-verification-drawer.tsx
    │   │   ├── user-profile-display.tsx
    │   │   ├── user-stats-card.tsx
    │   │   ├── utils.ts
    │   │   ├── verified-badge.tsx
    │   │   ├── layout/
    │   │   │   ├── app-layout.tsx
    │   │   │   ├── bottom-bar.tsx
    │   │   │   ├── shell.tsx
    │   │   │   ├── top-bar.tsx
    │   │   │   └── view-layout.tsx
    │   │   ├── shell/
    │   │   │   ├── index.ts
    │   │   │   └── shell.tsx
    │   │   ├── swipe-card-components/
    │   │   │   ├── card-actions.tsx
    │   │   │   ├── card-emojis.tsx
    │   │   │   ├── card-header.tsx
    │   │   │   ├── card-list-view.tsx
    │   │   │   ├── card-progress.tsx
    │   │   │   ├── card-swipe-view.tsx
    │   │   │   ├── index.ts
    │   │   │   └── refresh-button.tsx
    │   │   ├── swipe-card-hooks/
    │   │   │   ├── use-swipe-animation.ts
    │   │   │   └── use-swipe-gestures.ts
    │   │   ├── ui/
    │   │   │   ├── animated-view.tsx
    │   │   │   ├── avatar-circle.tsx
    │   │   │   ├── badge.tsx
    │   │   │   ├── button.tsx
    │   │   │   ├── card.tsx
    │   │   │   ├── dropdown-menu.tsx
    │   │   │   ├── floating-layout.tsx
    │   │   │   ├── floating-tab-switcher.tsx
    │   │   │   ├── input.tsx
    │   │   │   ├── label.tsx
    │   │   │   ├── logo-small.tsx
    │   │   │   ├── progress.tsx
    │   │   │   ├── select.tsx
    │   │   │   ├── sonner.tsx
    │   │   │   ├── switch.tsx
    │   │   │   ├── tabs.tsx
    │   │   │   ├── textarea.tsx
    │   │   │   └── tooltip.tsx
    │   │   └── views/
    │   │       └── swipe/
    │   │           ├── swipe-header.tsx
    │   │           ├── swipe-layout.tsx
    │   │           ├── swipe-tab-list.tsx
    │   │           ├── swipe-tab-swiper.tsx
    │   │           ├── swipe-tabs.tsx
    │   │           ├── swipe-card/
    │   │           │   └── swipe-card.tsx
    │   │           └── swipe-cards-stack/
    │   │               └── swipe-cards-stack.tsx
    │   ├── db/
    │   │   ├── deploy.ts
    │   │   ├── index.ts
    │   │   ├── migrate.ts
    │   │   ├── reset.ts
    │   │   ├── schema.ts
    │   │   ├── utils.ts
    │   │   └── migrations/
    │   │       ├── 0000_superb_tombstone.sql
    │   │       └── meta/
    │   │           ├── 0000_snapshot.json
    │   │           └── _journal.json
    │   ├── features/
    │   │   ├── campaigns/
    │   │   │   ├── animations.ts
    │   │   │   ├── trust.ts
    │   │   │   ├── types.ts
    │   │   │   ├── components/
    │   │   │   │   ├── action-buttons.tsx
    │   │   │   │   ├── campaign-swiper.tsx
    │   │   │   │   ├── empty-state.tsx
    │   │   │   │   ├── swipe-card.tsx
    │   │   │   │   └── swipe-indicator.tsx
    │   │   │   └── hooks/
    │   │   │       ├── use-campaign-stack.ts
    │   │   │       ├── use-campaign-swiper.ts
    │   │   │       ├── use-event-listener.ts
    │   │   │       └── use-swipe-indicators.ts
    │   │   ├── currencies/
    │   │   │   └── formatter.ts
    │   │   ├── gamification/
    │   │   │   ├── combo.ts
    │   │   │   ├── haptics.ts
    │   │   │   └── streak.ts
    │   │   ├── multi-region/
    │   │   │   └── user-region.ts
    │   │   ├── onboarding/
    │   │   │   └── onboarding.ts
    │   │   └── settings/
    │   │       └── user-settings.ts
    │   ├── hooks/
    │   │   ├── use-campaigns.ts
    │   │   ├── use-donation-pool.tsx
    │   │   ├── use-mobile.tsx
    │   │   ├── use-onboarding.ts
    │   │   ├── use-wallet.tsx
    │   │   └── use-web3.ts
    │   ├── lib/
    │   │   ├── config/
    │   │   │   ├── fonts.ts
    │   │   │   └── metadata.ts
    │   │   ├── styles/
    │   │   │   └── tailwind.ts
    │   │   └── wagmi/
    │   │       ├── contracts.ts
    │   │       └── abi/
    │   │           ├── cusd-abi.json
    │   │           └── minipay-nft.json
    │   ├── providers/
    │   │   ├── app-provider.tsx
    │   │   ├── trpc-provider.tsx
    │   │   └── wallet-provider.tsx
    │   ├── repositories/
    │   │   ├── campaign-repository.ts
    │   │   ├── donation-repository.ts
    │   │   ├── project-repository.ts
    │   │   └── user-repository.ts
    │   ├── server/
    │   │   ├── trpc.ts
    │   │   └── routers/
    │   │       ├── _app.ts
    │   │       ├── campaign.ts
    │   │       ├── donation.ts
    │   │       └── user.ts
    │   ├── store/
    │   │   ├── app-store.ts
    │   │   ├── use-app-store.ts
    │   │   └── slices/
    │   │       ├── onboarding-slice.ts
    │   │       └── swipe-slice.ts
    │   ├── styles/
    │   │   └── globals.css
    │   ├── test/
    │   │   ├── setup.ts
    │   │   └── components/
    │   │       └── swipe-card.test.tsx
    │   ├── types/
    │   │   ├── blo.ts
    │   │   ├── campaign.ts
    │   │   ├── card.ts
    │   │   ├── community.ts
    │   │   ├── swipe.ts
    │   │   └── user.ts
    │   └── utils/
    │       └── crypto.ts
    └── .github/
        ├── CODE_OF_CONDUCT.md
        ├── CONTRIBUTING.md
        ├── LICENSE.md
        ├── PULL_REQUEST_TEMPLATE.md
        ├── SECURITY.md
        ├── ISSUE_TEMPLATE/
        │   ├── bug_report.md
        │   ├── config.yml
        │   └── feature_request.md
        └── workflows/
            ├── ci.yml
            └── pipeline.yml


Files Content:

(Files content cropped to 300k characters, download full ingest to see more)
================================================
FILE: README.md
================================================
<a name="top"></a>

<div align="center">
  <!-- Simple header design with gradients, compatible with GitHub -->
  <img src="https://capsule-render.vercel.app/api?type=waving&color=0:23a6d5,50:00a389,100:23d5ab&height=200&section=header&text=SwipePad&fontSize=70&fontColor=ffffff&animation=fadeIn&fontAlignY=40" width="100%" alt="SwipePad Header" />
  
  <h2>Making Micro-Donations Seamless & Impactful</h2>
  <p><strong>SwipePad: Support global impact campaigns with a simple, joyful swipe!</strong></p>
  
  <img src="public/swipepad-banner.png" alt="SwipePad Banner" width="500" style="margin: 15px 0;" />
  
  <p>
    <img src="https://img.shields.io/badge/Celo-FCFF52?style=for-the-badge&logo=celo&logoColor=000000" alt="Celo" />
    <img src="https://img.shields.io/badge/MiniPay-000000?style=for-the-badge&logo=minipay&logoColor=white" alt="MiniPay" />
    <img src="https://img.shields.io/badge/Global_Stablecoin_Hackathon-May_2025-blue?style=for-the-badge" alt="Global Stablecoin Hackathon" />
    <img src="https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge" alt="License: MIT" />
  </p>
</div>

<h2>Table of Contents</h2>

- [🌟 What is SwipePad? The Spark Behind the Swipe!](#-what-is-swipepad-the-spark-behind-the-swipe)
- [💫 Key Features](#-key-features)
- [🏗️ How It Works](#️-how-it-works)
    - [Donation Flow](#donation-flow)
    - [Smart Contract Architecture](#smart-contract-architecture)
- [🧰 Tech Stack](#-tech-stack)
    - [Database Stack](#database-stack)
- [🚀 Getting Started](#-getting-started)
    - [Prerequisites](#prerequisites)
    - [Database Setup](#database-setup)
        - [Database Commands](#database-commands)
        - [Common Database Workflows](#common-database-workflows)
    - [Quick Setup](#quick-setup)
    - [Important Notes about Bun](#important-notes-about-bun)
- [📝 Project Status](#-project-status)
- [💖 Join Our Mission \& Contribute!](#-join-our-mission--contribute)
- [🗺️ Our Roadmap Ahead: The Journey to Impact](#️-our-roadmap-ahead-the-journey-to-impact)
- [👥 Team](#-team)
- [🔗 Links](#-links)
- [📜 Legal & Security](#-legal--security)

**SwipePad is a mobile-first dApp designed for Celo's MiniPay, revolutionizing how we connect with and contribute to causes we care about. Imagine Tinder, but for making a tangible difference in the world!** ✨

## 🌟 What is SwipePad? The Spark Behind the Swipe!

We believe everyone deserves the chance to make an impact, no matter how small their contribution. Yet, traditional philanthropy can feel distant, complex, and opaque. Millions are eager to help, but are hindered by outdated systems and a lack of direct connection to the causes they champion.

**The Problem We're Tackling:**

- Traditional donation platforms often feel clunky, slow, and lack real-time transparency.
- Billions of potential changemakers remain financially excluded from global funding ecosystems.
- It's hard to _feel_ the impact of your donation and connect with the stories behind the campaigns.

**Our Solution: SwipePad - Philanthropy Reimagined!**
SwipePad offers a frictionless, engaging mobile experience that directly connects passionate donors with verified, high-impact campaigns. Using Celo's fast and affordable stablecoins (cUSD, cEUR, cKES, and more!), we're making micro-donations accessible, transparent, and empowering for _anyone_ with a phone.

It's more than just donating; it's about discovering, connecting, and becoming part of a global movement for good, one swipe at a time.

<div align="right" style="margin-top: 1rem;">
  <a href="#top" style="font-size: 0.8rem; color: #58a6ff;">↑ Go to top</a>
</div>

## 💫 Key Features

| Feature                        | Description                                                    |
| ------------------------------ | -------------------------------------------------------------- |
| 👆 **Swipe Interface**         | Discover and donate to campaigns with intuitive swipe gestures |
| 💰 **Multi-currency**          | Support with cUSD, cEUR, cKES, and other Celo stablecoins      |
| 📱 **MiniPay Native**          | Seamlessly integrated for 7M+ MiniPay users                    |
| ✅ **Verified Campaigns**      | Curated selection of impact-driven initiatives                 |
| 🔍 **On-Chain Transparency**   | All donations are fully verifiable on Celo                     |
| 🎯 **Flexible Funding Models** | Choose All-or-Nothing or Keep-What-You-Raise                   |
| 💸 **Micro-Donations**         | Support campaigns with any amount, no minimum                  |

See the [complete contract documentation](./docs/milestones/donation-pool.md) for more details.

<div align="right" style="margin-top: 1rem;">
  <a href="#top" style="font-size: 0.8rem; color: #58a6ff;">↑ Go to top</a>
</div>

## 🏗️ How It Works

<div align="center">
  
```
┌───────────┐     ┌──────────────┐     ┌───────────────┐     ┌───────────────┐
│           │     │              │     │               │     │               │
│  MiniPay  │────▶│  SwipePad UI │────▶│ DonationPool  │────▶│  Campaign     │
│  User     │     │  (Next.js)   │     │  Contract     │     │  Creator      │
│           │     │              │     │               │     │               │
└───────────┘     └──────────────┘     └───────────────┘     └───────────────┘
                         │
                         ▼
                  ┌──────────────┐
                  │  Campaign    │
                  │  Metadata    │
                  │  (Database)  │
                  └──────────────┘
```

</div>

1. **Browse** ― User swipes through verified impact campaigns
2. **Choose** ― User selects donation amount and currency
3. **Donate** ― Funds transfer directly via DonationPool contract on Celo
4. **Track** ― Both donor and campaign creator can verify the transaction on-chain

### Donation Flow

For a detailed explanation of the donation flow, see our [donation flow documentation](./docs/milestones/donation-flow.md).

### Smart Contract Architecture

The DonationPool contract is a purpose-built solution for handling donations with two funding models:

1. **All or Nothing (Kickstarter model)**:

    - Creators receive funds only if the funding goal is met
    - Donors can claim refunds if the goal isn't reached

2. **Keep What You Raise**:
    - Creators receive all donations regardless of goal achievement
    - Suitable for campaigns that can make partial progress

<div align="right" style="margin-top: 1rem;">
  <a href="#top" style="font-size: 0.8rem; color: #58a6ff;">↑ Go to top</a>
</div>

## 🧰 Tech Stack

<div align="center">
  
| Frontend | Web3 | Contracts | Platform |
|:--------:|:----:|:---------:|:--------:|
| Next.js 15 | Wagmi 2 | Solidity | Celo |
| TypeScript | Viem | Foundry | MiniPay |
| Tailwind CSS 4 | | | Bun |

</div>

### Database Stack

|   Type    |  Technology   |          Purpose           |
| :-------: | :-----------: | :------------------------: |
|    ORM    |  Drizzle ORM  | Type-safe database queries |
| Database  |  PostgreSQL   |     Primary data store     |
| Migration |  Drizzle Kit  |     Schema migrations      |
|  Client   | node-postgres |    Database connection     |

<div align="right" style="margin-top: 1rem;">
  <a href="#top" style="font-size: 0.8rem; color: #58a6ff;">↑ Go to top</a>
</div>

## 🚀 Getting Started

> 💻 Explore the live version at: [https://swipe-pad.vercel.app](https://swipe-pad.vercel.app)

### Prerequisites

You'll need:

- [Bun](https://bun.sh/docs/installation) (v1.0+)
- [Git](https://git-scm.com/)
- [Foundry](https://book.getfoundry.sh/getting-started/installation)
- [PostgreSQL](https://www.postgresql.org/download/) (v15+)

### Database Setup

1. Create a `.env.local` file in the root directory:

```bash
DATABASE_URL="postgres://postgres:postgres@localhost:5432/postgres"
```

2. Start your local PostgreSQL instance using Docker:

```bash
# Start the PostgreSQL container and WebSocket proxy
docker-compose up -d
```

3. Initialize and seed the database:

```bash
# Generate migrations
bun run db:generate

# Push migrations to database
bun run db:push

# Seed database with sample data
bun run db:minimal-seed
```

#### Database Commands

| Command           | Description                                            |
| ----------------- | ------------------------------------------------------ |
| `db:generate`     | Generate new migrations based on schema changes        |
| `db:push`         | Push migrations to the database                        |
| `db:migrate`      | Run migrations using a migration script                |
| `db:studio`       | Launch Drizzle Studio UI to explore your data          |
| `db:seed`         | Seed database with sample data using drizzle-seed      |
| `db:minimal-seed` | Seed database with minimal sample data                 |
| `db:clean-seed`   | Seed database with comprehensive sample data using SQL |
| `db:clear`        | Delete all data from all tables                        |
| `db:reset`        | Reset database to initial state                        |
| `db:check`        | Check for pending migrations                           |
| `db:drop`         | Drop all tables                                        |
| `db:up`           | Full setup (generate, push, seed)                      |
| `db:down`         | Full cleanup (drop, push)                              |

#### Common Database Workflows

**Complete Reset:**

```bash
docker-compose down -v && docker-compose up -d && bun run db:push && bun run db:minimal-seed
```

**Visual Database Explorer:**

```bash
bun run db:studio
```

**Development Setup:**
For local development, the project is configured to use both local PostgreSQL and Neon serverless Postgres. By default, it will connect to your local PostgreSQL instance, but you can add a Neon connection string to `.env.local` to use in production environments.

### Quick Setup

```bash
# Clone the repo with submodules
git clone --recurse-submodules https://github.com/ReFi-Starter/swipe-pad.git
cd swipe-pad

# Use our script to set up the project with Bun
./scripts/bun-postinstall.sh

# Compile contracts
cd contracts && forge build && cd ..

# Generate contract hooks
./scripts/generate-types.sh

# Start development server
bun run dev
```

Visit [http://localhost:3000](http://localhost:3000) in your browser.

### Important Notes about Bun

This project uses [Bun](https://bun.sh/) instead of npm for package management. Key points:

- **Install packages:** `bun install <package-name>` or `bun add <package-name>`
- **Run scripts:** `bun run <script-name>` (e.g., `bun run dev`)
- **Lock file:** Bun uses `bun.lockb` instead of `package-lock.json`

If you run into dependency issues, use our cleanup script:

```bash
./scripts/bun-postinstall.sh
```

<div align="center">
  <div style="position: relative; width: 60%; max-width: 800px; margin: 3rem auto;">
    <img 
      src="public/abstract-banner.png" 
      alt="Decorative Divider" 
      style="height: 80px; width: 100%; object-fit: cover; border-radius: 4px; opacity: 0.7; filter: brightness(1.1) contrast(0.9);" 
    />
  </div>
</div>

## 📝 Project Status

Current milestone: **Initial Setup & Contract Integration** (April-May 2025)

- ✅ Project bootstrapped with Next.js & Bun
- ✅ Smart contracts integrated via git submodule
- ✅ Wagmi hooks generated for contract interaction
- ✅ Basic project structure established
- 🔜 UI components & donation flow

[View detailed progress on our current milestone →](./docs/milestones/001-project-setup.md)

<div align="right" style="margin-top: 1rem;">
  <a href="#top" style="font-size: 0.8rem; color: #58a6ff;">↑ Go to top</a>
</div>

## 💖 Join Our Mission & Contribute!

SwipePad is more than just a project; it's a community-driven effort to build a more inclusive and impactful future for philanthropy. We're a friendly and passionate team, and we believe that the best ideas come from collaboration! Whether you're a seasoned developer, a UI/UX wizard, a sharp-eyed tester, or just someone brimming with great ideas, there's a place for you here.

**Why Contribute to SwipePad?**

- **Make a Real-World Impact:** Help build a platform that directly supports global causes and empowers communities.
- **Learn & Grow:** Work with cutting-edge Web3 technologies on the Celo platform, Next.js, and more.
- **Join a Vibrant Community:** Be part of a supportive and enthusiastic team that values every contribution.
- **Shape the Future:** Your ideas and skills can directly influence the direction and success of SwipePad.

**Ways You Can Help Us Grow:**

- 💻 **Code Contributions:** Help us build new features, fix bugs, or improve existing functionalities. Check out our `good first issues`!
- 🎨 **Design & UX:** Have an eye for design? Help us make SwipePad even more intuitive and beautiful.
- 💡 **Ideas & Feedback:** Share your thoughts on new features, improvements, or potential campaigns.
- 📚 **Documentation:** Help us improve our guides and make it easier for others to get involved.
- 🐞 **Testing & Bug Reports:** Be our quality champion and help us find and squash those pesky bugs.

**Ready to jump in?**

1.  Take a look at our [Project Board](https://github.com/users/ReFi-Starter/projects/1) (Link to be updated if you have one) to see what we're working on.
2.  Check out the open [Issues](https://github.com/ReFi-Starter/swipe-pad/issues) - especially those tagged `help wanted` or `good first issue`.
3.  Have an idea? Start a [Discussion](https://github.com/ReFi-Starter/swipe-pad/discussions)!
4.  For code contributions, please read our (upcoming) `CONTRIBUTING.md` guide for details on our workflow and coding standards.

We're excited to build something amazing together! Don't hesitate to reach out.

<div align="right" style="margin-top: 1rem;">
  <a href="#top" style="font-size: 0.8rem; color: #58a6ff;">↑ Go to top</a>
</div>

## 🗺️ Our Roadmap Ahead: The Journey to Impact

We're just getting started on this exciting journey, and here's a glimpse of what's on our horizon:

**Current Focus (Initial Setup & Contract Integration - April-May 2025):**

- ✅ Project bootstrapped with Next.js & Bun - _Foundation laid!_
- ✅ Smart contracts (DonationPool) integrated via git submodule - _Core logic in place!_
- ✅ Wagmi hooks generated for seamless contract interaction - _Web3 connectivity established!_
- ✅ Basic project structure and essential database setup - _Organized for growth!_
- ⏳ Building out the core UI components for the swipe-to-donate experience - _Making it beautiful & intuitive!_
- ⏳ Implementing the full donation flow from campaign discovery to on-chain confirmation - _Ensuring a smooth user journey!_

[View detailed progress on our current milestone →](./docs/milestones/001-project-setup.md)

**Next Up: Expanding the Ecosystem**

- 📱 **Full MiniPay Integration & Testing:** Ensuring a flawless experience for the 7M+ MiniPay users.
- 🎨 **UI/UX Polish:** Refining the user interface for an even more delightful and engaging experience.
- 🌍 **Campaign Curation & Onboarding:** Developing a robust process for verifying and onboarding impactful campaigns.
- 🛠️ **Advanced Funding Models:** Exploring and implementing more nuanced funding options.
- 📊 **Donor Dashboards & Impact Tracking:** Providing users with clear visibility into their contributions and the collective impact.

**Future Dreams: Scaling the Impact**

- 🌐 **Multi-language Support:** Making SwipePad accessible to a global audience.
- 🤝 **Community Governance Features:** Empowering the community to participate in key decisions.
- 💡 **Gamification & Rewards:** Encouraging sustained engagement and contributions.
- 🌱 **Integration with more ReFi Protocols:** Expanding the reach and possibilities.

**Got ideas for our roadmap or want to help us get there faster? We'd love to hear from you in our [Discussions](https://github.com/ReFi-Starter/swipe-pad/discussions)!**

<div align="right" style="margin-top: 1rem;">
  <a href="#top" style="font-size: 0.8rem; color: #58a6ff;">↑ Go to top</a>
</div>

## 👥 Team

- **refistarter.eth** - Umbrella Collective
- **ottox.eth** - Tech Lead
- **ozkite.eth** - Business Lead

## 🔗 Links

- **Live Demo (Production):** [https://swipe-pad.vercel.app](https://swipe-pad.vercel.app)
- **MiniPay Website:** [https://minipay.io](https://minipay.io)
- [Demo Video](https://drive.google.com/file/d/1DywG644N0KwyuO1FJOuoTru5qkaEbl_L/view?usp=drivesdk)
- [Pitch Deck](https://docs.google.com/presentation/d/1vVyXT26NsGsk7kWdEKJk-qcfLY1cnyO_Gbo9tR83miI/edit?usp=sharing)
- [KarmaGAP Profile](https://gap.karmahq.xyz/project/refi-starter---swipe-2-donate-app)

## 📜 Legal & Security

- [License](.github/LICENSE.md) - MIT License
- [Security Policy](.github/SECURITY.md) - Security guidelines and reporting
- [Code of Conduct](.github/CODE_OF_CONDUCT.md) - Community guidelines
- [Contributing](.github/CONTRIBUTING.md) - How to contribute

---

<div align="center">
  
  *Built for the [Global Stablecoin Hackathon](https://mentolabs.notion.site/Global-Stablecoin-Hackathon-1c1a2148cc5c808aa42ddee1e3df7883) (May 2025)*
  
  **ReFi Starter** | [GitHub](https://github.com/ReFi-Starter) | [Website](https://example.com)
</div>

<div align="right" style="margin-top: 1rem;">
  <a href="#top" style="font-size: 0.8rem; color: #58a6ff;">↑ Go to top</a>
</div>



================================================
FILE: bunfig.toml
================================================
[install]
# Whether to set an exact version in package.json. Default false.
exact = true
peer = true

[dev]
fallback = true



================================================
FILE: components.json
================================================
{
    "$schema": "https://ui.shadcn.com/schema.json",
    "style": "new-york",
    "rsc": true,
    "tsx": true,
    "tailwind": {
        "config": "",
        "css": "src/app/globals.css",
        "baseColor": "stone",
        "cssVariables": true,
        "prefix": ""
    },
    "aliases": {
        "components": "@/components",
        "utils": "@/lib/styles/tailwind",
        "ui": "@/components/ui",
        "lib": "@/lib",
        "hooks": "@/hooks"
    },
    "iconLibrary": "lucide"
}



================================================
FILE: docker-compose.yml
================================================
services:
    postgres:
        image: 'postgres:latest'
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: postgres
        ports:
            - '5432:5432'
    pg_proxy:
        image: ghcr.io/neondatabase/wsproxy:latest
        environment:
            APPEND_PORT: 'postgres:5432'
            ALLOW_ADDR_REGEX: '.*'
            LOG_TRAFFIC: 'true'
        ports:
            - '5433:80'
        depends_on:
            - postgres



================================================
FILE: drizzle.config.ts
================================================
import 'dotenv/config'
import { defineConfig } from 'drizzle-kit'

const url =
    process.env.NODE_ENV === 'production'
        ? process.env.POSTGRES_URL
        : process.env.LOCAL_POSTGRES_URL || process.env.DATABASE_URL

if (!url)
    throw new Error(
        `Connection string to ${process.env.NODE_ENV === 'production' ? 'Neon' : 'local'} Postgres not found.`,
    )

export default defineConfig({
    schema: './db/schema/index.ts',
    out: './db/migrations',
    driver: 'pg',
    dbCredentials: {
        connectionString: url,
    },
})



================================================
FILE: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
FILE: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  devIndicators: false,
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;



================================================
FILE: package.json
================================================
{
    "name": "swipe-pad",
    "version": "0.1.0",
    "private": true,
    "type": "module",
    "packageManager": "bun@1.0.25",
    "engines": {
        "node": ">=22"
    },
    "scripts": {
        "dev": "bun --bun next dev",
        "build": "bun --bun next build",
        "start": "bun --bun next start",
        "lint": "bun --bun next lint",
        "check-types": "bun --bun tsc --noEmit",
        "test": "bun run test:frontend",
        "test:frontend": "vitest run",
        "test:e2e": "playwright test",
        "test:contracts": "cd contracts && forge test",
        "test:contracts:watch": "cd contracts && forge test --watch",
        "test:contracts:coverage": "cd contracts && forge coverage --report lcov",
        "test:contracts:gas": "cd contracts && forge test --gas-report",
        "test:contracts:debug": "cd contracts && forge test -vvvv",
        "test:contracts:trace": "cd contracts && forge test --debug",
        "contracts:build": "cd contracts && forge build",
        "contracts:deploy:local": "cd contracts && forge script script/DeployContracts.s.sol --broadcast --fork-url http://localhost:8545",
        "contracts:deploy:testnet": "cd contracts && forge script script/DeployContracts.s.sol --broadcast --verify --rpc-url $(grep CELO_ALFAJORES_RPC .env | cut -d '=' -f2)",
        "contracts:verify": "cd contracts && forge verify-contract",
        "contracts:clean": "cd contracts && forge clean",
        "contracts:update": "cd contracts && forge update",
        "contracts:install": "cd contracts && forge install",
        "test:all": "bun run test:frontend && bun run test:e2e && bun run test:contracts",
        "test:coverage": "bun test --coverage",
        "test:ci": "bun test && bun playwright test",
        "clean": "bun run clean:build && bun run clean:test && bun run clean:deps && bun run clean:contracts",
        "clean:build": "rm -rf .next out dist contracts/out contracts/cache",
        "clean:test": "rm -rf coverage playwright-report test-results contracts/coverage",
        "clean:deps": "rm -rf node_modules .turbo",
        "clean:contracts": "cd contracts && forge clean",
        "generate-types": "bun run scripts/generate-types.sh",
        "db:generate": "bunx drizzle-kit generate:pg",
        "db:push": "bunx drizzle-kit push:pg",
        "db:studio": "bunx drizzle-kit studio",
        "db:seed": "bun run scripts/db/seed.ts",
        "db:reset": "bun run src/db/reset.ts",
        "db:migrate": "bun run scripts/db/migrate.ts",
        "db:deploy": "bun run src/db/deploy.ts",
        "db:check": "bunx drizzle-kit check:pg",
        "db:drop": "bunx drizzle-kit drop",
        "db:up": "bun run db:generate && bun run db:push && bun run db:seed",
        "db:down": "bun run db:drop && bun run db:push",
        "db:clear": "bun run scripts/db/clear-tables.ts",
        "db:clean-seed": "bun run scripts/db/clean-seed.ts",
        "db:minimal-seed": "bun run scripts/db/minimal-seed.ts"
    },
    "dependencies": {
        "@headlessui/react": "^1.7.18",
        "@heroicons/react": "^2.1.1",
        "@neondatabase/serverless": "1.0.0",
        "@radix-ui/react-dropdown-menu": "^2.1.12",
        "@radix-ui/react-label": "2.1.4",
        "@radix-ui/react-progress": "1.1.4",
        "@radix-ui/react-select": "^2.2.2",
        "@radix-ui/react-slot": "1.2.0",
        "@radix-ui/react-switch": "1.2.2",
        "@radix-ui/react-tabs": "1.1.9",
        "@radix-ui/react-tooltip": "1.2.4",
        "@rainbow-me/rainbowkit": "2.2.4",
        "@react-spring/web": "^9.5.5",
        "@tanstack/react-query": "5.75.1",
        "@trpc/client": "11.1.2",
        "@trpc/next": "11.1.2",
        "@trpc/react-query": "11.1.2",
        "@trpc/server": "11.1.2",
        "blo": "2.0.0",
        "date-fns": "4.1.0",
        "dotenv": "^16.4.1",
        "drizzle-orm": "^0.29.3",
        "drizzle-seed": "0.3.1",
        "framer-motion": "12.9.4",
        "idb": "8.0.2",
        "lucide-react": "0.507.0",
        "next": "15.3.1",
        "next-themes": "0.4.6",
        "pg": "^8.11.3",
        "pino-pretty": "13.0.0",
        "react": "19.1.0",
        "react-dom": "19.1.0",
        "sonner": "2.0.3",
        "superjson": "2.2.2",
        "viem": "2.28.3",
        "wagmi": "2.15.2",
        "ws": "8.18.2",
        "zod": "3.24.3",
        "zustand": "^5.0.4"
    },
    "devDependencies": {
        "@eslint/eslintrc": "3.3.1",
        "@playwright/test": "^1.42.1",
        "@testing-library/jest-dom": "^6.4.2",
        "@testing-library/react": "^14.2.1",
        "@testing-library/user-event": "^14.5.2",
        "@vitejs/plugin-react": "^4.2.1",
        "@vitest/coverage-v8": "^1.4.0",
        "@vitest/ui": "^1.4.0",
        "@tailwindcss/postcss": "4.1.5",
        "@types/node": "22.15.3",
        "@types/pg": "^8.11.0",
        "@types/react": "19.1.2",
        "@types/react-dom": "19.1.3",
        "@types/ws": "8.18.1",
        "@wagmi/cli": "2.3.0",
        "class-variance-authority": "0.7.1",
        "clsx": "2.1.1",
        "drizzle-kit": "^0.20.14",
        "eslint": "9.26.0",
        "eslint-config-next": "15.3.1",
        "prettier": "3.5.3",
        "prettier-plugin-tailwindcss": "0.6.11",
        "tailwind-merge": "3.2.0",
        "tailwindcss": "4.1.5",
        "tsx": "^4.7.0",
        "tw-animate-css": "1.2.9",
        "typescript": "^5.3.3",
        "jsdom": "^24.0.0",
        "vitest": "^1.4.0",
        "ts-node": "^10.9.2"
    },
    "trustedDependencies": [
        "bufferutil",
        "es5-ext",
        "esbuild",
        "keccak",
        "sharp",
        "unrs-resolver",
        "utf-8-validate"
    ],
    "prettier": {
        "arrowParens": "avoid",
        "bracketSameLine": true,
        "bracketSpacing": true,
        "endOfLine": "lf",
        "jsxSingleQuote": true,
        "printWidth": 120,
        "proseWrap": "preserve",
        "quoteProps": "consistent",
        "semi": false,
        "singleQuote": true,
        "trailingComma": "all",
        "useTabs": false,
        "tabWidth": 4,
        "plugins": [
            "prettier-plugin-tailwindcss"
        ],
        "tailwindConfig": "./tailwind.config.ts",
        "tailwindFunctions": [
            "clsx",
            "classnames",
            "cn",
            "cva",
            "tw",
            "twMerge"
        ]
    }
}



================================================
FILE: playwright.config.mts
================================================
import { defineConfig, devices } from '@playwright/test'

export default defineConfig({
    testDir: './e2e',
    fullyParallel: true,
    forbidOnly: !!process.env.CI,
    retries: process.env.CI ? 2 : 0,
    workers: process.env.CI ? 1 : undefined,
    reporter: 'html',
    use: {
        baseURL: 'http://localhost:3000',
        trace: 'on-first-retry',
    },
    projects: [
        {
            name: 'chromium',
            use: { ...devices['Desktop Chrome'] },
        },
        {
            name: 'firefox',
            use: { ...devices['Desktop Firefox'] },
        },
        {
            name: 'webkit',
            use: { ...devices['Desktop Safari'] },
        },
    ],
    webServer: {
        command: 'bun run dev',
        url: 'http://localhost:3000',
        reuseExistingServer: !process.env.CI,
    },
})



================================================
FILE: postcss.config.mjs
================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



================================================
FILE: tsconfig.json
================================================
{
    "compilerOptions": {
        "target": "ES2020",
        "lib": ["dom", "dom.iterable", "esnext"],
        "allowJs": true,
        "skipLibCheck": true,
        "strict": true,
        "noEmit": true,
        "esModuleInterop": true,
        "module": "ESNext",
        "moduleResolution": "bundler",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "jsx": "preserve",
        "incremental": true,
        "plugins": [
            {
                "name": "next"
            }
        ],
        "paths": {
            "@/*": ["./src/*"]
        }
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
    "exclude": ["node_modules"]
}



================================================
FILE: tsconfig.node.json
================================================
{
    "compilerOptions": {
        "composite": true,
        "skipLibCheck": true,
        "module": "ESNext",
        "moduleResolution": "bundler",
        "allowSyntheticDefaultImports": true,
        "strict": true
    },
    "include": ["vitest.config.mts", "playwright.config.mts"]
}



================================================
FILE: vitest.config.mts
================================================
import react from '@vitejs/plugin-react'
import { fileURLToPath } from 'url'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    plugins: [react()],
    test: {
        environment: 'jsdom',
        globals: true,
        setupFiles: ['./src/test/setup.ts'],
        exclude: ['**/node_modules/**', '**/dist/**', '**/contracts/**', 'e2e/**'],
        coverage: {
            provider: 'v8',
            reporter: ['text', 'json', 'html'],
            exclude: ['node_modules/**', 'src/test/**', '**/*.d.ts', '**/*.config.*', '**/contracts/**'],
        },
    },
    resolve: {
        alias: {
            '@': fileURLToPath(new URL('./src', import.meta.url)),
        },
    },
})



================================================
FILE: wagmi-cli.config.ts
================================================
import { defineConfig } from '@wagmi/cli'
import { foundry } from '@wagmi/cli/plugins'

// Contract deployments by chain - addresses will be added after deployment
const contractDeployments = {
    Pool: undefined,
    DonationPool: undefined,
}

export default defineConfig({
    out: 'src/types/contracts.ts',
    plugins: [
        foundry({
            project: 'contracts',
            include: ['Pool.sol', 'DonationPool.sol'],
            deployments: contractDeployments,
        }),
    ],
})



================================================
FILE: wagmi.config.ts
================================================
import { defineConfig } from '@wagmi/cli';
import { foundry } from '@wagmi/cli/plugins';
import { celo, celoAlfajores } from 'wagmi/chains';

// Define network configurations
const celoNetworks = {
  [celo.id]: {
    // You might need to add specific deployment addresses here later
    // Example: DonationPool: '0x...',
  },
  [celoAlfajores.id]: {
    // Example: DonationPool: '0x...',
  },
};

export default defineConfig({
  out: 'src/lib/wagmi/contracts.ts', // Output file for generated hooks
  contracts: [], // We'll let the foundry plugin handle contracts
  plugins: [
    foundry({
      project: './contracts', // Explicit relative path
      include: [
        'Pool.sol/Pool.json', // Original Pool contract
        'DonationPool.sol/DonationPool.json', // Adding DonationPool contract
        // Specify contracts to include, or leave empty to include all artifacts
        // Example: 'PoolEscrow.sol/**', 'DirectPay.sol/**'
      ],
      deployments: celoNetworks, // Map deployments to Celo/Alfajores
      // You might need to adjust deployments based on actual contract deployment addresses
    }),
  ],
}); 


================================================
FILE: .env.local.example
================================================
# Database
NEON_DATABASE_URL="postgresql://username:password@your-neon-host/swipepad"

# Next Auth
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your_secret_key_here

# App
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_CHAIN_ID=44787 # Celo Alfajores 


================================================
FILE: .node-version
================================================
22


================================================
FILE: .npmrc
================================================
engine-strict=true
prefer-workspace-packages=true
# use bun to install packages when running npm
npm-command=bun
resolution-mode=highest
auto-install-peers=true
shamefully-hoist=true 



================================================
FILE: db/drizzle.server.ts
================================================
import { neonConfig, Pool } from '@neondatabase/serverless'
import { drizzle } from 'drizzle-orm/neon-serverless'
import { WebSocket } from 'ws'

const connectionString =
    process.env.NODE_ENV === 'production'
        ? process.env.POSTGRES_URL
        : process.env.LOCAL_POSTGRES_URL || process.env.DATABASE_URL

if (process.env.NODE_ENV === 'production') {
    neonConfig.webSocketConstructor = WebSocket
    neonConfig.poolQueryViaFetch = true
} else {
    neonConfig.wsProxy = host => `${host}:5433/v1`
    neonConfig.useSecureWebSocket = false
    neonConfig.pipelineTLS = false
    neonConfig.pipelineConnect = false
}

const pool = new Pool({ connectionString })

export default drizzle(pool)



================================================
FILE: db/index.ts
================================================
import { drizzle } from 'drizzle-orm/node-postgres'
import { Pool } from 'pg'
import * as schema from './schema'
// Initialize postgres connection pool
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
})

// Initialize drizzle with all schema tables
export const db = drizzle(pool, { schema })



================================================
FILE: db/migrations/meta/_journal.json
================================================
{"version":"5","dialect":"pg","entries":[]}


================================================
FILE: db/schema/achievements.ts
================================================
import { relations } from 'drizzle-orm'
import { pgTable, serial, text, timestamp, varchar } from 'drizzle-orm/pg-core'
import { userAchievements } from './user-achievements'

export const achievements = pgTable('achievements', {
    id: serial('id').primaryKey(),
    title: varchar('title', { length: 255 }).notNull(),
    description: text('description').notNull(),
    icon: varchar('icon', { length: 50 }).notNull(),
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow(),
})

export const achievementsRelations = relations(achievements, ({ many }) => ({
    userAchievements: many(userAchievements),
}))



================================================
FILE: db/schema/campaign-notes.ts
================================================
import { relations } from 'drizzle-orm'
import { integer, pgTable, serial, text, timestamp } from 'drizzle-orm/pg-core'
import { campaigns } from './campaigns'
import { users } from './users'

export const campaignNotes = pgTable('campaign_notes', {
    id: serial('id').primaryKey(),
    campaignId: integer('campaign_id')
        .references(() => campaigns.id)
        .notNull(),
    authorId: integer('author_id')
        .references(() => users.id)
        .notNull(),
    text: text('text').notNull(),
    upvotes: integer('upvotes').default(0).notNull(),
    createdAt: timestamp('created_at').notNull().defaultNow(),
})

export const campaignNotesRelations = relations(campaignNotes, ({ one }) => ({
    campaign: one(campaigns, {
        fields: [campaignNotes.campaignId],
        references: [campaigns.id],
    }),
    author: one(users, {
        fields: [campaignNotes.authorId],
        references: [users.id],
    }),
}))



================================================
FILE: db/schema/campaign-tags.ts
================================================
import { relations } from 'drizzle-orm'
import { integer, pgTable, serial, varchar } from 'drizzle-orm/pg-core'
import { campaigns } from './campaigns'

export const campaignTags = pgTable('campaign_tags', {
    id: serial('id').primaryKey(),
    campaignId: integer('campaign_id')
        .references(() => campaigns.id)
        .notNull(),
    text: varchar('text', { length: 50 }).notNull(),
    color: varchar('color', { length: 20 }).notNull(),
    count: integer('count').default(0).notNull(),
})

export const campaignTagsRelations = relations(campaignTags, ({ one }) => ({
    campaign: one(campaigns, {
        fields: [campaignTags.campaignId],
        references: [campaigns.id],
    }),
}))



================================================
FILE: db/schema/campaigns.ts
================================================
import { relations } from 'drizzle-orm'
import { boolean, decimal, integer, pgTable, serial, text, timestamp, varchar } from 'drizzle-orm/pg-core'
import { campaignNotes } from './campaign-notes'
import { campaignTags } from './campaign-tags'
import { categories } from './categories'
import { users } from './users'

export const campaigns = pgTable('campaigns', {
    id: serial('id').primaryKey(),
    title: varchar('title', { length: 255 }).notNull(),
    categoryName: varchar('category', { length: 100 })
        .notNull()
        .references(() => categories.name),
    description: text('description').notNull(),
    imageUrl: text('image_url').notNull(),
    fundingGoal: decimal('funding_goal', { precision: 10, scale: 2 }).notNull(),
    currentFunding: decimal('current_funding', { precision: 10, scale: 2 }).default('0'),
    websiteUrl: text('website_url'),
    sponsorBoosted: boolean('sponsor_boosted').default(false),
    creatorId: integer('creator_id')
        .notNull()
        .references(() => users.id),
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow(),
})

export const campaignsRelations = relations(campaigns, ({ one, many }) => ({
    creator: one(users, {
        fields: [campaigns.creatorId],
        references: [users.id],
    }),
    category: one(categories, {
        fields: [campaigns.categoryName],
        references: [categories.name],
    }),
    tags: many(campaignTags),
    notes: many(campaignNotes),
}))



================================================
FILE: db/schema/categories.ts
================================================
import { relations } from 'drizzle-orm'
import { pgTable, text, timestamp, varchar } from 'drizzle-orm/pg-core'
import { campaigns } from './campaigns'

export const categories = pgTable('categories', {
    name: varchar('name', { length: 100 }).primaryKey(),
    slug: varchar('slug', { length: 100 }).notNull().unique(),
    description: text('description'),
    icon: varchar('icon', { length: 50 }),
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow(),
})

export const categoriesRelations = relations(categories, ({ many }) => ({
    campaigns: many(campaigns),
}))



================================================
FILE: db/schema/friendships.ts
================================================
import { relations } from 'drizzle-orm'
import { integer, pgTable, primaryKey, timestamp } from 'drizzle-orm/pg-core'
import { users } from './users'

export const friendships = pgTable(
    'friendships',
    {
        followerId: integer('follower_id')
            .notNull()
            .references(() => users.id),
        followingId: integer('following_id')
            .notNull()
            .references(() => users.id),
        createdAt: timestamp('created_at').notNull().defaultNow(),
    },
    table => ({
        pk: primaryKey({ columns: [table.followerId, table.followingId] }),
    }),
)

export const friendshipsRelations = relations(friendships, ({ one }) => ({
    follower: one(users, {
        fields: [friendships.followerId],
        references: [users.id],
    }),
    following: one(users, {
        fields: [friendships.followingId],
        references: [users.id],
    }),
}))



================================================
FILE: db/schema/index.ts
================================================
// Base tables (no dependencies)
export * from './categories'
export * from './users'

// Tables with single dependencies
export * from './achievements'
export * from './campaigns'
export * from './supported-currencies'
export * from './supported-languages'
export * from './swipe-amounts'
export * from './transactions'

// Junction tables (multiple dependencies)
export * from './campaign-notes'
export * from './campaign-tags'
export * from './friendships'
export * from './user-achievements'



================================================
FILE: db/schema/supported-currencies.ts
================================================
import { pgTable, serial, varchar } from 'drizzle-orm/pg-core'

export const supportedCurrencies = pgTable('supported_currencies', {
    id: serial('id').primaryKey(),
    code: varchar('code', { length: 3 }).notNull().unique(),
    name: varchar('name', { length: 50 }).notNull(),
    symbol: varchar('symbol', { length: 5 }).notNull(),
})



================================================
FILE: db/schema/supported-languages.ts
================================================
import { pgTable, serial, varchar } from 'drizzle-orm/pg-core'

export const supportedLanguages = pgTable('supported_languages', {
    id: serial('id').primaryKey(),
    code: varchar('code', { length: 5 }).notNull().unique(),
    name: varchar('name', { length: 50 }).notNull(),
    nativeName: varchar('native_name', { length: 50 }).notNull(),
})



================================================
FILE: db/schema/swipe-amounts.ts
================================================
import { integer, pgTable, serial } from 'drizzle-orm/pg-core'

export const swipeAmounts = pgTable('swipe_amounts', {
    id: serial('id').primaryKey(),
    amount: integer('amount').notNull(),
})



================================================
FILE: db/schema/transactions.ts
================================================
import { relations } from 'drizzle-orm'
import { decimal, integer, pgTable, serial, text, timestamp, varchar } from 'drizzle-orm/pg-core'
import { campaigns } from './campaigns'
import { users } from './users'

export const transactions = pgTable('transactions', {
    id: serial('id').primaryKey(),
    userId: integer('user_id')
        .notNull()
        .references(() => users.id),
    campaignId: integer('campaign_id')
        .notNull()
        .references(() => campaigns.id),
    amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),
    currency: varchar('currency', { length: 10 }).notNull(),
    status: varchar('status', { length: 20 }).notNull(),
    type: varchar('type', { length: 20 }).notNull(),
    description: text('description'),
    metadata: text('metadata'),
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow(),
})

export const transactionsRelations = relations(transactions, ({ one }) => ({
    user: one(users, {
        fields: [transactions.userId],
        references: [users.id],
    }),
    campaign: one(campaigns, {
        fields: [transactions.campaignId],
        references: [campaigns.id],
    }),
}))



================================================
FILE: db/schema/user-achievements.ts
================================================
import { integer, pgTable, timestamp } from 'drizzle-orm/pg-core'
import { achievements } from './achievements'
import { users } from './users'

export const userAchievements = pgTable('user_achievements', {
    userId: integer('user_id')
        .references(() => users.id)
        .notNull(),
    achievementId: integer('achievement_id')
        .references(() => achievements.id)
        .notNull(),
    unlockedAt: timestamp('unlocked_at').notNull().defaultNow(),
})



================================================
FILE: db/schema/users.ts
================================================
import { relations } from 'drizzle-orm'
import { boolean, decimal, integer, pgTable, serial, text, timestamp, varchar } from 'drizzle-orm/pg-core'
import { campaignNotes } from './campaign-notes'
import { campaigns } from './campaigns'
import { transactions } from './transactions'
import { userAchievements } from './user-achievements'

export const users = pgTable('users', {
    id: serial('id').primaryKey(),
    name: varchar('name', { length: 255 }).notNull(),
    email: varchar('email', { length: 255 }).unique(),
    walletAddress: varchar('wallet_address', { length: 42 }).unique(),
    avatarUrl: text('avatar_url'),
    points: integer('points').default(0),
    maxPoints: integer('max_points').default(200),
    donations: decimal('donations', { precision: 10, scale: 2 }).default('0'),
    streak: integer('streak').default(0),
    reputation: integer('reputation').default(0),
    isCurrentUser: boolean('is_current_user').default(false),
    isPublicProfile: boolean('is_public_profile').default(true),
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow(),
})

export const usersRelations = relations(users, ({ many }) => ({
    createdCampaigns: many(campaigns, { relationName: 'creator' }),
    notes: many(campaignNotes, { relationName: 'author' }),
    transactions: many(transactions),
    achievements: many(userAchievements),
}))



================================================
FILE: docs/architecture-overview.md
================================================
# SwipePad Architecture

This document describes the global architecture of the SwipePad project, a donation platform with social features that combines blockchain and traditional databases.

## Overview

SwipePad is a decentralized application (dApp) built on the Celo network that allows users to:

1. Create funding projects
2. Donate to projects with a simple swipe gesture
3. Maintain a social and reputation profile
4. Participate in the community by adding tags and comments
5. Follow other users and view their activity

## Architecture Diagram

```
┌─────────────────────────────────────────────────────────────────────────┐
│                                                                         │
│                            FRONTEND (Next.js)                           │
│                                                                         │
│  ┌──────────────┐  ┌────────────────┐  ┌───────────────┐  ┌──────────┐  │
│  │ UI           │  │ Server Actions │  │ API Routes    │  │ Hooks     │  │
│  │ Components   │  │ (Next.js)      │  │ (Next.js)     │  │ (React)   │  │
│  └──────┬───────┘  └───────┬────────┘  └───────┬───────┘  └─────┬────┘  │
│         │                  │                   │                 │       │
└─────────┼──────────────────┼───────────────────┼─────────────────┼───────┘
           │                  │                   │                 │        
           │                  │                   │                 │        
┌──────────┼──────────────────┼───────────────────┼─────────────────┼───────┐
│          │                  │                   │                 │       │
│  ┌───────▼──────────────────▼───────┐ ┌─────────▼─────────────────▼─────┐ │
│  │                                  │ │                                 │ │
│  │      Neon Database                │ │      Blockchain (Celo)          │ │
│  │      (PostgreSQL)                 │ │                                 │ │
│  │                                  │ │                                 │ │
│  │  ┌─────────────┐  ┌────────────┐ │ │  ┌──────────────┐  ┌──────────┐ │ │
│  │  │ User        │  │ Project    │ │ │  │ DonationPool │  │ ERC-20   │ │ │
│  │  │ Data        │◄─┐│ Metadata  │ │ │  │ Contract     │  │ Tokens   │ │ │
│  │  └─────────────┘  │└────────────┘ │ │  └──────┬───────┘  └──────────┘ │ │
│  │  ┌─────────────┐  │               │ │         │                      │ │
│  │  │ Social      │◄─┘               │ │         │                      │ │
│  │  │ Data        │                  │ │         │                      │ │
│  │  └─────────────┘                  │ │         │                      │ │
│  │  ┌─────────────┐                  │ │         │                      │ │
│  │  │ Blockchain  │◄─────────────────┼─┼─────────┘                      │ │
│  │  │ Cache       │                  │ │                                 │ │
│  │  └─────────────┘                  │ │                                 │ │
│  └──────────────────────────────────┘ └─────────────────────────────────┘ │
│                                                                           │
│                        INFRASTRUCTURE LAYER                               │
└───────────────────────────────────────────────────────────────────────────┘
```

## Main Components

### 1. Frontend (Next.js App Router)

- **UI Components**: Reactive user interface built with React, TailwindCSS, and Shadcn UI
- **Client State**: State management with React Hooks and Context API
- **Server Components**: Server-rendered components for SEO and performance
- **Server Actions**: Server functions for data operations
- **API Routes**: REST endpoints for database and blockchain interactions

### 2. Backend (Serverless)

#### 2.1 Blockchain (Celo Network)

- **DonationPool Smart Contract**: Main contract managing projects and donations
- **ERC-20 Tokens**: Support for donations in multiple tokens
- **Events**: Event system for synchronization with the database
- **Interaction via Wagmi/Viem**: Library for smart contract interaction

#### 2.2 Database (Neon PostgreSQL)

- **User Module**: Profiles, achievements, reputation, and settings
- **Social Module**: User connections, activity, community notes
- **Project Module**: Metadata, categories, tags
- **Blockchain Cache**: Indexed data from the blockchain for quick access

#### 2.3 Backend Services

- **Blockchain Indexer**: Service that synchronizes blockchain events with the database
- **Authentication with NextAuth**: User authentication with wallets
- **Cron Jobs**: Scheduled tasks for maintenance and synchronization

## Data Flow

### 1. Project Creation

```mermaid
sequenceDiagram
    actor User
    participant UI as User Interface
    participant Contract as Smart Contract
    participant DB as Neon Database
    
    User->>UI: Creates project
    UI->>Contract: Sends transaction
    Contract-->>UI: Confirms transaction
    UI->>DB: Saves additional metadata
    DB-->>UI: Confirms storage
    UI-->>User: Shows confirmation
    
    par Background Synchronization
        Contract->>DB: ProjectCreated Event
        DB->>DB: Updates cache
    end
```

### 2. Project Donation

```mermaid
sequenceDiagram
    actor User
    participant UI as User Interface
    participant Contract as Smart Contract
    participant DB as Neon Database
    
    User->>UI: Swipes to donate
    UI->>Contract: Sends donation transaction
    Contract-->>UI: Confirms transaction
    
    par Optimistic Update
        UI->>User: Shows success animation
        UI->>DB: Records activity
    end
    
    par Background Update
        Contract->>DB: DonationReceived Event
        DB->>DB: Updates balances and statistics
        DB->>DB: Updates user reputation
        DB->>DB: Checks for unlocked achievements
    end
```

### 3. Social Interaction

```mermaid
sequenceDiagram
    actor User
    participant UI as User Interface
    participant DB as Neon Database
    
    User->>UI: Adds note/tag
    UI->>DB: Saves social metadata
    DB-->>UI: Confirms storage
    UI-->>User: Updates UI
    
    par Reputation Update
        DB->>DB: Updates reputation points
        DB->>DB: Checks social achievements
    end
```

## Storage Strategy

The architecture uses a hybrid approach for data storage:

1. **Critical Data on Blockchain**:
   - Projects and their essential details
   - Donations and financial transactions
   - Ownership and permissions

2. **Social Data and Metadata in Neon**:
   - User profiles and preferences
   - Connections between users
   - Tags, notes, and votes
   - Achievements and reputation points
   - Metrics and statistics

3. **Blockchain Cache**:
   - Replica of blockchain data for quick reading
   - Updated by an indexing service

## Security

- **Authentication**: Sign-In with Ethereum (SIWE) for wallet-based authentication
- **Authorization**: Access control based on on-chain ownership
- **Validation**: Cross-verification between off-chain and on-chain data
- **API Protection**: Protected endpoints with authentication
- **Optimistic Updates**: Improves UX while maintaining eventual consistency

## Scalability

- **Serverless Architecture**: Automatic scaling with Vercel
- **Serverless Database**: Neon PostgreSQL scales according to demand
- **Aggressive Caching**: Minimizes blockchain reads
- **Efficient Indexing**: Batch processing of blockchain events

## Implementation Plan

### Phase 1: MVP (Minimum Viable Product)

- DonationPool contract on testnet (Celo Alfajores)
- Basic functionality for creating and donating to projects
- Simple user profiles
- User interface with swipe functionality

### Phase 2: Social Features

- Reputation system and achievements
- Community notes and tagging
- User connections
- Rankings and leaderboards

### Phase 3: Optimizations and Scalability

- Efficient event indexing
- Performance improvements
- Load testing
- Deployment to mainnet

## Next Steps

1. Set up local development environment with Neon DB
2. Implement and test contracts on testnet
3. Develop main UI components
4. Implement wallet authentication system
5. Create indexing and synchronization services

## Conclusion

This hybrid architecture provides the best of both worlds:

- **Trust and transparency** of blockchain for financial transactions
- **Performance and flexibility** of a relational database for social features
- **Smooth user experience** thanks to optimistic design and efficient caching

The combination of blockchain and traditional technologies allows for creating a unique social donation experience, maintaining reasonable operational costs and allowing for easy scalability. 


================================================
FILE: docs/LAYOUT_ARCHITECTURE.md
================================================
# SwipePad Layout Architecture

## Overview

SwipePad follows a hierarchical layout structure that ensures consistent spacing, responsive behavior, and proper layering across different screen sizes and devices. This document outlines the core layout principles and component hierarchy.

## Layout Hierarchy

```
AppShell (fixed)
├── TopBar (fixed)
├── Content Layout (dynamic)
│   ├── Swipe View
│   │   ├── TabSwitcher (fixed)
│   │   ├── CategorySelector (fixed)
│   │   ├── Cards Stack (dynamic)
│   │   └── ActionBar (fixed)
│   ├── Social View
│   ├── Create/Status View
│   └── Profile View
├── BottomBar (fixed)
└── Overlay Layer (portal)
    ├── Onboarding
    ├── Drawers
    ├── Animations/Emojis
    ├── Popups/Tooltips
    └── Toasts
```

## 1. App Shell Layout

The App Shell serves as the primary container and maintains consistent spacing across all views.

### Characteristics:
- Fixed height and width (100vw/vh)
- Contains TopBar and BottomBar
- Responsive height adjustments for different devices
- All content is contained within its bounds (except overlay layer)

### Example Implementation:
```tsx
<div className="flex flex-col h-screen">
  <TopBar className="flex-none" />
  <main className="flex-1 relative overflow-hidden">
    {children}
  </main>
  <BottomBar className="flex-none" />
</div>
```

## 2. Content Layout

The Content Layout is the dynamic area between the TopBar and BottomBar.

### Characteristics:
- Dynamically extends to available height
- Respects App Shell margins
- Scrollable when content exceeds available space
- Contains view-specific layouts (Swipe, Social, Create/Status, Profile)

### Example Implementation:
```tsx
<div className="flex-1 overflow-auto">
  <div className="h-full relative">
    {currentView}
  </div>
</div>
```

## 3. Swipe View Layout

The Swipe View demonstrates how a specific view should be structured within the Content Layout.

### Characteristics:
- Fixed TabSwitcher at top
- Fixed CategorySelector below TabSwitcher
- Dynamic Cards Stack area
- Fixed ActionBar at bottom
- Maintains consistent spacing with App Shell

### Example Implementation:
```tsx
<div className="flex flex-col h-full">
  <TabSwitcher className="flex-none" />
  <CategorySelector className="flex-none" />
  <div className="flex-1 relative">
    <CardsStack />
  </div>
  <ActionBar className="flex-none" />
</div>
```

## Overlay Layer

The Overlay Layer handles all elements that need to appear above the main content.

### Characteristics:
- Rendered via React Portal
- Maintains proper z-index hierarchy
- Contained within App Shell bounds
- Handles interactive elements (drawers, tooltips)

### Z-Index Hierarchy:
```css
:root {
  --z-base: 0;
  --z-content: 10;
  --z-navigation: 20;
  --z-overlay: 30;
  --z-modal: 40;
  --z-toast: 50;
}
```

## Responsive Behavior

### Height-Based Adjustments:
- App Shell margins/padding adjust based on viewport height
- Content areas flex to fill available space
- Text and element sizes scale appropriately
- Maintains consistent spacing ratios

### Width-Based Adjustments:
- Content maintains max-width for readability
- Elements reflow based on available width
- Maintains consistent center alignment
- Preserves touch target sizes

## Best Practices

1. **Relative Positioning**
   - Use flex layouts instead of absolute positioning
   - Maintain natural document flow
   - Use relative units (rem, em, %) over fixed units

2. **Container Queries**
   - Components should respond to their container
   - Use container queries for more granular control
   - Maintain consistent spacing ratios

3. **Height Management**
   - Use flex-grow and flex-shrink appropriately
   - Handle overflow consistently
   - Maintain fixed elements without breaking layout

4. **Spacing System**
   - Use consistent spacing scale
   - Maintain vertical rhythm
   - Scale spacing based on viewport size

## Implementation Guidelines

### Layout Components:
```tsx
// Base layout component
const Layout = ({ children }) => (
  <div className="flex flex-col min-h-screen">
    {children}
  </div>
);

// Content layout component
const ContentLayout = ({ children }) => (
  <div className="flex-1 container mx-auto px-4">
    {children}
  </div>
);

// View layout component
const ViewLayout = ({ children }) => (
  <div className="flex flex-col h-full gap-4">
    {children}
  </div>
);
```

### Usage:
```tsx
<Layout>
  <TopBar />
  <ContentLayout>
    <ViewLayout>
      {/* View-specific content */}
    </ViewLayout>
  </ContentLayout>
  <BottomBar />
</Layout>
```

## Future Improvements

1. **Simplification Opportunities**:
   - Consider component composition over inheritance
   - Implement smart defaults for common patterns
   - Create reusable layout primitives

2. **Performance Optimizations**:
   - Virtualize long lists
   - Lazy load off-screen content
   - Optimize animations for 60fps

3. **Accessibility Enhancements**:
   - Ensure proper focus management
   - Maintain consistent navigation patterns
   - Support screen reader announcements

## Conclusion

This layout architecture provides a solid foundation for building responsive and maintainable user interfaces. By following these patterns, we ensure consistency across the application while maintaining flexibility for future enhancements. 


================================================
FILE: docs/neon-database-architecture.md
================================================
# Data Architecture: Neon Database and Smart Contracts

This document details the planned data architecture for SwipePad, which uses a hybrid approach combining smart contracts on the Celo blockchain with Neon Database (PostgreSQL) for secondary data storage.

## General Architecture

```
┌─────────────────┐            ┌─────────────────┐
│  Smart Contract │            │   Neon Database │
│  (Blockchain)   │            │   (Postgres)    │
├─────────────────┤            ├─────────────────┤
│ • Transactions  │            │ • Social Data   │
│ • Projects      │◄───►│      │ • Metadata      │
│ • Donations     │     │      │ • Cache         │
└─────────────────┘     │      └─────────────────┘
                        │
                  ┌─────┴─────┐
                  │  Frontend │
                  │(Next.js)  │
                  └───────────┘
```

## Design Principles

1. **Selective decentralization**: Critical financial data and core business logic remain on the blockchain.
2. **Cost optimization**: Non-critical or high-volume data are stored in the traditional database.
3. **Enriched social experience**: Social and community features primarily hosted off-chain.
4. **Optimized performance**: Cache and frequently accessed data in PostgreSQL for a smooth user experience.

## 1. Data in Smart Contract (Blockchain)

### DonationPool Contract

```solidity
struct Project {
    uint256 startTime;
    uint256 endTime;
    string projectName;
    string projectDescription;
    string projectUrl;
    string imageUrl;
    uint256 fundingGoal;
    uint8 fundingModel; // 0: ALL_OR_NOTHING, 1: KEEP_WHAT_YOU_RAISE
    address tokenAddress;
    address creator;
    bool isActive;
}

mapping(uint256 => Project) public projects;
mapping(uint256 => uint256) public projectBalances;
mapping(address => uint256[]) public projectsByCreator;
mapping(address => uint256[]) public donationsByUser;
```

### Data to store on blockchain:

- **Essential Project Information**:
  - Project ID
  - Creator address
  - Name and basic description
  - Funding goal
  - Funding model (All or Nothing / Keep What You Raise)
  - Project URL and image URL
  - Campaign start and end dates

- **Financial Data**:
  - Donation records
  - Project balances
  - Token address used

- **States and Authorizations**:
  - Active/inactive project status
  - Fund withdrawal permissions
  - Creator-project relationship

## 2. Data in Neon Database (PostgreSQL)

### Users Schema

```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  wallet_address VARCHAR(42) UNIQUE NOT NULL,
  username VARCHAR(100),
  avatar_url TEXT,
  reputation INT DEFAULT 0,
  streak INT DEFAULT 0,
  level VARCHAR(50) DEFAULT 'Beginner',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  is_public_profile BOOLEAN DEFAULT TRUE
);

CREATE TABLE user_achievements (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  achievement_id INT NOT NULL,
  unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(user_id, achievement_id)
);

CREATE TABLE user_settings (
  user_id INT PRIMARY KEY REFERENCES users(id),
  currency VARCHAR(10) DEFAULT 'CENTS',
  language VARCHAR(5) DEFAULT 'en',
  region VARCHAR(5) DEFAULT 'US',
  default_donation_amount DECIMAL(10,6) DEFAULT 0.01,
  auto_batch BOOLEAN DEFAULT TRUE
);
```

### Project Metadata Schema

```sql
CREATE TABLE project_metadata (
  project_id VARCHAR(100) PRIMARY KEY, -- ID from blockchain contract
  category VARCHAR(50) NOT NULL,
  tags TEXT[], -- Additional tags
  sponsor_boosted BOOLEAN DEFAULT FALSE,
  views_count INT DEFAULT 0,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE community_tags (
  id SERIAL PRIMARY KEY,
  project_id VARCHAR(100) NOT NULL,
  user_id INT REFERENCES users(id),
  text VARCHAR(100) NOT NULL,
  count INT DEFAULT 1,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE community_notes (
  id SERIAL PRIMARY KEY,
  project_id VARCHAR(100) NOT NULL,
  author_id INT REFERENCES users(id),
  text TEXT NOT NULL,
  tags TEXT[],
  upvotes INT DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Social Schema

```sql
CREATE TABLE user_connections (
  id SERIAL PRIMARY KEY,
  follower_id INT REFERENCES users(id),
  following_id INT REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(follower_id, following_id)
);

CREATE TABLE user_activities (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  activity_type VARCHAR(50) NOT NULL, -- donation, tag, note, etc.
  project_id VARCHAR(100),
  tx_hash VARCHAR(66), -- Transaction hash if applicable
  points_earned INT DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Cache Schema

```sql
CREATE TABLE cached_projects (
  id VARCHAR(100) PRIMARY KEY,
  creator_address VARCHAR(42) NOT NULL,
  name VARCHAR(200) NOT NULL,
  description TEXT,
  image_url TEXT,
  funding_goal DECIMAL(20,0),
  current_funding DECIMAL(20,0) DEFAULT 0,
  start_time TIMESTAMP,
  end_time TIMESTAMP,
  funding_model SMALLINT,
  is_active BOOLEAN DEFAULT TRUE,
  last_sync TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE cached_donations (
  id SERIAL PRIMARY KEY,
  tx_hash VARCHAR(66) UNIQUE,
  donor_address VARCHAR(42) NOT NULL,
  project_id VARCHAR(100) NOT NULL,
  amount DECIMAL(20,0) NOT NULL,
  donated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## 3. Data Flows and Integration

### Project Creation

1. User creates a project through the SwipePad interface
2. The application sends a transaction to the `DonationPool` contract with the essential data
3. After confirming the transaction, additional metadata is stored in Neon Database:
   - Detailed category
   - Specific tags
   - Promotion status
4. A record is created in the `cached_projects` table for quick access

### Donation Process

1. User makes a donation through the interface
2. The `donate()` method is executed in the contract
3. After blockchain confirmation:
   - User reputation is updated
   - Activity is recorded
   - Checks if the user unlocks any achievements
   - Donation streak is updated
4. The project cache is updated with the new balance

### Reputation and Social System

The reputation system is based on:

- **Donations**: Amount and frequency
- **Community participation**: Tags and notes contributed
- **Social validation**: Upvotes received on notes
- **Consistency**: Maintaining streaks

User levels advance automatically based on accumulated reputation points.

## 4. Synchronization Services

### Event Indexer

Service that listens to events emitted by the contract:
- `ProjectCreated`
- `DonationReceived`
- `FundsWithdrawn`
- `RefundClaimed`

This service updates the Neon database to keep the data synchronized.

### Cache Service

Periodically updates:
- Project balances
- Project status (active/inactive, completed)
- Cumulative donation totals

## 5. Security Considerations

### Authentication and Authorization

- User authentication via wallet signature (SIWE)
- On-chain verification for critical actions
- Authorization rules in API for operations on Neon Database

### Data Integrity

- Cross-verification between blockchain and database
- Transaction hashes as reference for validation
- Recovery system for inconsistencies

## 6. User Experience and Optimizations

### UI Optimizations

- Pre-loaded data from Neon for fast initial rendering
- Optimistic UI updates before blockchain confirmation
- Fallback to cached data when blockchain connection is slow

### Metrics and Analytics

- User interaction tracking
- Donation pattern analysis
- Social engagement metrics

## 7. Implementation Plan

### Phase 1: Basic Infrastructure

- Neon Database setup
- DonationPool contract deployment on Celo Alfajores
- Implementation of basic user and project schema

### Phase 2: Social Functionality

- Development of reputation system
- Implementation of community notes and tags
- User connections

### Phase 3: Optimizations and Scalability

- Indexing and cache services
- Performance optimizations
- Deployment to mainnet

## Conclusion

This hybrid architecture leverages the strengths of each technology:
- **Blockchain**: For security, immutability, and trust in financial transactions
- **Neon Database**: For social data, metadata, and fast user experience

The result is a platform that provides the trust of blockchain for donations, combined with the rich social experience and performance of a traditional database. 


================================================
FILE: docs/neon-database-connection.md
================================================
# Connecting Next.js with Neon Database

This document details the process for connecting our Next.js application with Neon Database (PostgreSQL) to handle social data and project metadata for the SwipePad project.

## Initial Setup

### 1. Installing Dependencies

```bash
# Install the necessary dependencies
bun add @neondatabase/serverless pg pg-promise next-auth drizzle-orm @vercel/postgres
bun add -D drizzle-kit @types/pg
```

### 2. Environment Variables

Create or update the `.env.local` file at the root of the project:

```env
# Neon Database
NEON_DATABASE_URL="postgresql://username:password@your-neon-host/neondb"
NEON_SHADOW_DATABASE_URL="postgresql://username:password@your-neon-host/neondb_shadow"

# Drizzle
NEXT_PUBLIC_ENABLE_DRIZZLE_LOGGING=true

# Next Auth
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your_secret_key_here
NEXT_PUBLIC_CHAIN_ID=44787 # Celo Alfajores
```

Make sure to add `.env.local` to your `.gitignore`.

## Drizzle ORM Configuration

### 1. Create the Schema

Create a file `src/db/schema.ts` to define your models:

```typescript
import { pgTable, serial, varchar, timestamp, text, integer, boolean, pgEnum } from 'drizzle-orm/pg-core';

// Enums
export const userLevelEnum = pgEnum('user_level', ['Beginner', 'Contributor', 'Supporter', 'Champion']);
export const activityTypeEnum = pgEnum('activity_type', ['donation', 'tag', 'note', 'follow', 'achievement']);

// Users
export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  walletAddress: varchar('wallet_address', { length: 42 }).notNull().unique(),
  username: varchar('username', { length: 100 }),
  avatarUrl: text('avatar_url'),
  reputation: integer('reputation').default(0),
  streak: integer('streak').default(0),
  level: userLevelEnum('level').default('Beginner'),
  createdAt: timestamp('created_at').defaultNow(),
  lastActive: timestamp('last_active').defaultNow(),
  isPublicProfile: boolean('is_public_profile').default(true),
});

// User Settings
export const userSettings = pgTable('user_settings', {
  userId: integer('user_id').primaryKey().references(() => users.id),
  currency: varchar('currency', { length: 10 }).default('CENTS'),
  language: varchar('language', { length: 5 }).default('en'),
  region: varchar('region', { length: 5 }).default('US'),
  defaultDonationAmount: numeric('default_donation_amount', { precision: 10, scale: 6 }).default('0.01'),
  autoBatch: boolean('auto_batch').default(true),
});

// ... Define the rest of the tables according to the SQL schema ...
```

### 2. Configure the Connection

Create a file `src/db/index.ts` to handle the connection:

```typescript
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import * as schema from './schema';

// For serverless environments
const sql = neon(process.env.NEON_DATABASE_URL!);
export const db = drizzle(sql, { schema });

// For environments with persistent connections (optional)
import { Pool } from 'pg';
import { drizzle as drizzlePg } from 'drizzle-orm/node-postgres';

let pool: Pool;

if (process.env.NODE_ENV === 'production') {
  pool = new Pool({
    connectionString: process.env.NEON_DATABASE_URL,
  });
} else {
  if (!global.pool) {
    global.pool = new Pool({
      connectionString: process.env.NEON_DATABASE_URL,
    });
  }
  pool = global.pool;
}

export const dbPool = drizzlePg(pool, { schema });
```

### 3. Configure Migrations

Create a file `drizzle.config.ts` at the root of the project:

```typescript
import type { Config } from 'drizzle-kit';
import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

export default {
  schema: './src/db/schema.ts',
  out: './src/db/migrations',
  driver: 'pg',
  dbCredentials: {
    connectionString: process.env.NEON_DATABASE_URL!,
  },
  verbose: true,
  strict: true,
} satisfies Config;
```

Add migration scripts to `package.json`:

```json
{
  "scripts": {
    "db:generate": "drizzle-kit generate:pg",
    "db:migrate": "bun run src/db/migrate.ts",
    "db:studio": "drizzle-kit studio"
  }
}
```

Create the migration script in `src/db/migrate.ts`:

```typescript
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { migrate } from 'drizzle-orm/neon-http/migrator';

const runMigration = async () => {
  try {
    const sql = neon(process.env.NEON_DATABASE_URL!);
    const db = drizzle(sql);

    console.log('Running migrations...');
    await migrate(db, { migrationsFolder: 'src/db/migrations' });
    console.log('Migrations completed successfully!');
    process.exit(0);
  } catch (error) {
    console.error('Migration failed:', error);
    process.exit(1);
  }
};

runMigration();
```

## Implementing Data Access

### 1. Data Access Repositories

Create repositories for each entity in `src/repositories/`:

```typescript
// src/repositories/userRepository.ts
import { db } from '@/db';
import { users } from '@/db/schema';
import { eq } from 'drizzle-orm';

export const userRepository = {
  // Find user by wallet address
  async findByWalletAddress(address: string) {
    return await db.query.users.findFirst({
      where: eq(users.walletAddress, address.toLowerCase()),
    });
  },
  
  // Create new user
  async create(data: { walletAddress: string; username?: string; avatarUrl?: string }) {
    return await db.insert(users).values({
      walletAddress: data.walletAddress.toLowerCase(),
      username: data.username,
      avatarUrl: data.avatarUrl,
    }).returning();
  },
  
  // Update user streak
  async updateStreak(userId: number, streak: number) {
    return await db.update(users)
      .set({ streak })
      .where(eq(users.id, userId))
      .returning();
  },
  
  // More methods as needed...
};
```

### 2. Implementation in Route Handlers (API)

```typescript
// src/app/api/users/[address]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { userRepository } from '@/repositories/userRepository';

export async function GET(
  request: NextRequest,
  { params }: { params: { address: string } }
) {
  try {
    const user = await userRepository.findByWalletAddress(params.address);
    
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }
    
    return NextResponse.json(user);
  } catch (error) {
    console.error('Error fetching user:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

### 3. Usage in Server Components

```typescript
// src/app/profile/[address]/page.tsx
import { userRepository } from '@/repositories/userRepository';
import { notFound } from 'next/navigation';

export default async function ProfilePage({ params }: { params: { address: string } }) {
  const user = await userRepository.findByWalletAddress(params.address);
  
  if (!user) {
    notFound();
  }
  
  return (
    <div>
      <h1>{user.username || 'Anonymous User'}</h1>
      <p>Reputation: {user.reputation}</p>
      <p>Streak: {user.streak} days</p>
      {/* More profile information */}
    </div>
  );
}
```

### 4. Usage in Client Components with Server Actions

```typescript
// src/actions/user-actions.ts
'use server'

import { userRepository } from '@/repositories/userRepository';
import { revalidatePath } from 'next/cache';

export async function updateUserProfile(
  userId: number,
  data: { username?: string; avatarUrl?: string; isPublicProfile?: boolean }
) {
  try {
    // Update user profile
    await db.update(users)
      .set(data)
      .where(eq(users.id, userId));
    
    // Revalidate the page to reflect changes
    revalidatePath(`/profile/${userId}`);
    
    return { success: true };
  } catch (error) {
    console.error('Error updating profile:', error);
    return { success: false, error: 'Failed to update profile' };
  }
}
```

## Integration with Wallet Authentication

### 1. Configure NextAuth with Siwe (Sign-In with Ethereum)

```typescript
// src/lib/auth.ts
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { getCsrfToken } from 'next-auth/react';
import { SiweMessage } from 'siwe';
import { userRepository } from '@/repositories/userRepository';

export const {
  handlers: { GET, POST },
  auth,
} = NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Ethereum',
      credentials: {
        message: {
          label: 'Message',
          type: 'text',
        },
        signature: {
          label: 'Signature',
          type: 'text',
        },
      },
      async authorize(credentials, req) {
        try {
          if (!credentials?.message || !credentials?.signature) return null;

          const siwe = new SiweMessage(JSON.parse(credentials.message));
          const result = await siwe.verify({
            signature: credentials.signature,
          });

          if (!result.success) return null;

          // Verify or create user in the database
          let user = await userRepository.findByWalletAddress(siwe.address);
          
          if (!user) {
            const newUsers = await userRepository.create({
              walletAddress: siwe.address,
            });
            user = newUsers[0];
          }

          return {
            id: user.id.toString(),
            name: user.username || siwe.address,
            address: siwe.address,
            image: user.avatarUrl,
          };
        } catch (error) {
          console.error('Error in authorization:', error);
          return null;
        }
      },
    }),
  ],
  callbacks: {
    async session({ session, token }) {
      if (token.sub && session.user) {
        session.user.id = token.sub;
        session.user.address = token.address as string;
      }
      return session;
    },
    async jwt({ token, user }) {
      if (user) {
        token.address = user.address;
      }
      return token;
    },
  },
  pages: {
    signIn: '/',
    error: '/',
  },
  session: {
    strategy: 'jwt',
  },
});
```

### 2. Implementation of Authentication Routes

```typescript
// src/app/api/auth/[...nextauth]/route.ts
import { GET, POST } from '@/lib/auth';

export { GET, POST };
```

## Blockchain Synchronization Services

### 1. Service for Indexing Blockchain Events

```typescript
// src/services/blockchain-indexer.ts
import { createPublicClient, http, parseAbiItem } from 'viem';
import { celoAlfajores } from 'viem/chains';
import { db } from '@/db';
import { cachedProjects, cachedDonations } from '@/db/schema';

// Public client for reading blockchain events
const publicClient = createPublicClient({
  chain: celoAlfajores,
  transport: http('https://alfajores-forno.celo-testnet.org'),
});

// ABI of relevant events
const projectCreatedEvent = parseAbiItem('event ProjectCreated(uint256 indexed projectId, address indexed creator, string name)');
const donationReceivedEvent = parseAbiItem('event DonationReceived(uint256 indexed projectId, address indexed donor, uint256 amount)');

export async function indexBlockchainEvents(fromBlock: bigint, toBlock: bigint) {
  try {
    // Index ProjectCreated events
    const projectCreatedLogs = await publicClient.getLogs({
      address: '0xYourContractAddress' as `0x${string}`,
      event: projectCreatedEvent,
      fromBlock,
      toBlock,
    });

    // Process project creation logs
    for (const log of projectCreatedLogs) {
      const { projectId, creator, name } = log.args;
      
      // Get complete project details from the contract
      const projectDetails = await getProjectDetailsFromContract(projectId);
      
      // Update the database
      await db.insert(cachedProjects).values({
        id: projectId.toString(),
        creator_address: creator.toLowerCase(),
        name: projectDetails.name,
        description: projectDetails.description,
        // ... other fields
      }).onConflictDoUpdate({
        target: cachedProjects.id,
        set: {
          // Fields to update
          last_sync: new Date(),
        },
      });
    }

    // Similar for donation events
    // ...

    console.log(`Indexed events from block ${fromBlock} to ${toBlock}`);
  } catch (error) {
    console.error('Error indexing blockchain events:', error);
  }
}

// Helper function to get complete project details
async function getProjectDetailsFromContract(projectId: bigint) {
  // Implement contract call to get details
  // ...
}
```

### 2. Configure the Indexer as a Cron Service

```typescript
// src/app/api/cron/index-blockchain/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { indexBlockchainEvents } from '@/services/blockchain-indexer';
import { db } from '@/db';
import { indexerState } from '@/db/schema';
import { eq } from 'drizzle-orm';

export async function GET(request: NextRequest) {
  // Verify secret to protect the endpoint
  const authHeader = request.headers.get('authorization');
  if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    // Get last indexed block
    const state = await db.query.indexerState.findFirst({
      where: eq(indexerState.id, 1),
    });

    const lastIndexedBlock = state?.lastIndexedBlock || 0n;
    const currentBlock = await getCurrentBlockNumber();

    // Calculate how many blocks to index (max 1000 per execution)
    const blocksToIndex = 1000n;
    const toBlock = lastIndexedBlock + blocksToIndex > currentBlock
      ? currentBlock
      : lastIndexedBlock + blocksToIndex;

    // Index events
    await indexBlockchainEvents(lastIndexedBlock + 1n, toBlock);

    // Update state
    await db.update(indexerState)
      .set({ lastIndexedBlock: toBlock, updatedAt: new Date() })
      .where(eq(indexerState.id, 1));

    return NextResponse.json({
      success: true,
      fromBlock: lastIndexedBlock + 1n,
      toBlock,
      blocksIndexed: toBlock - lastIndexedBlock,
    });
  } catch (error) {
    console.error('Error running blockchain indexer:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: String(error) },
      { status: 500 }
    );
  }
}

// Helper function to get the current block number
async function getCurrentBlockNumber() {
  const publicClient = createPublicClient({
    chain: celoAlfajores,
    transport: http('https://alfajores-forno.celo-testnet.org'),
  });
  return await publicClient.getBlockNumber();
}
```

## Vercel Configuration

1. Create a project on Vercel and connect it to your repository
2. Configure environment variables in Vercel:
   - `NEON_DATABASE_URL`
   - `NEXTAUTH_URL`
   - `NEXTAUTH_SECRET`
   - `CRON_SECRET`
3. Configure Vercel Cron:

```json
// vercel.json
{
  "crons": [
    {
      "path": "/api/cron/index-blockchain",
      "schedule": "*/10 * * * *"
    }
  ]
}
```

## Conclusion

This implementation allows for complete integration between our Next.js application, Neon Database (PostgreSQL), and the Celo blockchain. The main advantages are:

1. **Optimized performance**: Frequently accessed data is stored in Neon
2. **Reduced costs**: Minimizes the number of blockchain calls
3. **Enriched social experience**: Social features implemented in PostgreSQL
4. **Automatic synchronization**: Indexing service keeps data updated

In development, you can use Drizzle Studio to manage your database:

```bash
bun run db:studio
```

And to deploy schema changes:

```bash
bun run db:generate
bun run db:migrate
``` 


================================================
FILE: docs/neon-database-init.sql
================================================
-- SwipePad Neon Database Initialization Script
-- This script initializes the complete database schema for SwipePad

-- User Schema
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  wallet_address VARCHAR(42) UNIQUE NOT NULL,
  username VARCHAR(100),
  avatar_url TEXT,
  reputation INT DEFAULT 0,
  streak INT DEFAULT 0,
  level VARCHAR(50) DEFAULT 'Beginner',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  is_public_profile BOOLEAN DEFAULT TRUE
);

CREATE TABLE user_achievements (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  achievement_id INT NOT NULL,
  unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(user_id, achievement_id)
);

CREATE TABLE achievements (
  id SERIAL PRIMARY KEY,
  icon TEXT NOT NULL, -- Emoji or other representation
  title VARCHAR(100) NOT NULL,
  description TEXT NOT NULL,
  criteria TEXT, -- Description of how to unlock
  points INT DEFAULT 10
);

CREATE TABLE user_settings (
  user_id INT PRIMARY KEY REFERENCES users(id),
  currency VARCHAR(10) DEFAULT 'CENTS',
  language VARCHAR(5) DEFAULT 'en',
  region VARCHAR(5) DEFAULT 'US',
  default_donation_amount DECIMAL(10,6) DEFAULT 0.01,
  auto_batch BOOLEAN DEFAULT TRUE
);

-- Project and Metadata Schema
CREATE TABLE project_metadata (
  project_id VARCHAR(100) PRIMARY KEY, -- ID from blockchain contract
  category VARCHAR(50) NOT NULL,
  tags TEXT[], -- Additional tags
  sponsor_boosted BOOLEAN DEFAULT FALSE,
  views_count INT DEFAULT 0,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE categories (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) UNIQUE NOT NULL,
  description TEXT,
  icon TEXT, -- Emoji or other identifier
  is_active BOOLEAN DEFAULT TRUE
);

CREATE TABLE community_tags (
  id SERIAL PRIMARY KEY,
  project_id VARCHAR(100) NOT NULL,
  user_id INT REFERENCES users(id),
  text VARCHAR(100) NOT NULL,
  count INT DEFAULT 1,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE community_notes (
  id SERIAL PRIMARY KEY,
  project_id VARCHAR(100) NOT NULL,
  author_id INT REFERENCES users(id),
  text TEXT NOT NULL,
  tags TEXT[],
  upvotes INT DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE community_note_votes (
  id SERIAL PRIMARY KEY,
  note_id INT REFERENCES community_notes(id),
  user_id INT REFERENCES users(id),
  is_upvote BOOLEAN NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(note_id, user_id)
);

-- Social Schema
CREATE TABLE user_connections (
  id SERIAL PRIMARY KEY,
  follower_id INT REFERENCES users(id),
  following_id INT REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(follower_id, following_id)
);

CREATE TABLE user_activities (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  activity_type VARCHAR(50) NOT NULL, -- donation, tag, note, etc.
  project_id VARCHAR(100),
  tx_hash VARCHAR(66), -- Transaction hash if applicable
  points_earned INT DEFAULT 0,
  data JSONB, -- Additional data specific to the activity type
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Cache Schema
CREATE TABLE cached_projects (
  id VARCHAR(100) PRIMARY KEY,
  creator_address VARCHAR(42) NOT NULL,
  name VARCHAR(200) NOT NULL,
  description TEXT,
  image_url TEXT,
  funding_goal DECIMAL(20,0),
  current_funding DECIMAL(20,0) DEFAULT 0,
  start_time TIMESTAMP,
  end_time TIMESTAMP,
  funding_model SMALLINT,
  is_active BOOLEAN DEFAULT TRUE,
  last_sync TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE cached_donations (
  id SERIAL PRIMARY KEY,
  tx_hash VARCHAR(66) UNIQUE,
  donor_address VARCHAR(42) NOT NULL,
  project_id VARCHAR(100) NOT NULL,
  amount DECIMAL(20,0) NOT NULL,
  token_address VARCHAR(42),
  donated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for optimizing frequent queries
CREATE INDEX idx_user_wallet ON users(wallet_address);
CREATE INDEX idx_project_creator ON cached_projects(creator_address);
CREATE INDEX idx_donation_donor ON cached_donations(donor_address);
CREATE INDEX idx_donation_project ON cached_donations(project_id);
CREATE INDEX idx_community_tags_project ON community_tags(project_id);
CREATE INDEX idx_community_notes_project ON community_notes(project_id);
CREATE INDEX idx_user_activity_user ON user_activities(user_id);
CREATE INDEX idx_user_activity_type ON user_activities(activity_type);

-- Initial data for categories
INSERT INTO categories (name, description, icon) VALUES
('Education', 'Educational projects and initiatives', '🎓'),
('Climate', 'Climate change and environmental projects', '🌍'),
('Health', 'Healthcare and wellness initiatives', '🏥'),
('Wildlife', 'Animal conservation and protection', '🦁'),
('Open Source', 'Open source software and public goods', '💻'),
('SocFi', 'Social finance and impact investing', '💰'),
('Art', 'Art and creative projects', '🎨'),
('Community', 'Local community initiatives', '🏙️');

-- Initial data for achievements
INSERT INTO achievements (icon, title, description, criteria, points) VALUES
('🚀', 'First Donation', 'Made your first micro-donation', 'Make at least one donation', 10),
('🔥', 'Streak Master', 'Donated for 7 days in a row', 'Maintain a 7-day donation streak', 25),
('💰', 'Big Spender', 'Donated a total of $10', 'Reach $10 in total donations', 30),
('🌍', 'Global Impact', 'Donated to projects in 5 different categories', 'Donate to 5 different categories', 40),
('👑', 'Leaderboard Champion', 'Reached the top 3 on the leaderboard', 'Rank among the top 3 donors of the month', 50),
('🔍', 'Community Guardian', 'Submit 10 verified tags on projects', 'Add 10 tags that get verified', 20),
('⭐', 'Trusted Tagger', 'Have 50 of your tags confirmed by others', 'Get 50 tags confirmed by other users', 35);

-- Triggers for automation

-- Update reputation when receiving votes on community notes
CREATE OR REPLACE FUNCTION update_reputation_on_note_vote()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.is_upvote THEN
    UPDATE users SET reputation = reputation + 2 WHERE id = (SELECT author_id FROM community_notes WHERE id = NEW.note_id);
  ELSE
    UPDATE users SET reputation = reputation - 1 WHERE id = (SELECT author_id FROM community_notes WHERE id = NEW.note_id);
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER note_vote_trigger
AFTER INSERT ON community_note_votes
FOR EACH ROW
EXECUTE FUNCTION update_reputation_on_note_vote();

-- Update tag count
CREATE OR REPLACE FUNCTION update_tag_count()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE community_tags 
  SET count = count + 1
  WHERE project_id = NEW.project_id AND text = NEW.text AND NEW.id <> id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tag_count_trigger
AFTER INSERT ON community_tags
FOR EACH ROW
EXECUTE FUNCTION update_tag_count();

-- Update user level based on reputation
CREATE OR REPLACE FUNCTION update_user_level()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.reputation >= 150 THEN
    NEW.level = 'Champion';
  ELSIF NEW.reputation >= 100 THEN
    NEW.level = 'Supporter';
  ELSIF NEW.reputation >= 50 THEN
    NEW.level = 'Contributor';
  ELSIF NEW.reputation >= 20 THEN
    NEW.level = 'Beginner';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER user_level_trigger
BEFORE UPDATE ON users
FOR EACH ROW
WHEN (OLD.reputation IS DISTINCT FROM NEW.reputation)
EXECUTE FUNCTION update_user_level(); 


================================================
FILE: docs/project-specification.md
================================================
# SwipePad — Micro-Donations Made Easy

## Product Overview
SwipePad is a mobile-first dApp for MiniPay on Celo enabling users to swipe through verified impact projects and donate with stablecoins in seconds. It addresses the challenges of centralized donation platforms by providing a transparent, accessible alternative for global micro-philanthropy.

## Business Model
- **Target Market**: MiniPay users (7M+), socially conscious donors, global impact creators
- **Revenue Strategy**: 2% platform fee on successful donations
- **Value Proposition**: Frictionless mobile experience connecting donors directly to projects

## Technical Architecture
- **Frontend**: Next.js 15, React 19, Tailwind CSS 4, Framer Motion
- **Web3 Stack**: Wagmi 2, Viem, MiniPay wallet integration
- **Backend**: Neon PostgreSQL (serverless), tRPC for type-safe APIs
- **Blockchain**: Celo network, Solidity smart contracts (DonationPool)
- **Package Manager**: Bun instead of npm

## Key Features
- **Swipe Interface**: Tinder-like UX for discovering projects
- **Multi-currency**: Support for cUSD, cEUR, cKES, and other Celo stablecoins
- **Flexible Funding**: All-or-Nothing or Keep-What-You-Raise models
- **On-Chain Transparency**: Fully verifiable donations
- **Social Elements**: User profiles, activity tracking, community tags

## Donation Flow
1. **Creator** publishes project with details, funding goal, and deadline
2. **Donors** swipe through projects and make instant donations
3. **Funds** are stored in smart contract until goal/deadline
4. **Creator** withdraws funds after successful campaign
5. **Refunds** automatically processed if goal not met (All-or-Nothing model only)

## Smart Contract Architecture
The DonationPool contract manages the entire lifecycle with two funding models:
- **All-or-Nothing**: Creators receive funds only if goal is met
- **Keep-What-You-Raise**: Creators receive all donations regardless of goal

## Team
- **refistarter.eth**: Project Lead
- **ottox.eth**: Frontend Developer
- **ozkite.eth**: Smart Contract Developer

## Project Status
Current milestone: Initial Setup & Contract Integration (April-May 2025)
Built for the Global Stablecoin Hackathon on Celo 


================================================
FILE: docs/milestones/001-contract-implementation.md
================================================
# DonationPool Contract Implementation Milestone

## Overview

This milestone involved creating the DonationPool smart contract, which serves as the core backend for SwipePad's donation functionality. The contract is designed to handle micro-donations in a secure, transparent, and flexible way on the Celo blockchain.

## Architecture Diagram

```
# SwipePad Smart Contract Architecture

+-------------------+     +-------------------+     +-------------------+
|                   |     |                   |     |                   |
|    Pool.sol       |     |  DonationPool.sol |     |   Interfaces     |
|                   |     |                   |     |                   |
+--------+----------+     +--------+----------+     +---------+---------+
         |                         |                          |
         |                         |                          |
         v                         v                          v
+--------------------------------------------------------+
|                                                        |
|                  Libraries                             |
|                                                        |
+--------------------------------------------------------+
         ^                         ^                          ^
         |                         |                          |
         |                         |                          |
+--------+----------+     +--------+----------+     +---------+---------+
|                   |     |                   |     |                   |
|    Dependencies   |     |   OpenZeppelin    |     |   Testing Env     |
|                   |     |                   |     |                   |
+-------------------+     +-------------------+     +-------------------+

## DonationPool Contract Structure

+------------------+     +---------------------+
|                  |     |                     |
|   DonationPool   +---->+ IDonationPool      |
|                  |     | Interface           |
+--------+---------+     +---------------------+
         |
         |  Inherits
         v
+---------+---------+
|                   |
|  Access Control   |
|  (OpenZeppelin)   |
|                   |
+-------------------+

## Data Flow for Donations

+------------+     +---------------+     +------------+
|            |     |               |     |            |
|   Donor    +---->+ DonationPool  +---->+  Creator   |
|            |     |               |     |            |
+------------+     +-------+-------+     +------------+
                           |
                           | (Failed projects)
                           v
                   +---------------+
                   |               |
                   |     Donor     |
                   | (Refund)      |
                   +---------------+
```

## Key Deliverables

1. **Core Smart Contract**:
   - `DonationPool.sol`: The main contract that handles project creation, donations, and fund management
   - `IDonationPool.sol`: Interface defining the contract API for better interoperability

2. **Helper Libraries**:
   - `DonationPoolAdminLib.sol`: Functions for admin operations and creator management
   - `DonationPoolDetailLib.sol`: Functions for project details management
   - `DonationPoolBalanceLib.sol`: Functions for financial operations and balance tracking
   - `DonorDetailLib.sol`: Functions for donor record management
   - `DonationConstantsLib.sol`: Constants used throughout the contract including fees and timeframes
   - `DonationEventsLib.sol`: Event definitions for contract activities
   - `DonationErrorsLib.sol`: Custom error definitions for better gas efficiency and error handling

3. **Comprehensive Test Suite**:
   - Unit tests for all contract functions
   - Integration tests covering full donation lifecycle
   - Scenarios for both funding models: All-or-Nothing and Keep-What-You-Raise
   - Tests for dispute resolution and admin functions
   - Edge case handling for various donation amounts and timeframes

## Contract Features

### Project Creation and Management
- Create donation projects with custom details including name, description, and URLs
- Set funding goals and timeframes with validation for minimum and maximum durations
- Choose between two funding models: All-or-Nothing or Keep-What-You-Raise
- Update project details and end times with proper access control
- Cancel projects when necessary (if no donations have been received)

### Donation Handling
- Process donations with variable amounts and proper validation
- Track donation history for each donor with detailed records
- Calculate and update funding progress in real-time
- Automatically update project status when funding goal is reached

### Fund Management
- Conditional fund withdrawal based on funding model and project status
- Refund mechanism for failed All-or-Nothing projects with grace period
- Platform fee collection for sustainability (configurable fee rate)
- Proper accounting of donations, fees, and withdrawals

### Security and Administration
- Dispute flagging and resolution process for problematic projects
- Contract pause/unpause in emergency situations
- Role-based access control for administrative functions
- Timelock periods for critical operations

## Technical Implementation Details

- **POOLSTATUS Enum**: Tracks the current state of each project (ACTIVE, SUCCESSFUL, FAILED, DELETED)
- **FUNDINGMODEL Enum**: Defines the funding model for each project (ALL_OR_NOTHING, KEEP_WHAT_YOU_RAISE)
- **Struct Organization**: Clean data structures for project details, balances, and donor information
- **Event Emission**: Comprehensive events for all state changes to enable frontend updates
- **Error Handling**: Custom error types with detailed information for better debugging

## Next Steps

1. **Frontend Integration**:
   - Implement UI components for project creation and donation
   - Connect wallet functionality with MiniPay
   - Real-time project status updates based on contract events
   - User profiles for tracking donations and created projects

2. **Contract Enhancements**:
   - Add support for recurring donations
   - Implement milestone-based funding releases
   - Explore donation matching mechanisms
   - Add more granular permission controls

3. **Testing and Auditing**:
   - Complete test coverage for edge cases
   - Security audit by external specialists
   - Performance optimization for gas efficiency
   - Formal verification of critical functions

## Conclusion

The DonationPool contract implementation provides a solid foundation for the SwipePad application. By supporting both All-or-Nothing and Keep-What-You-Raise funding models, it offers flexibility to project creators while maintaining security and transparency for donors. The dispute resolution mechanism adds an additional layer of trust, crucial for a donation platform.

With its modular design and comprehensive testing, the contract is well-positioned for integration with the frontend components and future enhancements to the platform. 


================================================
FILE: docs/milestones/001-project-setup.md
================================================
# Milestone 1: Project Setup

## �� Date: April 2025

### Project Structure
- Established the main repository structure with cleanly separated frontend and contract code
- Created the foundational folders for documentation, tests, and components
- Set up proper code organization for both smart contracts and UI components

### Contract Integration
- Successfully integrated the `swipe-pad` contracts directly in the `contracts/` directory
- Implemented a modular smart contract architecture with well-defined interfaces and libraries
- Set up Foundry for contract development, testing, and deployment

### Frontend Development
- Configured Next.js 14 with TypeScript and Tailwind CSS
- Implemented initial UI components for the donation flow
- Created project card components and basic navigation structure

### Web3 Integration
- Installed and configured `wagmi`, `viem`, and `@wagmi/cli`
- Compiled contracts successfully using `forge build`
- Configured `wagmi.config.ts` for Celo/Alfajores and Foundry artifacts
- Generated typed hooks using `bunx wagmi generate` into `src/lib/wagmi/contracts.ts`
- Set up proper contract interaction patterns for the frontend

### Documentation
- Added comprehensive project documentation including architecture diagrams
- Created milestone tracking system for development progress
- Documented user journeys and donation flows

### Key Dependencies
- Next.js 14 - React framework for the frontend
- Wagmi/Viem - For Web3 interactions
- Foundry - Smart contract development suite
- Tailwind CSS - For UI styling
- Bun - JavaScript runtime and package manager
- TypeScript - For type safety across the codebase


================================================
FILE: docs/milestones/donation-flow.md
================================================
# SwipePad Donation Flow

## User Journeys

### Project Creator Journey

```mermaid
flowchart TD
    A[Creator visits SwipePad] -->|Connects MiniPay wallet| B[Navigates to Create Project]
    B --> C[Fills project details form]
    C --> D{Choose Funding Model}
    D -->|All or Nothing| E[Sets funding goal & deadline]
    D -->|Keep What You Raise| E
    E --> F[Submits project]
    F --> G[Project awaits donations]
    G --> H{Funding Goal Met?}
    H -->|Yes| I[Creator withdraws funds]
    H -->|No & All-or-Nothing| J[Project fails]
    H -->|No & Keep-What-You-Raise| K[Creator withdraws partial funds]
    I --> L[Project completed]
    K --> L
```

### Donor Journey

```mermaid
flowchart TD
    A[User opens SwipePad] -->|Connects MiniPay wallet| B[Browses projects]
    B -->|Swipes through projects| C[Views project details]
    C -->|Decides to support| D[Chooses donation amount]
    D --> E[Confirms transaction]
    E --> F[Donation processed on-chain]
    F --> G[User receives confirmation]
    G --> H{Project Status?}
    H -->|Successful| I[Project proceeds]
    H -->|Failed & All-or-Nothing| J[User can claim refund]
    J --> K[Refund processed]
```

### Admin Dispute Resolution Journey

```mermaid
flowchart TD
    A[Report received] -->|Admin reviews| B{Legitimate Issue?}
    B -->|No| C[No action taken]
    B -->|Yes| D[Project flagged as disputed]
    D --> E[Investigation period]
    E --> F{Resolution Decision}
    F -->|In favor of creator| G[Dispute resolved, project continues]
    F -->|In favor of donors| H[Project marked as failed]
    H --> I[Donors can claim refunds]
```

## Complete Donation Lifecycle

```mermaid
stateDiagram-v2
    [*] --> ProjectCreation
    ProjectCreation --> Active: Project published
    Active --> Successful: Funding goal reached
    Active --> Failed: Deadline reached without\nmeeting goal (All-or-Nothing)
    Active --> PartiallyFunded: Deadline reached with\npartial funding (Keep-What-You-Raise)
    Active --> Disputed: Project flagged
    Disputed --> Successful: Resolved in favor of creator
    Disputed --> Failed: Resolved in favor of donors
    Successful --> Completed: Funds withdrawn
    PartiallyFunded --> Completed: Funds withdrawn
    Failed --> Refunded: All refunds claimed
    Completed --> [*]
    Refunded --> [*]
```

## Important Timeframes

| Event | Timeframe | Notes |
|-------|-----------|-------|
| Minimum funding period | 1 day | Projects must run for at least 24 hours |
| Maximum funding period | 180 days | Projects cannot run longer than 6 months |
| Refund grace period | 14 days | Period after project failure when refunds can be claimed |
| Dispute resolution | 7 days | Default time for admin to resolve disputes |

## Technical Flow

```mermaid
sequenceDiagram
    participant Creator
    participant Donor
    participant SwipePad as SwipePad Frontend
    participant MiniPay
    participant DonationPool as DonationPool Contract
    participant Celo as Celo Blockchain
    
    Creator->>SwipePad: Create project
    SwipePad->>MiniPay: Request connection
    MiniPay->>Creator: Approve connection
    Creator->>SwipePad: Submit project details
    SwipePad->>DonationPool: createProject()
    DonationPool->>Celo: Store project data
    Celo-->>SwipePad: Project created event
    
    Donor->>SwipePad: Browse projects
    SwipePad->>DonationPool: getProjectDetails()
    DonationPool-->>SwipePad: Project information
    Donor->>SwipePad: Select donation amount
    SwipePad->>MiniPay: Request payment
    MiniPay->>Donor: Confirm payment
    Donor->>MiniPay: Approve transaction
    MiniPay->>DonationPool: donate()
    DonationPool->>Celo: Record donation
    Celo-->>SwipePad: Donation event
    SwipePad-->>Donor: Confirmation
    
    Note over DonationPool,Celo: After deadline
    
    Creator->>SwipePad: Request withdrawal
    SwipePad->>DonationPool: withdrawFunds()
    DonationPool->>DonationPool: Validate eligibility
    DonationPool->>Celo: Transfer funds
    Celo-->>Creator: Receive funds
```

## Technical Architecture

```
# SwipePad Technical Architecture

## Overall System Architecture

+-------------------+     +-------------------+     +-------------------+
|                   |     |                   |     |                   |
|  MiniPay Wallet   | <-> |  SwipePad UI      | <-> |  Smart Contracts  |
|                   |     |  (Next.js)        |     |  (Solidity)       |
+-------------------+     +-------------------+     +-------------------+
                                    ^                        ^
                                    |                        |
                                    v                        v
                          +-------------------+     +-------------------+
                          |                   |     |                   |
                          |  Project Data     |     |  Celo Blockchain  |
                          |  (IPFS/Web3)      |     |                   |
                          +-------------------+     +-------------------+

## Data Flow For Donations

+-------------+     +----------------+     +----------------+     +-------------+
|             |     |                |     |                |     |             |
|   Donor     | --> |   Donation     | --> |   DonationPool | --> |   Project   |
|   Wallet    |     |   UI/UX        |     |   Contract     |     |   Creator   |
|             |     |                |     |                |     |             |
+-------------+     +----------------+     +----------------+     +-------------+
      ^                                             |
      |                                             v
      |                                     +----------------+
      +-------------------------------------+   Refund       |
                                            |   (if needed)  |
                                            +----------------+

## Contract Component Interaction

+----------------+     +------------------+     +-------------------+
|                |     |                  |     |                   |
| IDonationPool  | <-- | DonationPool     | --> | Library Modules   |
| Interface      |     | Implementation   |     | - Admin           |
|                |     |                  |     | - Details         |
+----------------+     +------------------+     | - Balance         |
                              ^                 | - Events          |
                              |                 | - Errors          |
                              v                 +-------------------+
                      +------------------+
                      |                  |
                      | External         |
                      | Dependencies     |
                      | - Ownable        |
                      | - AccessControl  |
                      | - Pausable       |
                      +------------------+
``` 


================================================
FILE: docs/milestones/donation-pool.md
================================================
# Donation Pool Implementation

## Overview

The Donation Pool smart contract provides a secure and transparent way for users to create and donate to charitable projects. It's built on Celo and integrated with MiniPay, allowing for micro-donations with various stablecoins.

## Core Features

### Two Funding Models

1. **All or Nothing** (Kickstarter model):
   - Creator only receives funds if the funding goal is met
   - Donors can claim refunds if the goal isn't reached by deadline
   - Best for projects with specific funding thresholds

2. **Keep What You Raise**:
   - Creator receives all donations regardless of goal achievement
   - No refunds available to donors if goal isn't met
   - Best for ongoing projects or when partial funding is useful

### Project Creation

Creators can specify:
- Funding goal
- Timeframe (start and end dates)
- Project details (name, description, URLs for more info and images)
- Funding model (All or Nothing or Keep What You Raise)
- Token for donations (e.g., cUSD, cEUR)

### Donation Flow

1. User discovers a project
2. User decides on donation amount
3. Transaction is completed through MiniPay
4. Donation is recorded on-chain
5. Project funding progress is updated

### Fund Management

- Successful projects: Creator can withdraw funds after goal is reached
- Keep What You Raise: Creator can withdraw collected funds after deadline
- Failed All or Nothing projects: Donors can claim refunds during grace period

### Security Features

- Dispute mechanism for problematic projects
- Admin oversight with ability to pause contract in emergencies
- Timelock periods for withdrawals and refunds
- Platform fees to sustain operations

## Technical Implementation

### Contract Structure

- **IDonationPool**: Interface defining the contract's API
- **DonationPool**: Main contract implementing the donation platform
- **Helper Libraries**: Specialized functions for different aspects of the contract

### Architecture Diagram

```
# DonationPool Smart Contract Architecture

## Core Components

+-------------------+     +-------------------+     +-------------------+
|                   |     |                   |     |                   |
|    DonationPool   |     |  Libraries        |     |   Interfaces      |
|    Contract       |     |                   |     |                   |
+--------+----------+     +--------+----------+     +---------+---------+
         |                         |                          |
         |                         |                          |
         v                         v                          v
+--------------------------------------------------------+
|                                                        |
|                  User Interactions                     |
|                                                        |
+--------------------------------------------------------+

## Data Structures

+------------------+     +------------------+     +------------------+
|                  |     |                  |     |                  |
| PoolAdmin        |     | PoolDetail       |     | PoolBalance      |
| - creator        |     | - startTime      |     | - totalDonations |
| - platformFeeRate|     | - endTime        |     | - feesAccumulated|
| - disputed       |     | - projectName    |     | - feesCollected  |
|                  |     | - fundingGoal    |     | - balance        |
+------------------+     | - fundingModel   |     +------------------+
                         +------------------+      
                                                  +------------------+
                                                  |                  |
                                                  | DonorDetail      |
                                                  | - totalDonated   |
                                                  | - refundClaimed  |
                                                  | - hasRefunded    |
                                                  +------------------+

## State Management

+------------------+     +------------------+
|                  |     |                  |
| POOLSTATUS Enum  |     | FUNDINGMODEL Enum|
| - ACTIVE         |     | - ALL_OR_NOTHING |
| - SUCCESSFUL     |     | - KEEP_WHAT_YOU  |
| - FAILED         |     |   _RAISE         |
| - DELETED        |     |                  |
+------------------+     +------------------+

## User Interactions

+------------------+     +------------------+     +------------------+
|                  |     |                  |     |                  |
| Creator Actions  |     | Donor Actions    |     | Admin Actions    |
| - createProject  |     | - donate         |     | - pauseContract  |
| - updateDetails  |     | - claimRefund    |     | - resolveDispute |
| - withdrawFunds  |     |                  |     | - collectFees    |
| - cancelProject  |     |                  |     |                  |
+------------------+     +------------------+     +------------------+
```

### State Management

Projects can be in one of four states:
- **ACTIVE**: Accepting donations
- **SUCCESSFUL**: Funding goal reached
- **FAILED**: Deadline reached without meeting goal (for All or Nothing)
- **DELETED**: Project cancelled or removed

### Key Functions

| Function | Purpose |
| --- | --- |
| `createProject` | Create a new donation project |
| `donate` | Donate to a project |
| `withdrawFunds` | Creator withdraws collected funds |
| `claimRefund` | Donor claims refund for failed project |
| `getFundingProgress` | Check project's progress toward goal |

## Integration with SwipePad

The DonationPool contract serves as the backend for the SwipePad mobile dApp, enabling:

1. Simple project discovery with swipe interface
2. One-tap donation experience
3. Real-time funding updates
4. Multi-currency support
5. Transparent fund management

## Security Considerations

- All functions protected with appropriate access control
- Critical operations guarded by pausable mechanism
- Timelock periods prevent immediate withdrawals in disputed cases
- Platform fees deducted at donation time for sustainability
- Dispute resolution mechanism handled by admin role

## Future Enhancements

1. Multi-sig admin functions for greater decentralization
2. Milestone-based funding release
3. Donation matching campaigns
4. Integration with on-chain identity and reputation systems
5. Support for recurring donations 


================================================
FILE: e2e/home.test.ts
================================================
import { expect, test } from '@playwright/test'

test('homepage has title and links', async ({ page }) => {
    await page.goto('/')

    // Verify title
    await expect(page).toHaveTitle(/SwipePad/)

    // Basic navigation test
    await expect(page.getByRole('link', { name: 'Home' })).toBeVisible()
})

test('home page shows swipe interface', async ({ page }) => {
    await page.goto('/')

    // Check for main elements
    await expect(page.getByRole('heading', { name: 'SwipePad' })).toBeVisible()
    await expect(page.getByRole('button', { name: 'Connect Wallet' })).toBeVisible()

    // Check for project card
    await expect(page.getByTestId('swipe-card')).toBeVisible()

    // Check for navigation elements
    await expect(page.getByRole('link', { name: 'Home' })).toBeVisible()
    await expect(page.getByRole('link', { name: 'Profile' })).toBeVisible()
})

test('wallet connection flow', async ({ page }) => {
    await page.goto('/')

    // Click connect wallet
    await page.getByRole('button', { name: 'Connect Wallet' }).click()

    // Check for wallet modal
    await expect(page.getByRole('dialog')).toBeVisible()
    await expect(page.getByText('Connect a Wallet')).toBeVisible()
})




================================================
FILE: scripts/bun-postinstall.sh
================================================
#!/bin/bash

# Este script se debe ejecutar después de una instalación con Bun para asegurar
# que todas las dependencias están configuradas correctamente.

echo "🧹 Limpiando instalación previa..."
rm -rf node_modules
rm -f bun.lockb

echo "📦 Instalando dependencias con Bun..."
bun install

echo "✅ Instalación completada!"
echo "👉 Para ejecutar el servidor de desarrollo, usa: bun run dev" 


================================================
FILE: scripts/generate-types.sh
================================================
#!/bin/bash

# This script generates types for smart contract interactions
# using wagmi-cli

echo "🔄 Generating types for smart contracts with wagmi-cli..."
bun wagmi generate

echo "✅ Types generated correctly" 


================================================
FILE: scripts/db/clean-seed.ts
================================================
import 'dotenv/config'
import { sql } from 'drizzle-orm'
import { drizzle } from 'drizzle-orm/node-postgres'
import { Pool } from 'pg'

const connectionString =
    process.env.NODE_ENV === 'production'
        ? process.env.POSTGRES_URL
        : process.env.LOCAL_POSTGRES_URL || process.env.DATABASE_URL

if (!connectionString) {
    throw new Error('Database connection string not found')
}

const pool = new Pool({
    connectionString,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : undefined,
})

const db = drizzle(pool)

async function main() {
    console.log('🌱 Starting clean database seed...')

    try {
        // First truncate all tables to ensure clean state
        await db.execute(sql`TRUNCATE 
            user_achievements, 
            friendships, 
            transactions, 
            campaign_notes, 
            campaign_tags, 
            campaigns, 
            users, 
            achievements, 
            categories, 
            supported_currencies, 
            supported_languages, 
            swipe_amounts
        CASCADE`)

        console.log('✓ Truncated all tables')

        // Seed categories
        await db.execute(sql`
            INSERT INTO categories (name, slug, description, icon, created_at, updated_at)
            VALUES 
                ('Environment', 'environment', 'Environmental sustainability projects', '🌱', NOW(), NOW()),
                ('Community', 'community', 'Community development initiatives', '👥', NOW(), NOW()),
                ('Energy', 'energy', 'Clean energy solutions', '⚡', NOW(), NOW()),
                ('Healthcare', 'healthcare', 'Healthcare accessibility projects', '🏥', NOW(), NOW()),
                ('Education', 'education', 'Educational resources and programs', '📚', NOW(), NOW()),
                ('SocFi', 'socfi', 'Social finance initiatives', '💰', NOW(), NOW()),
                ('Open Source', 'open-source', 'Open source software projects', '💻', NOW(), NOW()),
                ('Animal Rescue', 'animal-rescue', 'Animal welfare and rescue programs', '🐾', NOW(), NOW())
        `)

        console.log('✓ Seeded categories')

        // Seed supported currencies
        await db.execute(sql`
            INSERT INTO supported_currencies (code, name, symbol)
            VALUES 
                ('USD', 'US Dollar', '$'),
                ('EUR', 'Euro', '€'),
                ('GBP', 'British Pound', '£'),
                ('CUS', 'Celo Dollar', 'cUSD'),
                ('CEU', 'Celo Euro', 'cEUR'),
                ('USC', 'USD Coin', 'USDC'),
                ('CNT', 'Cents', '¢')
        `)

        console.log('✓ Seeded supported currencies')

        // Seed supported languages
        await db.execute(sql`
            INSERT INTO supported_languages (code, name, native_name)
            VALUES 
                ('en', 'English', 'English'),
                ('es', 'Spanish', 'Español'),
                ('fr', 'French', 'Français'),
                ('de', 'German', 'Deutsch')
        `)

        console.log('✓ Seeded supported languages')

        // Seed swipe amounts
        await db.execute(sql`
            INSERT INTO swipe_amounts (amount)
            VALUES (1), (10), (50), (100)
        `)

        console.log('✓ Seeded swipe amounts')

        // Seed users (20 users)
        const usersQuery = `
            INSERT INTO users (name, email, wallet_address, avatar_url, points, max_points, donations, streak, reputation, is_current_user, is_public_profile, created_at, updated_at)
            VALUES ${Array.from(
                { length: 20 },
                (_, i) => `(
                'User ${i + 1}', 
                'user${i + 1}@example.com', 
                '0x${i.toString(16).padStart(40, '0')}', 
                'https://api.dicebear.com/7.x/avataaars/svg?seed=${i}',
                ${Math.floor(Math.random() * 1000)},
                1000,
                ${(Math.random() * 100).toFixed(2)},
                ${Math.floor(Math.random() * 30)},
                ${Math.floor(Math.random() * 1000)},
                ${i === 0 ? 'true' : 'false'},
                ${Math.random() > 0.2 ? 'true' : 'false'},
                NOW(),
                NOW()
            )`,
            ).join(',')}
        `
        await db.execute(sql.raw(usersQuery))

        console.log('✓ Seeded users')

        // Seed achievements
        await db.execute(sql`
            INSERT INTO achievements (title, description, icon, created_at, updated_at)
            VALUES 
                ('First Donation', 'Made your first micro-donation', '🎉', NOW(), NOW()),
                ('Streak Master', 'Donated for 7 days in a row', '🔥', NOW(), NOW()),
                ('Big Spender', 'Donated a total of $10', '💰', NOW(), NOW()),
                ('Global Impact', 'Donated to campaigns in 5 different categories', '🌍', NOW(), NOW()),
                ('Leaderboard Champion', 'Reached the top 3 on the leaderboard', '🏆', NOW(), NOW()),
                ('Community Guardian', 'Submit 10 verified tags on campaigns', '🛡️', NOW(), NOW()),
                ('Trusted Tagger', 'Have 50 of your tags confirmed by others', '✅', NOW(), NOW())
        `)

        console.log('✓ Seeded achievements')

        // Seed campaigns (15 campaigns)
        const campaignsQuery = `
            INSERT INTO campaigns (title, category, description, image_url, funding_goal, current_funding, website_url, sponsor_boosted, creator_id, created_at, updated_at)
            VALUES ${Array.from({ length: 15 }, (_, i) => {
                const categories = [
                    'Environment',
                    'Community',
                    'Energy',
                    'Healthcare',
                    'Education',
                    'SocFi',
                    'Open Source',
                    'Animal Rescue',
                ]
                const category = categories[Math.floor(Math.random() * categories.length)]
                const fundingGoal = (Math.random() * 9000 + 1000).toFixed(2)
                const currentFunding = (Math.random() * 1000).toFixed(2)
                // Make sure creator_id is between 1 and 20
                const creatorId = (i % 20) + 1

                return `(
                    'Campaign ${i + 1}',
                    '${category}',
                    'This is a description for campaign ${i + 1}. It aims to make a difference in the ${category} sector.',
                    'https://picsum.photos/seed/${i}/800/400',
                    ${fundingGoal},
                    ${currentFunding},
                    'https://example${i}.com',
                    ${Math.random() > 0.7 ? 'true' : 'false'},
                    ${creatorId},
                    NOW(),
                    NOW()
                )`
            }).join(',')}
        `
        await db.execute(sql.raw(campaignsQuery))

        console.log('✓ Seeded campaigns')

        // Seed campaign tags
        const campaignTagsQuery = `
            INSERT INTO campaign_tags (campaign_id, text, color, count)
            VALUES ${[...Array(15)]
                .flatMap((_, campaignId) => {
                    const tags = [
                        ['✅ Verified', 'green'],
                        ['👍 Recommended', 'blue'],
                        ['🔍 Needs Review', 'orange'],
                        ['⚠️ Warning', 'yellow'],
                        ['🚫 Spam', 'red'],
                    ]

                    // Randomly select 1-3 tags for each campaign
                    const numTags = Math.floor(Math.random() * 3) + 1
                    const selectedTags = tags.sort(() => 0.5 - Math.random()).slice(0, numTags)

                    return selectedTags.map(
                        ([text, color]) => `(
                    ${campaignId + 1},
                    '${text}',
                    '${color}',
                    ${Math.floor(Math.random() * 100)}
                )`,
                    )
                })
                .join(',')}
        `
        await db.execute(sql.raw(campaignTagsQuery))

        console.log('✓ Seeded campaign tags')

        // Seed campaign notes
        const campaignNotesQuery = `
            INSERT INTO campaign_notes (campaign_id, author_id, text, upvotes, created_at)
            VALUES ${[...Array(30)]
                .map((_, i) => {
                    const campaignId = Math.floor(Math.random() * 15) + 1
                    const authorId = Math.floor(Math.random() * 20) + 1

                    return `(
                    ${campaignId},
                    ${authorId},
                    'This is note ${i + 1} about campaign ${campaignId}. It contains some feedback or information.',
                    ${Math.floor(Math.random() * 50)},
                    NOW()
                )`
                })
                .join(',')}
        `
        await db.execute(sql.raw(campaignNotesQuery))

        console.log('✓ Seeded campaign notes')

        // Seed user achievements
        const userAchievementsQuery = `
            INSERT INTO user_achievements (user_id, achievement_id, unlocked_at)
            VALUES ${[...Array(40)]
                .map(() => {
                    const userId = Math.floor(Math.random() * 20) + 1
                    const achievementId = Math.floor(Math.random() * 7) + 1

                    // Random date between 2023-01-01 and 2024-03-01
                    const start = new Date('2023-01-01').getTime()
                    const end = new Date('2024-03-01').getTime()
                    const randomDate = new Date(start + Math.random() * (end - start))
                    const dateString = randomDate.toISOString().split('T')[0]

                    return `(
                    ${userId},
                    ${achievementId},
                    '${dateString}'
                )`
                })
                .join(',')}
        `
        await db.execute(sql.raw(userAchievementsQuery))

        console.log('✓ Seeded user achievements')

        // Seed friendships
        const friendshipsQuery = `
            INSERT INTO friendships (follower_id, following_id, created_at)
            VALUES ${[...Array(30)]
                .map(() => {
                    let followerId, followingId
                    do {
                        followerId = Math.floor(Math.random() * 20) + 1
                        followingId = Math.floor(Math.random() * 20) + 1
                    } while (followerId === followingId)

                    return `(
                    ${followerId},
                    ${followingId},
                    NOW()
                )`
                })
                .join(',')}
        `
        await db.execute(sql.raw(friendshipsQuery))

        console.log('✓ Seeded friendships')

        // Seed transactions
        const transactionsQuery = `
            INSERT INTO transactions (sender_id, recipient_id, amount, currency, status, type, created_at, updated_at)
            VALUES ${[...Array(50)]
                .map(() => {
                    let senderId, recipientId
                    do {
                        senderId = Math.floor(Math.random() * 20) + 1
                        recipientId = Math.floor(Math.random() * 20) + 1
                    } while (senderId === recipientId)

                    const amount = (Math.random() * 99 + 1).toFixed(2)
                    const currencies = ['USD', 'EUR', 'GBP', 'CUS', 'CEU', 'USC', 'CNT']
                    const currency = currencies[Math.floor(Math.random() * currencies.length)]
                    const statuses = ['pending', 'completed', 'failed']
                    const status = statuses[Math.floor(Math.random() * statuses.length)]
                    const types = ['donation', 'withdrawal', 'refund']
                    const type = types[Math.floor(Math.random() * types.length)]

                    return `(
                    ${senderId},
                    ${recipientId},
                    ${amount},
                    '${currency}',
                    '${status}',
                    '${type}',
                    NOW(),
                    NOW()
                )`
                })
                .join(',')}
        `
        await db.execute(sql.raw(transactionsQuery))

        console.log('✓ Seeded transactions')

        console.log('✅ Database seeded successfully!')
    } catch (error) {
        console.error('❌ Seeding failed:', error)
        throw error
    } finally {
        await pool.end()
    }
}

main().catch(err => {
    console.error('❌ Seed script failed:', err)
    process.exit(1)
})



================================================
FILE: scripts/db/clear-tables.ts
================================================
import 'dotenv/config'
import { drizzle } from 'drizzle-orm/node-postgres'
import { Pool } from 'pg'
import {
    achievements,
    campaignNotes,
    campaigns,
    campaignTags,
    categories,
    friendships,
    supportedCurrencies,
    supportedLanguages,
    swipeAmounts,
    transactions,
    userAchievements,
    users,
} from '../../db/schema'

const connectionString =
    process.env.NODE_ENV === 'production'
        ? process.env.POSTGRES_URL
        : process.env.LOCAL_POSTGRES_URL || process.env.DATABASE_URL

if (!connectionString) {
    throw new Error('Database connection string not found')
}

const pool = new Pool({
    connectionString,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : undefined,
})

const db = drizzle(pool)

async function main() {
    console.log('🧹 Clearing all tables...')

    try {
        // Delete in reverse order of dependencies
        await db.delete(userAchievements)
        await db.delete(friendships)
        await db.delete(transactions)
        await db.delete(campaignNotes)
        await db.delete(campaignTags)
        await db.delete(campaigns)
        await db.delete(users)
        await db.delete(achievements)
        await db.delete(categories)
        await db.delete(supportedCurrencies)
        await db.delete(supportedLanguages)
        await db.delete(swipeAmounts)

        console.log('✅ All tables cleared successfully!')
    } catch (error) {
        console.error('❌ Clearing tables failed:', error)
        throw error
    } finally {
        await pool.end()
    }
}

main().catch(err => {
    console.error('❌ Clear tables script failed:', err)
    process.exit(1)
})



================================================
FILE: scripts/db/migrate.ts
================================================
import 'dotenv/config'
import { drizzle } from 'drizzle-orm/node-postgres'
import { migrate } from 'drizzle-orm/node-postgres/migrator'
import { Pool } from 'pg'

async function main() {
    console.log('🚀 Starting database migration...')

    const connectionString =
        process.env.NODE_ENV === 'production'
            ? process.env.POSTGRES_URL
            : process.env.LOCAL_POSTGRES_URL || process.env.DATABASE_URL

    if (!connectionString) {
        throw new Error('Database connection string not found')
    }

    const pool = new Pool({
        connectionString,
        ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : undefined,
    })

    const db = drizzle(pool)

    try {
        await migrate(db, { migrationsFolder: './db/migrations' })
        console.log('✅ Migration completed successfully!')
    } catch (error) {
        console.error('❌ Migration failed:', error)
        throw error
    } finally {
        await pool.end()
    }
}

main().catch(err => {
    console.error('❌ Migration script failed:', err)
    process.exit(1)
})



================================================
FILE: scripts/db/minimal-seed.ts
================================================
import 'dotenv/config'
import { sql } from 'drizzle-orm'
import { drizzle } from 'drizzle-orm/node-postgres'
import { Pool } from 'pg'

const connectionString =
    process.env.NODE_ENV === 'production'
        ? process.env.POSTGRES_URL
        : process.env.LOCAL_POSTGRES_URL || process.env.DATABASE_URL

if (!connectionString) {
    throw new Error('Database connection string not found')
}

const pool = new Pool({
    connectionString,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : undefined,
})

const db = drizzle(pool)

async function main() {
    console.log('🌱 Starting minimal database seed...')

    try {
        // First truncate all tables to ensure clean state
        await db.execute(sql`TRUNCATE 
            user_achievements, 
            friendships, 
            transactions, 
            campaign_notes, 
            campaign_tags, 
            campaigns, 
            users, 
            achievements, 
            categories, 
            supported_currencies, 
            supported_languages, 
            swipe_amounts
        CASCADE`)

        console.log('✓ Truncated all tables')

        // Seed categories
        await db.execute(sql`
            INSERT INTO categories (name, slug, description, icon, created_at, updated_at)
            VALUES 
                ('Environment', 'environment', 'Environmental sustainability projects', '🌱', NOW(), NOW()),
                ('Community', 'community', 'Community development initiatives', '👥', NOW(), NOW())
        `)

        console.log('✓ Seeded categories')

        // Seed supported currencies
        await db.execute(sql`
            INSERT INTO supported_currencies (code, name, symbol)
            VALUES 
                ('USD', 'US Dollar', '$'),
                ('EUR', 'Euro', '€')
        `)

        console.log('✓ Seeded supported currencies')

        // Seed supported languages
        await db.execute(sql`
            INSERT INTO supported_languages (code, name, native_name)
            VALUES 
                ('en', 'English', 'English'),
                ('es', 'Spanish', 'Español')
        `)

        console.log('✓ Seeded supported languages')

        // Seed swipe amounts
        await db.execute(sql`
            INSERT INTO swipe_amounts (amount)
            VALUES (10), (100)
        `)

        console.log('✓ Seeded swipe amounts')

        // Seed users (2 users)
        await db.execute(sql`
            INSERT INTO users (id, name, email, wallet_address, avatar_url, points, max_points, donations, streak, reputation, is_current_user, is_public_profile, created_at, updated_at)
            VALUES 
                (1, 'User 1', 'user1@example.com', '0x123', 'https://api.dicebear.com/7.x/avataaars/svg?seed=1', 100, 1000, 10.5, 5, 100, true, true, NOW(), NOW()),
                (2, 'User 2', 'user2@example.com', '0x456', 'https://api.dicebear.com/7.x/avataaars/svg?seed=2', 200, 1000, 20.5, 10, 200, false, true, NOW(), NOW())
        `)

        console.log('✓ Seeded users')

        // Seed achievements
        await db.execute(sql`
            INSERT INTO achievements (title, description, icon, created_at, updated_at)
            VALUES 
                ('First Donation', 'Made your first micro-donation', '🎉', NOW(), NOW()),
                ('Streak Master', 'Donated for 7 days in a row', '🔥', NOW(), NOW())
        `)

        console.log('✓ Seeded achievements')

        // Seed campaigns (2 campaigns)
        await db.execute(sql`
            INSERT INTO campaigns (title, category, description, image_url, funding_goal, current_funding, website_url, sponsor_boosted, creator_id, created_at, updated_at)
            VALUES 
                ('Campaign 1', 'Environment', 'This is a description for campaign 1', 'https://picsum.photos/seed/1/800/400', 1000, 100, 'https://example1.com', false, 1, NOW(), NOW()),
                ('Campaign 2', 'Community', 'This is a description for campaign 2', 'https://picsum.photos/seed/2/800/400', 2000, 200, 'https://example2.com', true, 2, NOW(), NOW())
        `)

        console.log('✓ Seeded campaigns')

        // Seed campaign tags
        await db.execute(sql`
            INSERT INTO campaign_tags (campaign_id, text, color, count)
            VALUES 
                (1, '✅ Verified', 'green', 10),
                (2, '👍 Recommended', 'blue', 20)
        `)

        console.log('✓ Seeded campaign tags')

        // Seed campaign notes
        await db.execute(sql`
            INSERT INTO campaign_notes (campaign_id, author_id, text, upvotes, created_at)
            VALUES 
                (1, 2, 'This is a note about campaign 1', 5, NOW()),
                (2, 1, 'This is a note about campaign 2', 10, NOW())
        `)

        console.log('✓ Seeded campaign notes')

        // Seed user achievements
        await db.execute(sql`
            INSERT INTO user_achievements (user_id, achievement_id, unlocked_at)
            VALUES 
                (1, 1, '2023-01-01'),
                (2, 2, '2023-02-01')
        `)

        console.log('✓ Seeded user achievements')

        // Seed friendships
        await db.execute(sql`
            INSERT INTO friendships (follower_id, following_id, created_at)
            VALUES 
                (1, 2, NOW()),
                (2, 1, NOW())
        `)

        console.log('✓ Seeded friendships')

        // Seed transactions
        await db.execute(sql`
            INSERT INTO transactions (sender_id, recipient_id, amount, currency, status, type, created_at, updated_at)
            VALUES 
                (1, 2, 10.5, 'USD', 'completed', 'donation', NOW(), NOW()),
                (2, 1, 20.5, 'EUR', 'completed', 'donation', NOW(), NOW())
        `)

        console.log('✓ Seeded transactions')

        console.log('✅ Database seeded successfully!')
    } catch (error) {
        console.error('❌ Seeding failed:', error)
        throw error
    } finally {
        await pool.end()
    }
}

main().catch(err => {
    console.error('❌ Seed script failed:', err)
    process.exit(1)
})



================================================
FILE: scripts/db/seed.ts
================================================
import 'dotenv/config'
import { drizzle } from 'drizzle-orm/node-postgres'
import { seed } from 'drizzle-seed'
import { Pool } from 'pg'
import {
    achievements,
    campaignNotes,
    campaigns,
    campaignTags,
    categories,
    friendships,
    supportedCurrencies,
    supportedLanguages,
    swipeAmounts,
    transactions,
    userAchievements,
    users,
} from '../../db/schema'

const connectionString =
    process.env.NODE_ENV === 'production'
        ? process.env.POSTGRES_URL
        : process.env.LOCAL_POSTGRES_URL || process.env.DATABASE_URL

if (!connectionString) {
    throw new Error('Database connection string not found')
}

const pool = new Pool({
    connectionString,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : undefined,
})

const db = drizzle(pool)

async function main() {
    console.log('🌱 Starting database seed...')

    try {
        await seed(db, {
            categories,
            users,
            achievements,
            campaigns,
            campaignNotes,
            campaignTags,
            userAchievements,
            supportedCurrencies,
            supportedLanguages,
            swipeAmounts,
            friendships,
            transactions,
        }).refine(f => ({
            // Categories
            categories: {
                count: 8,
                columns: {
                    name: f.valuesFromArray({
                        values: [
                            'Environment',
                            'Community',
                            'Energy',
                            'Healthcare',
                            'Education',
                            'SocFi',
                            'Open Source',
                            'Animal Rescue',
                        ],
                    }),
                    slug: f.valuesFromArray({
                        values: [
                            'environment',
                            'community',
                            'energy',
                            'healthcare',
                            'education',
                            'socfi',
                            'open-source',
                            'animal-rescue',
                        ],
                    }),
                    description: f.valuesFromArray({
                        values: [
                            'Environmental sustainability projects',
                            'Community development initiatives',
                            'Clean energy solutions',
                            'Healthcare accessibility projects',
                            'Educational resources and programs',
                            'Social finance initiatives',
                            'Open source software projects',
                            'Animal welfare and rescue programs',
                        ],
                    }),
                    icon: f.valuesFromArray({
                        values: ['🌱', '👥', '⚡', '🏥', '📚', '💰', '💻', '🐾'],
                    }),
                },
            },
            // Users
            users: {
                count: 20,
                columns: {
                    name: f.fullName(),
                    email: f.email(),
                    walletAddress: f.string(),
                    avatarUrl: f.valuesFromArray({
                        values: Array.from(
                            { length: 20 },
                            (_, i) => `https://api.dicebear.com/7.x/avataaars/svg?seed=${i}`,
                        ),
                    }),
                    points: f.int({ minValue: 0, maxValue: 1000 }),
                    maxPoints: f.default({ defaultValue: 1000 }),
                    donations: f.number({ minValue: 0, maxValue: 100, precision: 2 }),
                    streak: f.int({ minValue: 0, maxValue: 30 }),
                    reputation: f.int({ minValue: 0, maxValue: 1000 }),
                    isCurrentUser: f.valuesFromArray({ values: [true, false], isUnique: false }),
                    isPublicProfile: f.valuesFromArray({ values: [true, false], isUnique: false }),
                },
            },
            // Achievements
            achievements: {
                count: 7,
                columns: {
                    title: f.valuesFromArray({
                        values: [
                            'First Donation',
                            'Streak Master',
                            'Big Spender',
                            'Global Impact',
                            'Leaderboard Champion',
                            'Community Guardian',
                            'Trusted Tagger',
                        ],
                    }),
                    description: f.valuesFromArray({
                        values: [
                            'Made your first micro-donation',
                            'Donated for 7 days in a row',
                            'Donated a total of $10',
                            'Donated to campaigns in 5 different categories',
                            'Reached the top 3 on the leaderboard',
                            'Submit 10 verified tags on campaigns',
                            'Have 50 of your tags confirmed by others',
                        ],
                    }),
                    icon: f.valuesFromArray({
                        values: ['🎉', '🔥', '💰', '🌍', '🏆', '🛡️', '✅'],
                    }),
                },
            },
            // Campaigns
            campaigns: {
                count: 15,
                columns: {
                    title: f.loremIpsum({ sentencesCount: 1 }),
                    description: f.loremIpsum({ sentencesCount: 3 }),
                    imageUrl: f.valuesFromArray({
                        values: Array.from({ length: 15 }, (_, i) => `https://picsum.photos/seed/${i}/800/400`),
                    }),
                    fundingGoal: f.number({ minValue: 1000, maxValue: 10000, precision: 2 }),
                    currentFunding: f.number({ minValue: 0, maxValue: 1000, precision: 2 }),
                    websiteUrl: f.valuesFromArray({
                        values: Array.from({ length: 15 }, (_, i) => `https://example${i}.com`),
                    }),
                    sponsorBoosted: f.valuesFromArray({ values: [true, false], isUnique: false }),
                    creatorId: f.int({ minValue: 1, maxValue: 20 }),
                    categoryName: f.valuesFromArray({
                        values: [
                            'Environment',
                            'Community',
                            'Energy',
                            'Healthcare',
                            'Education',
                            'SocFi',
                            'Open Source',
                            'Animal Rescue',
                        ],
                    }),
                },
            },
            // Campaign Tags
            campaignTags: {
                count: 5,
                columns: {
                    text: f.valuesFromArray({
                        values: ['✅ Verified', '👍 Recommended', '🔍 Needs Review', '⚠️ Warning', '🚫 Spam'],
                    }),
                    color: f.valuesFromArray({
                        values: ['green', 'blue', 'orange', 'yellow', 'red'],
                    }),
                    count: f.int({ minValue: 0, maxValue: 100 }),
                },
            },
            // Campaign Notes
            campaignNotes: {
                count: 30,
                columns: {
                    text: f.loremIpsum({ sentencesCount: 2 }),
                    upvotes: f.int({ minValue: 0, maxValue: 50 }),
                    authorId: f.int({ minValue: 1, maxValue: 20 }),
                },
            },
            // User Achievements
            userAchievements: {
                count: 40,
                columns: {
                    unlockedAt: f.date({ minDate: '2023-01-01', maxDate: '2024-03-01' }),
                },
            },
            // Supported Currencies
            supportedCurrencies: {
                count: 7,
                columns: {
                    code: f.valuesFromArray({
                        values: ['USD', 'EUR', 'GBP', 'CUS', 'CEU', 'USC', 'CNT'],
                    }),
                    name: f.valuesFromArray({
                        values: ['US Dollar', 'Euro', 'British Pound', 'Celo Dollar', 'Celo Euro', 'USD Coin', 'Cents'],
                    }),
                    symbol: f.valuesFromArray({
                        values: ['$', '€', '£', 'cUSD', 'cEUR', 'USDC', '¢'],
                    }),
                },
            },
            // Supported Languages
            supportedLanguages: {
                count: 4,
                columns: {
                    code: f.valuesFromArray({
                        values: ['en', 'es', 'fr', 'de'],
                    }),
                    name: f.valuesFromArray({
                        values: ['English', 'Spanish', 'French', 'German'],
                    }),
                    nativeName: f.valuesFromArray({
                        values: ['English', 'Español', 'Français', 'Deutsch'],
                    }),
                },
            },
            // Swipe Amounts
            swipeAmounts: {
                count: 4,
                columns: {
                    amount: f.valuesFromArray({
                        values: [1, 10, 50, 100], // Values in cents
                    }),
                },
            },
            // Friendships (following relationships)
            friendships: {
                count: 30, // We'll create 30 random following relationships
                columns: {
                    followerId: f.int({ minValue: 1, maxValue: 20 }),
                    followingId: f.int({ minValue: 1, maxValue: 20 }),
                },
            },
            // Transactions
            transactions: {
                count: 50,
                columns: {
                    amount: f.number({ minValue: 1, maxValue: 100, precision: 2 }),
                    currency: f.valuesFromArray({
                        values: ['USD', 'EUR', 'GBP', 'CUS', 'CEU', 'USC', 'CNT'],
                    }),
                    status: f.valuesFromArray({
                        values: ['pending', 'completed', 'failed'],
                    }),
                    type: f.valuesFromArray({
                        values: ['donation', 'withdrawal', 'refund'],
                    }),
                    senderId: f.int({ minValue: 1, maxValue: 20 }),
                    recipientId: f.int({ minValue: 1, maxValue: 20 }),
                },
            },
        }))

        console.log('✅ Database seeded successfully!')
    } catch (error) {
        console.error('❌ Seeding failed:', error)
        throw error
    } finally {
        await pool.end()
    }
}

main().catch(err => {
    console.error('❌ Seed script failed:', err)
    process.exit(1)
})



================================================
FILE: src/app/layout.tsx
================================================
import '@/styles/globals.css'

import AppLayout from '@/components/layout/app-layout'
import { Providers } from '@/components/providers'
import { inter } from '@/lib/config/fonts'
import { cn } from '@/lib/styles/tailwind'

export { metadata, viewport } from '@/lib/config/metadata'

export default function RootLayout({ children }: { children: React.ReactNode }) {
    return (
        <html lang='en' suppressHydrationWarning>
            <body className={cn(inter.className, 'flex h-dvh flex-col')}>
                <Providers>
                    <AppLayout>{children}</AppLayout>
                </Providers>
            </body>
        </html>
    )
}



================================================
FILE: src/app/page.tsx
================================================
'use client'

import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
import { useOnboardingCheck } from '@/hooks/use-onboarding'

export default function RootPage() {
    const router = useRouter()
    const { isOnboarded, hydrated } = useOnboardingCheck()

    useEffect(() => {
        if (!hydrated) return

        if (isOnboarded) {
            router.push('/swipe')
        } else {
            router.push('/onboarding')
        }
    }, [router, isOnboarded, hydrated])

    if (!hydrated) {
        return null
    }
}



================================================
FILE: src/app/(onboarding)/layout.tsx
================================================
import { Shell, Content } from '@/components/shell'

export default function OnboardingLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <Shell>
      <Content isOnboarding>
        {children}
      </Content>
    </Shell>
  )
} 


================================================
FILE: src/app/api/trpc/[trpc]/route.ts
================================================
import { appRouter } from '@/server/routers/_app'
import { fetchRequestHandler } from '@trpc/server/adapters/fetch'

const createContext = async () => {
    return {}
}

const handler = (req: Request) =>
    fetchRequestHandler({
        endpoint: '/api/trpc',
        req,
        router: appRouter,
        createContext,
    })

export { handler as GET, handler as POST }



================================================
FILE: src/app/create/page.tsx
================================================
"use client"

import { CreateDonationProject } from "@/components/create-donation"

export default function CreatePage() {
  return (
    <main className="container py-10">
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">Create a Donation Project</h1>
        <p className="text-gray-500">
          Start fundraising for your project on the Celo blockchain
        </p>
      </div>
      <CreateDonationProject />
    </main>
  )
}



================================================
FILE: src/app/home/page.tsx
================================================
"use client"

import { useState } from 'react'
import { AnimatePresence } from 'framer-motion'
import type { TabItem } from '@/components/ui/floating-tab-switcher'
import { AnimatedView } from '@/components/ui/animated-view'
import { ProjectHeader } from '@/components/project-header'
import { ProjectListView } from '@/components/project-list-view'
import { ProjectSwipeView } from '@/components/project-swipe-view'
import { useProjects } from '@/hooks/use-projects'

const TABS: TabItem[] = [
  { id: 'swipe', label: 'Swipe' },
  { id: 'list', label: 'List' }
]

type ViewType = 'swipe' | 'list'

export default function HomePage() {
  const [activeTab, setActiveTab] = useState<ViewType>("swipe")
  const {
    selectedCategory,
    setSelectedCategory,
    userStats,
    filteredProjects,
    handlers
  } = useProjects()

  const handleTabChange = (tabId: string) => {
    setActiveTab(tabId as ViewType)
  }

  return (
      <div 
        className="flex-1 min-h-full relative overflow-hidden pt-32 px-4"
      >
        <div className="flex flex-col relative">
              <ProjectHeader
        tabs={TABS}
        activeTab={activeTab}
        selectedCategory={selectedCategory}
        onTabChange={handleTabChange}
        onCategoryChange={setSelectedCategory}
        />
        <AnimatePresence mode="wait">
          <AnimatedView key={activeTab} className="h-full">
            {activeTab === "swipe" ? (
              <ProjectSwipeView
              projects={filteredProjects}
              userStats={userStats}
              topUserThreshold={50}
                onDonate={handlers.handleDonate}
                onSuperLike={handlers.handleSuperLike}
                onBoost={handlers.handleBoost}
                onShowDetails={handlers.handleShowDetails}
                onAddNote={handlers.handleAddNote}
                onVoteNote={handlers.handleVoteNote}
                onFlagNote={handlers.handleFlagNote}
              />
            ) : (
              <ProjectListView
                projects={filteredProjects}
                onShowDetails={handlers.handleShowDetails}
              />
            )}
          </AnimatedView>
        </AnimatePresence>
            </div>
      </div>
  )
}



================================================
FILE: src/app/my-donations/page.tsx
================================================
'use client'

import { useDonationPool } from '@/hooks/use-donation-pool'
import { useWallet } from '@/hooks/use-wallet'
import Link from 'next/link'
import { useEffect, useState } from 'react'

// Interface for donation objects
interface Donation {
    id: string
    title: string
    amount: string
    date: string
}

export default function MyDonationsPage() {
    const [mounted, setMounted] = useState(false)
    const { isConnected, address } = useWallet()
    const { useCampaignsDonatedTo } = useDonationPool()

    // State for donations
    const [loading, setLoading] = useState(true)
    const [donations, setDonations] = useState<Donation[]>([])

    // Ensure the component is mounted (client)
    useEffect(() => {
        setMounted(true)
    }, [])

    // Get projects the user has donated to
    const {
        data: projectIds,
        isLoading: isLoadingProjects,
        isError: isErrorProjects,
    } = useCampaignsDonatedTo(isConnected ? (address as `0x${string}`) : undefined)

    // Load details of the projects
    useEffect(() => {
        const fetchDonationDetails = async () => {
            if (!mounted) return

            if (!projectIds || projectIds.length === 0) {
                setLoading(false)
                return
            }

            // TODO: Implement the real loading of the projects when we have blockchain connection
            const mockDonations: Donation[] = [
                { id: '1', title: 'Clean Water Initiative', amount: '0.5', date: '2023-08-15' },
                { id: '2', title: 'Education for All', amount: '1.2', date: '2023-09-01' },
            ]

            setDonations(mockDonations)
            setLoading(false)
        }

        if (!isLoadingProjects && mounted) {
            fetchDonationDetails()
        }
    }, [projectIds, isLoadingProjects, mounted])

    // During SSR or when not mounted, show a loading state
    if (!mounted) {
        return (
            <div className='container mx-auto py-10'>
                <div className='animate-pulse rounded-lg bg-white p-8 shadow-md'>
                    <div className='mb-6 h-8 w-1/3 rounded bg-gray-200'></div>
                    <div className='mb-4 h-4 w-full rounded bg-gray-200'></div>
                    <div className='mb-4 h-4 w-full rounded bg-gray-200'></div>
                    <div className='h-4 w-3/4 rounded bg-gray-200'></div>
                </div>
            </div>
        )
    }

    // If not connected, show message to connect the wallet
    if (!isConnected) {
        return (
            <div className='container mx-auto py-10'>
                <div className='rounded-lg bg-white p-8 text-center shadow-md'>
                    <h1 className='mb-4 text-2xl font-bold'>My Donations</h1>
                    <p className='mb-4'>Please connect your wallet to see your donations.</p>
                    <Link href='/' className='text-blue-500 hover:underline'>
                        Return to Home
                    </Link>
                </div>
            </div>
        )
    }

    return (
        <div className='container mx-auto py-10'>
            <h1 className='mb-8 text-2xl font-bold'>My Donations</h1>

            {loading || isLoadingProjects ? (
                <div className='rounded-lg bg-white p-6 shadow-md'>
                    <div className='animate-pulse space-y-4'>
                        {[1, 2, 3].map(id => (
                            <div key={id} className='flex justify-between border-b pb-4'>
                                <div>
                                    <div className='mb-2 h-5 w-32 rounded bg-gray-200'></div>
                                    <div className='h-4 w-24 rounded bg-gray-200'></div>
                                </div>
                                <div>
                                    <div className='h-5 w-20 rounded bg-gray-200'></div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            ) : isErrorProjects ? (
                <div className='rounded-lg bg-white p-6 text-center shadow-md'>
                    <p className='text-red-500'>Error loading your donations. Please try again later.</p>
                </div>
            ) : donations.length === 0 ? (
                <div className='rounded-lg bg-white p-6 text-center shadow-md'>
                    <p className='mb-4'>You haven&apos;t made any donations yet.</p>
                    <Link href='/' className='text-blue-500 hover:underline'>
                        Browse Projects
                    </Link>
                </div>
            ) : (
                <div className='rounded-lg bg-white p-6 shadow-md'>
                    {donations.map(donation => (
                        <div key={donation.id} className='flex justify-between border-b py-4 last:border-0'>
                            <div>
                                <h3 className='font-medium'>{donation.title}</h3>
                                <p className='text-sm text-gray-500'>{donation.date}</p>
                            </div>
                            <div>
                                <span className='font-medium'>{donation.amount} CELO</span>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    )
}



================================================
FILE: src/app/my-projects/page.tsx
================================================
'use client'

import { CampaignList } from '@/components/campaign-list'
import { useWallet } from '@/hooks/use-wallet'
import Link from 'next/link'
import { useEffect, useState } from 'react'

export default function MycampaignsPage() {
    const [mounted, setMounted] = useState(false)
    const { isConnected } = useWallet()

    // Ensure the component is mounted (client)
    useEffect(() => {
        setMounted(true)
    }, [])

    // During SSR or when not mounted, show a loading state
    if (!mounted) {
        return (
            <div className='container mx-auto py-10'>
                <div className='animate-pulse rounded-lg bg-white p-8 shadow-md'>
                    <div className='mb-6 h-8 w-1/3 rounded bg-gray-200'></div>
                    <div className='mb-4 h-4 w-full rounded bg-gray-200'></div>
                    <div className='mb-4 h-4 w-full rounded bg-gray-200'></div>
                    <div className='h-4 w-3/4 rounded bg-gray-200'></div>
                </div>
            </div>
        )
    }

    // If not connected, show message to connect the wallet
    if (!isConnected) {
        return (
            <div className='container mx-auto py-10'>
                <div className='rounded-lg bg-white p-8 text-center shadow-md'>
                    <h1 className='mb-4 text-2xl font-bold'>My Campaigns</h1>
                    <p className='mb-4'>Please connect your wallet to see your campaigns.</p>
                    <Link href='/' className='text-blue-500 hover:underline'>
                        Return to Home
                    </Link>
                </div>
            </div>
        )
    }

    return (
        <div className='container mx-auto py-10'>
            <div className='mb-8 flex items-center justify-between'>
                <h1 className='text-2xl font-bold'>My Campaigns</h1>
                <Link
                    href='/create'
                    className='rounded-md bg-blue-500 px-4 py-2 text-white transition-colors hover:bg-blue-600'>
                    Create New Campaign
                </Link>
            </div>

            <CampaignList />
        </div>
    )
}



================================================
FILE: src/app/onboarding/layout.tsx
================================================
"use client"

export default function OnboardingLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="fixed inset-0 z-50 min-h-screen w-full bg-white overflow-hidden">
      {children}
    </div>
  )
} 


================================================
FILE: src/app/onboarding/page.tsx
================================================
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { motion, AnimatePresence, useMotionValue, useTransform, useAnimation } from 'framer-motion'
import { useAppStore } from '@/store/use-app-store'
import { X, Heart, ArrowRight, Check } from 'lucide-react'
import { cn } from '@/lib/styles/tailwind'

// Onboarding steps definition
interface Step {
    id: string
    title: string
    subtitle: string
    description: string
    illustration: 'cards' | 'swipe' | 'complete'
}

const steps: Step[] = [
    {
        id: 'welcome',
        title: 'Welcome to SwipePad',
        subtitle: 'Micro-donations, macro impact',
        description: 'The easiest way to donate to causes you care about with a simple gesture.',
        illustration: 'cards',
    },
    {
        id: 'swipe',
        title: 'Swipe to Donate',
        subtitle: 'Swipe to choose',
        description:
            'Swipe left to skip or right to donate. Every swipe right sends your donation to a cause making a difference.',
        illustration: 'swipe',
    },
    {
        id: 'complete',
        title: "You're All Set!",
        subtitle: "Let's begin",
        description: 'Your SwipePad journey starts now. Explore projects, make donations, and make a difference!',
        illustration: 'complete',
    },
]

// Shared variants for consistent animations
const slideVariants = {
    enter: (direction: number) => ({
        x: direction > 0 ? 300 : -300,
        opacity: 0,
        scale: 0.95,
    }),
    center: {
        x: 0,
        opacity: 1,
        scale: 1,
        transition: {
            x: { type: 'spring', stiffness: 350, damping: 30 },
            opacity: { duration: 0.3 },
            scale: { duration: 0.4, ease: 'easeOut' },
        },
    },
    exit: (direction: number) => ({
        x: direction < 0 ? 300 : -300,
        opacity: 0,
        scale: 0.95,
        transition: {
            x: { type: 'spring', stiffness: 350, damping: 30 },
            opacity: { duration: 0.3 },
            scale: { duration: 0.2 },
        },
    }),
}

export default function OnboardingPage() {
    const [currentStep, setCurrentStep] = useState(0)
    const [direction, setDirection] = useState(0)
    const [isAnimating, setIsAnimating] = useState(false)
    const router = useRouter()
    const setOnboarded = useAppStore(state => state.setOnboarded)

    // Swipe handling
    const swipeX = useMotionValue(0)
    const controls = useAnimation()
    const swipeProgress = useTransform(swipeX, [-200, 0, 200], [-1, 0, 1])

    const handleDragEnd = async () => {
        const swipe = swipeProgress.get()
        if (Math.abs(swipe) > 0.5) {
            if (swipe > 0 && currentStep < steps.length - 1) {
                await nextStep()
            } else if (swipe < 0 && currentStep > 0) {
                await prevStep()
            } else {
                // Reset position if can't move
                controls.start({ x: 0 })
            }
        } else {
            // Reset position if swipe not far enough
            controls.start({ x: 0 })
        }
    }

    // Advance to next step
    const nextStep = async () => {
        if (isAnimating) return

        if (currentStep < steps.length - 1) {
            setDirection(1)
            setIsAnimating(true)
            setCurrentStep(prev => prev + 1)
            await controls.start({ x: 0 })
        } else {
            completeOnboarding()
        }
    }

    // Go back to previous step
    const prevStep = async () => {
        if (isAnimating || currentStep === 0) return

        setDirection(-1)
        setIsAnimating(true)
        setCurrentStep(prev => prev - 1)
        await controls.start({ x: 0 })
    }

    // Complete onboarding and redirect
    const completeOnboarding = () => {
        setOnboarded(true)
        router.push('/swipe')
    }

    // Handle animation completion
    const handleAnimationComplete = () => {
        setIsAnimating(false)
    }

    return (
        <motion.div
            className={cn(
                'relative h-screen w-full overflow-hidden',
                '[&_.gradient-green]:bg-gradient-to-br [&_.gradient-green]:from-[#22CC88] [&_.gradient-green]:to-[#A0EAB4]',
            )}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.6 }}>
            {/* Background layer */}
            <motion.div
                className='gradient-green absolute inset-0'
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.8 }}
            />

            {/* Content layer */}
            <div className='relative flex h-full flex-col'>
                {/* Fixed step indicators at top */}
                <motion.div
                    className='fixed top-8 right-0 left-0 z-10 flex justify-center gap-2'
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.4 }}>
                    {steps.map((_, idx) => (
                        <motion.div
                            key={idx}
                            className={cn(
                                'h-1.5 w-6 rounded-full transition-all duration-300',
                                currentStep === idx ? 'bg-white' : 'bg-white/30',
                            )}
                            animate={{
                                scale: currentStep === idx ? 1 : 0.8,
                            }}
                        />
                    ))}
                </motion.div>

                {/* Main content area with swipe support */}
                <div className='flex flex-1 items-center justify-center px-6 pt-8'>
                    <div className='relative w-full max-w-md'>
                        <motion.div
                            drag='x'
                            dragConstraints={{ left: 0, right: 0 }}
                            dragElastic={0.2}
                            onDragEnd={handleDragEnd}
                            style={{ x: swipeX }}
                            animate={controls}
                            className='touch-pan-y'>
                            <AnimatePresence
                                initial={false}
                                mode='wait'
                                custom={direction}
                                onExitComplete={handleAnimationComplete}>
                                <motion.div
                                    key={currentStep}
                                    custom={direction}
                                    variants={slideVariants}
                                    initial='enter'
                                    animate='center'
                                    exit='exit'
                                    className='mt-8 text-center'>
                                    <motion.h2
                                        className='mb-3 text-3xl font-bold text-white'
                                        initial={{ opacity: 0, y: 15 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        transition={{ duration: 0.4, delay: 0.1 }}>
                                        {steps[currentStep].title}
                                    </motion.h2>

                                    <motion.h3
                                        className='mb-3 text-lg font-medium text-white/90'
                                        initial={{ opacity: 0, y: 15 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        transition={{ duration: 0.4, delay: 0.15 }}>
                                        {steps[currentStep].subtitle}
                                    </motion.h3>

                                    <motion.p
                                        className='mb-8 text-base text-white/80'
                                        initial={{ opacity: 0, y: 15 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        transition={{ duration: 0.4, delay: 0.2 }}>
                                        {steps[currentStep].description}
                                    </motion.p>

                                    {/* Step-specific illustrations */}
                                    <IllustrationByStep step={steps[currentStep]} currentStep={currentStep} />
                                </motion.div>
                            </AnimatePresence>
                        </motion.div>
                    </div>
                </div>

                {/* Fixed bottom navigation */}
                <motion.div
                    className='fixed right-0 bottom-0 left-0 bg-gradient-to-t from-black/20 to-transparent p-4'
                    initial={{ y: 20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.3, duration: 0.4 }}>
                    <div className='mx-auto flex max-w-md items-center justify-between px-2'>
                        {currentStep > 0 ? (
                            <Button
                                variant='ghost'
                                className='text-white hover:bg-white/10'
                                onClick={prevStep}
                                disabled={isAnimating}>
                                Back
                            </Button>
                        ) : (
                            <div></div>
                        )}

                        <Button
                            className='bg-white px-8 text-[#22CC88] transition-all hover:scale-105 hover:bg-white/90'
                            onClick={nextStep}
                            disabled={isAnimating}>
                            {currentStep === steps.length - 1 ? 'Get Started' : 'Next'}
                            <ArrowRight className='ml-2 h-4 w-4' />
                        </Button>
                    </div>
                </motion.div>
            </div>
        </motion.div>
    )
}

// Illustration selector component
interface IllustrationProps {
    step: Step
    currentStep: number
}

function IllustrationByStep({ step }: IllustrationProps) {
    switch (step.illustration) {
        case 'cards':
            return <CardsIllustration />
        case 'swipe':
            return <SwipeIllustration />
        case 'complete':
            return <CompleteIllustration />
        default:
            return null
    }
}

// First step illustration - Stacked cards
function CardsIllustration() {
    return (
        <motion.div
            className='relative mb-4 h-48 w-full'
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.1 }}>
            <motion.div
                className='absolute bottom-0 left-1/2 h-40 w-64 -translate-x-1/2 rotate-[-8deg] transform rounded-2xl bg-white/20 backdrop-blur-sm'
                initial={{ opacity: 0, y: 20, scale: 0.9 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                transition={{ duration: 0.5, delay: 0.2 }}
                whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
            />
            <motion.div
                className='absolute bottom-4 left-1/2 h-40 w-64 -translate-x-1/2 rotate-[-4deg] transform rounded-2xl bg-white/40 backdrop-blur-sm'
                initial={{ opacity: 0, y: 10, scale: 0.9 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                transition={{ duration: 0.5, delay: 0.3 }}
                whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
            />
            <motion.div
                className='absolute bottom-8 left-1/2 h-40 w-64 -translate-x-1/2 transform rounded-2xl bg-white/60 backdrop-blur-sm'
                initial={{ opacity: 0, y: 5, scale: 0.9 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                transition={{ duration: 0.5, delay: 0.4 }}
                whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}>
                <motion.div
                    className='absolute inset-0 flex items-center justify-center'
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}>
                    <div className='text-4xl text-[#22CC88]'>♥</div>
                </motion.div>
            </motion.div>
        </motion.div>
    )
}

// Second step illustration - Swipe mechanic
function SwipeIllustration() {
    return (
        <motion.div
            className='mb-4 flex items-center justify-between'
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.4 }}>
            <motion.div
                className='flex flex-col items-center'
                whileHover={{ scale: 1.05, transition: { duration: 0.2 } }}>
                <motion.div
                    className='mb-2 flex h-16 w-16 items-center justify-center rounded-full bg-white/20'
                    whileTap={{ scale: 0.95 }}
                    animate={{
                        x: [-5, 0, -5],
                        boxShadow: [
                            '0 0 0 rgba(255,255,255,0)',
                            '0 0 10px rgba(255,255,255,0.3)',
                            '0 0 0 rgba(255,255,255,0)',
                        ],
                    }}
                    transition={{
                        repeat: Infinity,
                        duration: 2,
                        boxShadow: { repeat: Infinity, duration: 2 },
                    }}>
                    <X className='h-8 w-8 text-white' />
                </motion.div>
                <p className='font-medium text-white'>Skip</p>
            </motion.div>

            <motion.div
                className='h-1 w-16 overflow-hidden rounded-full bg-white/30'
                initial={{ scaleX: 0 }}
                animate={{ scaleX: 1 }}
                transition={{ duration: 0.7 }}>
                <motion.div
                    className='h-full w-full bg-white/50'
                    animate={{
                        x: ['-100%', '100%'],
                    }}
                    transition={{
                        repeat: Infinity,
                        duration: 2,
                        ease: 'linear',
                    }}
                />
            </motion.div>

            <motion.div
                className='flex flex-col items-center'
                whileHover={{ scale: 1.05, transition: { duration: 0.2 } }}>
                <motion.div
                    className='mb-2 flex h-16 w-16 items-center justify-center rounded-full bg-white'
                    whileTap={{ scale: 0.95 }}
                    animate={{
                        x: [5, 0, 5],
                        boxShadow: [
                            '0 0 0 rgba(34,204,136,0)',
                            '0 0 15px rgba(34,204,136,0.5)',
                            '0 0 0 rgba(34,204,136,0)',
                        ],
                    }}
                    transition={{
                        repeat: Infinity,
                        duration: 2,
                        delay: 0.5,
                        boxShadow: { repeat: Infinity, duration: 2, delay: 0.5 },
                    }}>
                    <Heart className='h-8 w-8 text-[#22CC88]' />
                </motion.div>
                <p className='font-medium text-white'>Donate</p>
            </motion.div>
        </motion.div>
    )
}

// Final step illustration - Completion
function CompleteIllustration() {
    return (
        <motion.div
            className='relative mb-4 flex h-48 w-full items-center justify-center'
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}>
            <motion.div
                className='flex h-24 w-24 items-center justify-center rounded-full border-4 border-[#22CC88]/40 bg-[#22CC88]/20'
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{
                    type: 'spring',
                    stiffness: 200,
                    damping: 20,
                }}
                whileHover={{
                    scale: 1.05,
                    boxShadow: '0 0 30px rgba(34,204,136,0.4)',
                    transition: { duration: 0.2 },
                }}>
                <motion.div
                    initial={{ scale: 0, rotate: -30 }}
                    animate={{ scale: 1, rotate: 0 }}
                    transition={{
                        delay: 0.3,
                        type: 'spring',
                        stiffness: 200,
                    }}>
                    <Check className='h-12 w-12 text-[#22CC88]' />
                </motion.div>
            </motion.div>

            <motion.div
                className='absolute inset-0 -z-10'
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.5, duration: 0.6 }}>
                {[...Array(20)].map((_, i) => (
                    <motion.div
                        key={i}
                        className='absolute h-2 w-2 rounded-full bg-[#22CC88]/30'
                        style={{
                            left: `${Math.random() * 100}%`,
                            top: `${Math.random() * 100}%`,
                        }}
                        initial={{ scale: 0 }}
                        animate={{
                            scale: [0, 1, 0],
                            opacity: [0, 0.8, 0],
                        }}
                        transition={{
                            repeat: Infinity,
                            duration: 1.5 + Math.random() * 2,
                            delay: Math.random() * 1,
                            ease: 'easeInOut',
                        }}
                    />
                ))}
            </motion.div>
        </motion.div>
    )
}



================================================
FILE: src/app/profile/page.tsx
================================================
'use client'

import { AchievementBadge } from '@/components/achievement-badge'
import { FriendCard } from '@/components/friend-card'
import { Header } from '@/components/header'
import { ImpactShareCard } from '@/components/impact-share-card'
import { PrivacyToggle } from '@/components/privacy-toggle'
import { StreakBadge } from '@/components/streak-badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { UserStatsCard } from '@/components/user-stats-card'
import { getUserStats } from '@/features/settings/user-settings'
import { achievements, friendsData } from '@/lib/data/sample-data.json'
import { Eye, Settings, Share2 } from 'lucide-react'
import Image from 'next/image'
import { useRouter } from 'next/navigation'
import { useState } from 'react'

export default function ProfilePage() {
    const router = useRouter()
    const [isPublic, setIsPublic] = useState(true)
    const stats = getUserStats()

    return (
        <div className='min-h-screen pb-16'>
            <Header title='Profile' showBack backUrl='/' />

            <div className='p-4'>
                <Card className='bento-bevel overflow-hidden'>
                    <div className='relative h-24 bg-gradient-to-r from-[#22CC88]/20 to-[#22CC88]/10'>
                        <div className='absolute -bottom-10 left-4'>
                            <div className='relative h-20 w-20 overflow-hidden rounded-full border-4 border-white'>
                                <Image
                                    src='https://images.unsplash.com/photo-1599566150163-29194dcaad36?q=80&w=100&auto=format&fit=crop'
                                    alt='Profile'
                                    fill
                                    sizes='80px'
                                    className='object-cover'
                                />
                            </div>
                        </div>
                    </div>
                    <CardContent className='pt-12 pb-4'>
                        <div className='flex items-start justify-between'>
                            <div>
                                <h2 className='text-xl font-semibold'>Hi, Alex!</h2>
                                <div className='mt-1 flex items-center gap-2'>
                                    <StreakBadge streak={stats.streak} />
                                    <span className='text-sm text-slate-500'>Level: {stats.level}</span>
                                </div>
                            </div>
                            <Button variant='ghost' size='icon' onClick={() => router.push('/profile/settings')}>
                                <Settings className='h-5 w-5' />
                            </Button>
                        </div>
                    </CardContent>
                </Card>

                <UserStatsCard />

                <Tabs defaultValue='achievements' className='mt-4'>
                    <TabsList className='grid w-full grid-cols-3'>
                        <TabsTrigger value='achievements'>Badges</TabsTrigger>
                        <TabsTrigger value='friends'>Friends</TabsTrigger>
                        <TabsTrigger value='impact'>Impact</TabsTrigger>
                    </TabsList>

                    <TabsContent value='achievements' className='mt-4 space-y-4'>
                        <div className='flex items-center justify-between'>
                            <h3 className='font-medium'>Your Achievements</h3>
                            <PrivacyToggle
                                icon={Eye}
                                label='Visibility'
                                description='Make your achievements visible to others'
                                checked={isPublic}
                                onCheckedChange={setIsPublic}
                            />
                        </div>

                        <div className='grid grid-cols-3 gap-3'>
                            {achievements.map(achievement => (
                                <AchievementBadge key={achievement.id} achievement={achievement} />
                            ))}
                        </div>
                    </TabsContent>

                    <TabsContent value='friends' className='mt-4 space-y-4'>
                        <div className='flex items-center justify-between'>
                            <h3 className='font-medium'>Friends</h3>
                            <Button variant='outline' size='sm' className='flex items-center gap-1'>
                                <Share2 className='h-4 w-4' />
                                <span>Invite</span>
                            </Button>
                        </div>

                        <div className='space-y-3'>
                            {friendsData.map(friend => (
                                <FriendCard key={friend.id} friend={friend} />
                            ))}
                        </div>
                    </TabsContent>

                    <TabsContent value='impact' className='mt-4 space-y-4'>
                        <div className='flex items-center justify-between'>
                            <h3 className='font-medium'>Your Impact</h3>
                            <Button variant='outline' size='sm' className='flex items-center gap-1'>
                                <Share2 className='h-4 w-4' />
                                <span>Share</span>
                            </Button>
                        </div>

                        <ImpactShareCard
                            totalDonated={stats.totalDonated}
                            projectsSupported={stats.projectsSupported}
                            categoriesSupported={stats.categoriesSupported}
                            totalPoints={stats.nextLevel?.currentPoints || 0}
                            onShare={() => {}}
                        />
                    </TabsContent>
                </Tabs>
            </div>
        </div>
    )
}



================================================
FILE: src/app/profile/settings/page.tsx
================================================
"use client"

import { useState } from "react"
import { Header } from "@/components/header"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { PrivacyToggle } from "@/components/privacy-toggle"
import { Bell, Users, LogOut, RefreshCw } from "lucide-react"
import { SwipeSettings } from "@/components/swipe-settings"
import { useRouter } from "next/navigation"
import { useAppStore } from "@/store/app-store"
import { toast } from "sonner"

export default function ProfileSettings() {
  const router = useRouter()
  const { resetOnboarding } = useAppStore()
  const [isPublicProfile, setIsPublicProfile] = useState(true)
  const [notifications, setNotifications] = useState(true)
  const [friendRequests, setFriendRequests] = useState(true)
  const [defaultSwipeAmount, setDefaultSwipeAmount] = useState(0.01)
  const [autoBatch, setAutoBatch] = useState(true)

  const handleResetOnboarding = () => {
    resetOnboarding()
    router.push("/onboarding")
  }

  const handleResetApp = async () => {
    resetOnboarding()
    toast.success("App reset successfully")
    router.push("/")
  }

  return (
    <div className="min-h-screen pb-16">
      <Header title="Settings" showBack backUrl="/profile" />

      <div className="p-4 space-y-4">
        <Card>
          <CardContent className="p-4 space-y-4">
            <h2 className="text-lg font-semibold">Privacy</h2>
            <PrivacyToggle
              icon={Users}
              label="Public Profile"
              description="Allow others to see your donation activity"
              checked={isPublicProfile}
              onCheckedChange={setIsPublicProfile}
            />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 space-y-4">
            <h2 className="text-lg font-semibold">Notifications</h2>
            <PrivacyToggle
              icon={Bell}
              label="Push Notifications"
              description="Get notified about important updates"
              checked={notifications}
              onCheckedChange={setNotifications}
            />
            <PrivacyToggle
              icon={Users}
              label="Friend Requests"
              description="Receive friend requests from other users"
              checked={friendRequests}
              onCheckedChange={setFriendRequests}
            />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <h2 className="text-lg font-semibold mb-4">Swipe Settings</h2>
            <SwipeSettings
              defaultAmount={defaultSwipeAmount}
              onDefaultAmountChange={setDefaultSwipeAmount}
              autoBatch={autoBatch}
              onAutoBatchChange={setAutoBatch}
            />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 space-y-4">
            <h2 className="text-lg font-semibold">Account</h2>
            <Button
              variant="outline"
              className="w-full justify-start"
              onClick={handleResetOnboarding}
            >
              <RefreshCw className="mr-2 h-4 w-4" />
              Reset Onboarding
            </Button>
            <Button variant="outline" className="w-full justify-start text-red-500 hover:text-red-600">
              <LogOut className="mr-2 h-4 w-4" />
              Logout
            </Button>
          </CardContent>
        </Card>

        <div className="rounded-lg border p-4">
          <h2 className="font-medium mb-2">Reset App</h2>
          <p className="text-sm text-slate-600 mb-4">
            This will reset the app to its initial state and show the onboarding screens again.
          </p>
          <Button 
            variant="destructive" 
            className="w-full"
            onClick={handleResetApp}
          >
            Reset App
          </Button>
        </div>
      </div>
    </div>
  )
}



================================================
FILE: src/app/project/[id]/page.tsx
================================================
'use client'

import { CampaignDetails } from '@/components/campaign-details'
import { ConnectButton } from '@/components/connect-button'
import { useParams } from 'next/navigation'

export default function CampaignPage() {
    const params = useParams()
    const campaignId = BigInt(params.id as string)

    return (
        <main className='container py-10'>
            <div className='mb-6 flex flex-col items-start justify-between gap-6 md:flex-row'>
                <div>
                    <h1 className='mb-2 text-3xl font-bold'>Campaign Details</h1>
                    <p className='text-gray-500'>View and support this campaign</p>
                </div>
                <ConnectButton />
            </div>

            <CampaignDetails campaignId={campaignId} />
        </main>
    )
}



================================================
FILE: src/app/social/page.tsx
================================================
'use client'

import { FriendCard } from '@/components/friend-card'
import { Header } from '@/components/header'
import { ImpactShareCard } from '@/components/impact-share-card'
import { LeaderboardCard } from '@/components/leaderboard-card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { friendsData, leaderboardData } from '@/lib/data/sample-data.json'
import { useState } from 'react'

export default function Social() {
    const [friends, setFriends] = useState(friendsData)

    const handleToggleFollow = (id: string) => {
        setFriends(friends.map(friend => (friend.id === id ? { ...friend, isFollowing: !friend.isFollowing } : friend)))
    }

    const handleShare = () => {
        alert('Sharing your impact! (This would open a share dialog in a real app)')
    }

    return (
        <div className='min-h-screen pb-16'>
            <Header title='Social' />

            <div className='p-4'>
                <ImpactShareCard onShare={handleShare} />
            </div>

            <Tabs defaultValue='donors' className='w-full'>
                <div className='px-4'>
                    <TabsList className='grid w-full grid-cols-3'>
                        <TabsTrigger value='donors'>Top Donors</TabsTrigger>
                        <TabsTrigger value='taggers'>Top Taggers</TabsTrigger>
                        <TabsTrigger value='friends'>Friends</TabsTrigger>
                    </TabsList>
                </div>

                <TabsContent value='donors' className='p-4'>
                    <h2 className='mb-3 font-semibold'>Monthly Donation Rankings</h2>
                    {leaderboardData.map((user, index) => (
                        <LeaderboardCard
                            key={user.id}
                            rank={index + 1}
                            name={user.name}
                            avatar={user.avatar}
                            amount={user.amount}
                            points={user.points}
                            isCurrentUser={user.isCurrentUser}
                            type='donors'
                        />
                    ))}
                </TabsContent>

                <TabsContent value='taggers' className='p-4'>
                    <h2 className='mb-3 font-semibold'>Top Community Taggers</h2>
                    {leaderboardData
                        .sort((a, b) => b.reputation - a.reputation)
                        .map((user, index) => (
                            <LeaderboardCard
                                key={user.id}
                                rank={index + 1}
                                name={user.name}
                                avatar={user.avatar}
                                tags={user.tags}
                                reputation={user.reputation}
                                isCurrentUser={user.isCurrentUser}
                                type='taggers'
                            />
                        ))}
                </TabsContent>

                <TabsContent value='friends' className='p-4'>
                    <h2 className='mb-3 font-semibold'>Friends & Connections</h2>
                    {friends.map(friend => (
                        <FriendCard
                            key={friend.id}
                            name={friend.name}
                            avatar={friend.avatar}
                            points={friend.points}
                            maxPoints={friend.maxPoints}
                            donations={friend.donations}
                            isFollowing={friend.isFollowing}
                            onToggleFollow={() => handleToggleFollow(friend.id)}
                        />
                    ))}
                </TabsContent>
            </Tabs>
        </div>
    )
}



================================================
FILE: src/app/swipe/layout.tsx
================================================
import SwipeHeader from '@/components/views/swipe/swipe-header'

export default function SwipePageLayout({ children }: { children: React.ReactNode }) {
    return (
        <>
            <SwipeHeader />
            {children}
        </>
    )
}



================================================
FILE: src/app/swipe/page.tsx
================================================
import SwipeTabs from '@/components/views/swipe/swipe-tabs'

export default function SwipePage() {
    return <SwipeTabs />
}



================================================
FILE: src/components/achievement-badge.tsx
================================================
import { Card, CardContent } from '@/components/ui/card'

interface Achievement {
    id: string
    icon: string
    title: string
    description: string
    unlocked: boolean
}

interface AchievementBadgeProps {
    achievement: Achievement
}

export function AchievementBadge({ achievement }: AchievementBadgeProps) {
    const { icon, title, description, unlocked } = achievement

    return (
        <Card className={`overflow-hidden ${!unlocked ? 'opacity-50' : ''}`}>
            <CardContent className='flex flex-col items-center p-3 text-center'>
                <div
                    className={`mb-2 flex h-12 w-12 items-center justify-center rounded-full ${
                        unlocked ? 'bg-[#22CC88]/10' : 'bg-slate-200'
                    }`}>
                    <div className={`text-xl ${unlocked ? 'text-[#22CC88]' : 'text-slate-400'}`}>{icon}</div>
                </div>
                <h3 className='text-sm font-medium'>{title}</h3>
                <p className='mt-1 text-xs text-slate-500'>{description}</p>
            </CardContent>
        </Card>
    )
}



================================================
FILE: src/components/action-bar.tsx
================================================
'use client'

import { cn } from '@/lib/styles/tailwind'
import { Flame, Heart, LucideProps, Sparkles, Undo2, X } from 'lucide-react'

interface ActionButtonProps {
    icon: React.ComponentType<LucideProps>
    size?: 'small' | 'large'
    onClick: () => void
    disabled?: boolean
    active?: boolean
}

const ActionButton = ({ icon: Icon, size = 'small', onClick, disabled = false, active = false }: ActionButtonProps) => {
    const sizeClasses = {
        small: 'w-12 h-12',
        large: 'w-16 h-16',
    }

    return (
        <button
            onClick={onClick}
            disabled={disabled}
            className={cn(
                'flex items-center justify-center rounded-full transition-all',
                'border border-[#F0F2F5] bg-white',
                'hover:bg-gray-50',
                sizeClasses[size],
                active && 'bg-[#22CC88]',
                disabled && 'cursor-not-allowed opacity-50',
            )}>
            <Icon
                size={24}
                className={cn('transition-colors', disabled ? 'text-[#CCC]' : 'text-gray-700', active && 'text-white')}
                fill={active ? 'currentColor' : disabled ? '#CCC' : 'none'}
            />
        </button>
    )
}

export function ActionBar() {
    return (
        <div className='absolute right-4 bottom-[72px] left-4 flex h-14 items-center justify-between'>
            <ActionButton icon={Undo2} onClick={() => {}} size='small' />
            <ActionButton icon={X} onClick={() => {}} size='large' />
            <ActionButton icon={Sparkles} onClick={() => {}} size='small' />
            <ActionButton icon={Heart} onClick={() => {}} size='large' />
            <ActionButton icon={Flame} onClick={() => {}} size='small' />
        </div>
    )
}



================================================
FILE: src/components/address-avatar.tsx
================================================
import { useMemo } from 'react'
import { blo } from 'blo'

interface AddressAvatarProps {
  address: `0x${string}`
  size?: number
  className?: string
}

export function AddressAvatar({ address, size = 40, className = '' }: AddressAvatarProps) {
  const avatarSvg = useMemo(() => {
    return blo(address, {
      size,
      square: true,
      colors: ['#22CC88', '#4B7BFF', '#FF4B4B']
    })
  }, [address, size])

  return (
    <div 
      className={`rounded-full overflow-hidden ${className}`}
      style={{ width: size, height: size }}
      dangerouslySetInnerHTML={{ __html: avatarSvg }}
    />
  )
} 


================================================
FILE: src/components/animated-button.tsx
================================================
'use client'

import { Button, buttonVariants } from '@/components/ui/button'
import { cn } from '@/lib/styles/tailwind'
import type { VariantProps } from 'class-variance-authority'
import { motion } from 'framer-motion'
import type React from 'react'

interface AnimatedButtonProps extends React.ComponentProps<'button'>, VariantProps<typeof buttonVariants> {
    animateOnClick?: boolean
    asChild?: boolean
}

export function AnimatedButton({ children, className, animateOnClick = true, onClick, ...props }: AnimatedButtonProps) {
    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
        if (onClick) onClick(e)
    }

    return (
        <motion.div
            whileHover={{ scale: 1.05 }}
            whileTap={animateOnClick ? { scale: 0.95 } : undefined}
            className='w-full'>
            <Button className={cn('relative overflow-hidden', className)} onClick={handleClick} {...props}>
                {children}
            </Button>
        </motion.div>
    )
}



================================================
FILE: src/components/animated-icon.tsx
================================================
"use client"

import { motion } from "framer-motion"
import type { LucideIcon } from "lucide-react"

interface AnimatedIconProps {
  icon: LucideIcon
  isActive?: boolean
  onClick?: () => void
  className?: string
  size?: number
  activeColor?: string
  inactiveColor?: string
}

export function AnimatedIcon({
  icon: Icon,
  isActive = false,
  onClick,
  className = "",
  size = 24,
  activeColor = "#22CC88",
  inactiveColor = "#94A3B8",
}: AnimatedIconProps) {
  return (
    <motion.div
      whileTap={{ scale: 0.9 }}
      whileHover={{ scale: 1.1 }}
      onClick={onClick}
      className={`cursor-pointer ${className}`}
    >
      <motion.div animate={isActive ? { scale: [1, 1.2, 1] } : {}} transition={{ duration: 0.3 }}>
        <Icon size={size} color={isActive ? activeColor : inactiveColor} className="transition-colors duration-300" />
      </motion.div>
    </motion.div>
  )
}



================================================
FILE: src/components/batch-status-indicator.tsx
================================================
'use client'

import { formatCurrency } from '@/features/currencies/formatter'
import { AnimatePresence, motion } from 'framer-motion'
import { CheckCircle, Clock, XCircle } from 'lucide-react'
import { useEffect, useState } from 'react'
import { useBatchTransactions } from './batch-transaction-provider'

export function BatchStatusIndicator() {
    const { pendingTransactions, completedTransactions } = useBatchTransactions()
    const [showIndicator, setShowIndicator] = useState(false)
    const [recentTx, setRecentTx] = useState<{
        id: string
        amount: number
        projectId: number
        projectTitle: string
        timestamp: number
        status: 'pending' | 'completed' | 'cancelled'
    } | null>(null)

    useEffect(() => {
        // Check for the most recent transaction
        const latestPendingTx =
            pendingTransactions.length > 0 ? pendingTransactions[pendingTransactions.length - 1] : null

        if (latestPendingTx) {
            setRecentTx(latestPendingTx)
            setShowIndicator(true)
        } else {
            // Check for completed transactions in the last 5 seconds
            const recentCompletedTx = completedTransactions.find(tx => tx.timestamp > Date.now() - 5000)

            if (recentCompletedTx) {
                setRecentTx(recentCompletedTx)
                setShowIndicator(true)

                // Hide after 3 seconds
                const timer = setTimeout(() => {
                    setShowIndicator(false)
                }, 3000)

                return () => clearTimeout(timer)
            } else {
                setShowIndicator(false)
            }
        }
    }, [pendingTransactions, completedTransactions])

    if (!recentTx) return null

    return (
        <AnimatePresence>
            {showIndicator && (
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 20 }}
                    className='pointer-events-none fixed right-0 bottom-20 left-0 z-50 flex justify-center'>
                    <div className='flex max-w-xs items-center gap-3 rounded-lg bg-white px-4 py-3 shadow-lg'>
                        {recentTx.status === 'pending' && <Clock className='h-5 w-5 text-amber-500' />}
                        {recentTx.status === 'completed' && <CheckCircle className='h-5 w-5 text-green-500' />}
                        {recentTx.status === 'cancelled' && <XCircle className='h-5 w-5 text-red-500' />}

                        <div className='flex-1 text-sm'>
                            <div className='font-medium'>
                                {recentTx.status === 'pending' && 'Processing donation...'}
                                {recentTx.status === 'completed' && 'Donation completed'}
                                {recentTx.status === 'cancelled' && 'Donation cancelled'}
                            </div>
                            <div className='text-xs text-gray-500'>
                                {formatCurrency(recentTx.amount, 'CENTS')} to {recentTx.projectTitle}
                            </div>
                        </div>
                    </div>
                </motion.div>
            )}
        </AnimatePresence>
    )
}



================================================
FILE: src/components/batch-transaction-provider.tsx
================================================
'use client'

import { formatCurrency } from '@/features/currencies/formatter'
import { getUserSettings } from '@/features/settings/user-settings'
import { Undo2 } from 'lucide-react'
import type React from 'react'
import { createContext, useCallback, useContext, useEffect, useState } from 'react'
import { toast } from 'sonner'

interface Transaction {
    id: string
    amount: number
    projectId: number
    projectTitle: string
    timestamp: number
    status: 'pending' | 'completed' | 'cancelled'
}

interface BatchTransactionContextType {
    pendingTransactions: Transaction[]
    completedTransactions: Transaction[]
    addTransaction: (amount: number, projectId: number, projectTitle: string) => string
    cancelTransaction: (id: string) => void
    processBatch: () => void
}

// Define the action interface for the toast
interface ActionProps {
    label: string
    onClick: () => void
    icon?: React.ReactNode
}

const BatchTransactionContext = createContext<BatchTransactionContextType | undefined>(undefined)

export function BatchTransactionProvider({ children }: { children: React.ReactNode }) {
    const [pendingTransactions, setPendingTransactions] = useState<Transaction[]>([])
    const [completedTransactions, setCompletedTransactions] = useState<Transaction[]>([])
    const [batchTimer, setBatchTimer] = useState<NodeJS.Timeout | null>(null)
    const [userSettings, setUserSettings] = useState({ currency: 'CENTS' })

    useEffect(() => {
        setUserSettings(getUserSettings())
    }, [])

    const cancelTransaction = useCallback((id: string) => {
        setPendingTransactions(prev => prev.map(tx => (tx.id === id ? { ...tx, status: 'cancelled' } : tx)))

        // Filtrar la transacción cancelada
        setPendingTransactions(prev => prev.filter(tx => tx.id !== id))

        toast.success('Donación cancelada')
    }, [])

    const processBatch = useCallback(() => {
        if (pendingTransactions.length === 0) return

        // Filtrar solo las transacciones pendientes
        const validTransactions = pendingTransactions.filter(tx => tx.status === 'pending')

        if (validTransactions.length === 0) return

        // Calcular el total del batch
        const totalAmount = validTransactions.reduce((sum, tx) => sum + tx.amount, 0)

        // Mover transacciones de pendientes a completadas
        setCompletedTransactions(prev => [
            ...prev,
            ...validTransactions.map(tx => ({ ...tx, status: 'completed' as const })),
        ])
        setPendingTransactions([])

        // Resetear el timer
        if (batchTimer) {
            clearTimeout(batchTimer)
            setBatchTimer(null)
        }

        // Notificar al usuario
        if (validTransactions.length > 1) {
            toast.success(`Batch procesado: ${formatCurrency(totalAmount, userSettings.currency)}`, {
                description: `${validTransactions.length} donaciones procesadas`,
            })
        } else {
            toast.success(`Donación procesada: ${formatCurrency(totalAmount, userSettings.currency)}`, {
                description: `Para ${validTransactions[0].projectTitle}`,
            })
        }
    }, [pendingTransactions, batchTimer, userSettings])

    // Procesar batch automáticamente después de un tiempo
    useEffect(() => {
        if (pendingTransactions.length > 0 && !batchTimer) {
            const timer = setTimeout(() => {
                processBatch()
            }, 5000) // 5 segundos de delay para permitir deshacer
            setBatchTimer(timer)
        }

        return () => {
            if (batchTimer) {
                clearTimeout(batchTimer)
            }
        }
    }, [pendingTransactions, batchTimer, processBatch])

    const addTransaction = useCallback(
        (amount: number, projectId: number, projectTitle: string): string => {
            const id = `tx-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`
            const newTransaction: Transaction = {
                id,
                amount,
                projectId,
                projectTitle,
                timestamp: Date.now(),
                status: 'pending',
            }

            setPendingTransactions(prev => [...prev, newTransaction])

            // Mostrar toast con opción de deshacer
            toast(`Donación: ${formatCurrency(amount, userSettings.currency)}`, {
                description: `Para ${projectTitle}`,
                action: {
                    label: 'Deshacer',
                    onClick: () => cancelTransaction(id),
                    icon: <Undo2 className='h-4 w-4' />,
                } as ActionProps,
                duration: 4000,
            })

            return id
        },
        [userSettings, cancelTransaction],
    )

    return (
        <BatchTransactionContext.Provider
            value={{
                pendingTransactions,
                completedTransactions,
                addTransaction,
                cancelTransaction,
                processBatch,
            }}>
            {children}
        </BatchTransactionContext.Provider>
    )
}

export function useBatchTransactions() {
    const context = useContext(BatchTransactionContext)
    if (context === undefined) {
        throw new Error('useBatchTransactions must be used within a BatchTransactionProvider')
    }
    return context
}



================================================
FILE: src/components/bottom-nav.tsx
================================================
"use client"

import { usePathname } from 'next/navigation'
import Link from 'next/link'
import { Users, PlusCircle, User, HandHeart } from 'lucide-react'
import { cn } from "@/lib/utils"

interface NavItem {
  path: string
  icon: typeof HandHeart | typeof Users | typeof PlusCircle | typeof User
  title: string
}

export function BottomNav() {
  const pathname = usePathname()
  
  // Don't show bottom navigation on onboarding screens
  if (pathname.startsWith("/onboarding")) {
    return null
  }
  
  const navItems: NavItem[] = [
    {
      path: '/home',
      title: 'Donate',
      icon: HandHeart
    },
    {
      path: '/social',
      title: 'Community',
      icon: Users
    },
    {
      path: '/create',
      title: 'Create Campaign',
      icon: PlusCircle
    },
    {
      path: '/profile',
      title: 'Profile',
      icon: User
    }
  ]
  
  return (
    <>
      {/* Gradient overlay for bottom nav */}
      <div className="fixed bottom-0 left-0 right-0 h-24 pointer-events-none z-40" />
      
      <nav className="fixed bottom-0 left-0 right-0 z-50 h-14 flex justify-around items-center">
        {navItems.map((item) => {
          const isActive = pathname === item.path
          return (
            <Link 
              href={item.path} 
              key={item.path}
              className={cn(
                "w-12 h-12 flex items-center justify-center",
                "transition-colors duration-200"
              )}
              title={item.title}
            >
              <item.icon 
                size={24}
                className={cn(
                  "transition-colors duration-200",
                  isActive ? "text-[#22CC88]" : "text-[#7C8591]"
                )}
                strokeWidth={2}
              />
            </Link>
          )
        })}
      </nav>
    </>
  )
}



================================================
FILE: src/components/campaign-card.tsx
================================================
import { CheckCircle } from "lucide-react"
import { ContainerAwareImage } from "./container-aware-image"

interface ProjectCardProps {
  project: {
    id: string
    title: string
    description: string
    imageUrl: string
    address: `0x${string}`
    verified?: boolean
    categories: string[]
    goal: number
    raised: number
  }
  className?: string
}

export function ProjectCard({ project, className = "" }: ProjectCardProps) {
  // Generate image candidates based on the original imageUrl
  const imageCandidates = [
    {
      width: 300,
      height: 225,
      src: project.imageUrl.replace(/\.(jpg|png|webp)/, "-300x225.$1")
    },
    {
      width: 600,
      height: 450,
      src: project.imageUrl.replace(/\.(jpg|png|webp)/, "-600x450.$1")
    },
    {
      width: 900,
      height: 675,
      src: project.imageUrl.replace(/\.(jpg|png|webp)/, "-900x675.$1")
    },
    // Fallback to original image
    {
      width: 1200,
      height: 900,
      src: project.imageUrl
    }
  ]

  // We might need progress later, keep the calculation for now
  // const progress = (project.raised / project.goal) * 100

  return (
    <div className={`project-card ${className}`}>
      <div className="project-card-image">
        <ContainerAwareImage
          candidates={imageCandidates}
          alt={project.title}
          observeContainer=".project-card-image"
          placeholderColor="#e0e0e0"
        />
        
        {project.verified && (
          <div className="project-card-badge-container">
            <span className="trusted-badge">
              <CheckCircle /> Trusted
            </span>
          </div>
        )}

        <div className="project-card-overlay">
          <h2 className="project-card-overlay-title line-clamp-2">{project.title}</h2>
          <p className="project-card-overlay-category">
            {project.categories.length > 0 ? project.categories[0] : 'Project'}
          </p>
        </div>
      </div>
    </div>
  )
} 


================================================
FILE: src/components/campaign-detail-drawer.tsx
================================================
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
import { getTagColor } from '@/features/campaigns/trust'
import { Campaign } from '@/types/campaign'
import { AnimatePresence, motion } from 'framer-motion'
import { ExternalLink, Flame, MessageSquare, Share2, X } from 'lucide-react'
import Image from 'next/image'
import type React from 'react'

interface CampaignDetailDrawerProps {
    isOpen: boolean
    onClose: () => void
    campaign: Campaign
    onShowCommunityNotes: (campaign: Campaign) => void // Handler still expects base type
}

export function CampaignDetailDrawer({ isOpen, onClose, campaign, onShowCommunityNotes }: CampaignDetailDrawerProps) {
    if (!campaign) return null

    // Use optional chaining and nullish coalescing
    const websiteUrl = campaign.websiteUrl
    const isSponsored = campaign.sponsorBoosted

    const handleShare = (e: React.MouseEvent) => {
        e.stopPropagation()
        if (navigator.share) {
            navigator
                .share({
                    title: campaign.title,
                    text: campaign.description,
                    url: websiteUrl || window.location.href,
                })
                .catch(err => console.error('Error sharing:', err))
        } else {
            navigator.clipboard.writeText(websiteUrl || window.location.href)
            alert('Link copied to clipboard!')
        }
    }

    const handleShowNotes = (e: React.MouseEvent) => {
        e.stopPropagation()
        if (campaign) {
            // Pass the original base campaign type to the handler if needed
            // Although `campaign` here is DisplayCampaignType, it satisfies BaseCampaignType
            onShowCommunityNotes(campaign)
        }
        onClose()
    }

    return (
        <AnimatePresence>
            {isOpen && (
                <>
                    {/* Backdrop */}
                    <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        className='fixed inset-0 z-40 bg-black/30'
                        onClick={onClose}
                    />

                    {/* Drawer Panel */}
                    <motion.div
                        initial={{ y: '100%' }}
                        animate={{ y: 0 }}
                        exit={{ y: '100%' }}
                        transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                        className='swipe-pad-modal fixed right-0 bottom-0 left-0 z-50 flex max-h-[85vh] flex-col rounded-t-2xl bg-white shadow-lg'>
                        {/* Header */}
                        <div className='flex flex-shrink-0 items-center justify-between border-b border-slate-200 p-4'>
                            <h2 className='text-lg font-semibold'>Campaign Details</h2>
                            <Button variant='ghost' size='sm' onClick={onClose} className='h-auto p-1'>
                                <X className='h-5 w-5' />
                            </Button>
                        </div>

                        {/* Scrollable Content */}
                        <div className='flex-grow overflow-y-auto p-4'>
                            {/* Banner Image */}
                            <div className='relative mb-4 h-40 w-full overflow-hidden rounded-lg'>
                                <Image
                                    src={campaign.imageUrl || '/placeholder.svg'}
                                    alt={`${campaign.title} banner`}
                                    fill
                                    className='pointer-events-none object-cover object-center'
                                />
                            </div>

                            {/* Title */}
                            <h3 className='mb-2 flex items-center gap-1.5 text-xl font-semibold'>
                                {campaign.title}
                                {websiteUrl && (
                                    <a
                                        href={websiteUrl}
                                        target='_blank'
                                        rel='noopener noreferrer'
                                        className='text-blue-500 transition-colors hover:text-blue-700'
                                        onClick={e => e.stopPropagation()}
                                        aria-label='Visit campaign website'>
                                        <ExternalLink className='h-4 w-4' />
                                    </a>
                                )}
                            </h3>

                            {/* Tags */}
                            <div className='mb-3 flex flex-wrap gap-2'>
                                <span className='rounded-full bg-[#22CC88] px-2 py-1 text-xs text-white'>
                                    {campaign.category}
                                </span>
                                {isSponsored && (
                                    <span className='flex items-center rounded-full bg-amber-500 px-2 py-1 text-xs text-white'>
                                        <Flame className='mr-1 h-3 w-3' /> Boosted
                                    </span>
                                )}
                                {campaign.communityTags?.map(tag => (
                                    <span
                                        key={tag.id}
                                        className={`rounded-full px-2 py-0.5 text-xs ${getTagColor(tag.text)}`}>
                                        {tag.text} ({tag.count})
                                    </span>
                                ))}
                            </div>

                            {/* Description */}
                            <p className='mb-4 text-sm text-slate-600'>{campaign.description}</p>

                            {/* Funding Progress */}
                            <div className='mb-4 space-y-2'>
                                <div className='flex justify-between text-sm'>
                                    <span>Funding goal</span>
                                    <span>${campaign.fundingGoal}</span>
                                </div>
                                <Progress value={campaign.currentFunding} max={campaign.fundingGoal} />
                            </div>
                        </div>

                        {/* Actions Footer */}
                        <div className='flex flex-shrink-0 items-center justify-between gap-2 border-t border-slate-100 p-4'>
                            <Button variant='outline' size='sm' onClick={handleShowNotes} className='flex-1 text-xs'>
                                <MessageSquare className='mr-1 h-3 w-3' /> Community Notes
                            </Button>
                            <TooltipProvider>
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <button
                                            onClick={handleShare}
                                            className='rounded-md p-2 text-slate-500 hover:bg-slate-100'
                                            aria-label='Share campaign'>
                                            <Share2 className='h-4 w-4' />
                                        </button>
                                    </TooltipTrigger>
                                    <TooltipContent>
                                        <p>Share Campaign</p>
                                    </TooltipContent>
                                </Tooltip>
                            </TooltipProvider>
                        </div>
                    </motion.div>
                </>
            )}
        </AnimatePresence>
    )
}



================================================
FILE: src/components/campaign-details.tsx
================================================
'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Progress } from '@/components/ui/progress'
import { useDonationPool } from '@/hooks/use-donation-pool'
import { useWallet } from '@/hooks/use-wallet'
import { formatDistanceToNow } from 'date-fns'
import Image from 'next/image'
import { useState } from 'react'
import { toast } from 'sonner'
import { formatEther } from 'viem'

interface CampaignDetailsProps {
    campaignId: bigint
}

export function CampaignDetails({ campaignId }: CampaignDetailsProps) {
    const { useCampaignDetails, useCampaignBalance, donate, isPending } = useDonationPool()
    const { isConnected, isOnCorrectNetwork } = useWallet()
    const [donationAmount, setDonationAmount] = useState('')
    const [submitting, setSubmitting] = useState(false)

    // Fetch campaign details
    const {
        data: campaignDetails,
        isLoading: isLoadingDetails,
        isError: isErrorDetails,
    } = useCampaignDetails(campaignId)

    // Fetch campaign balance
    const {
        data: campaignBalance,
        isLoading: isLoadingBalance,
        isError: isErrorBalance,
    } = useCampaignBalance(campaignId)

    // Handle donation submission
    const handleDonate = async (e: React.FormEvent) => {
        e.preventDefault()

        if (!isConnected) {
            toast.error('Please connect your wallet first')
            return
        }

        if (!isOnCorrectNetwork) {
            toast.error('Please switch to Celo Alfajores network')
            return
        }

        try {
            setSubmitting(true)

            await donate(campaignId, donationAmount)

            toast.success('Donation initiated. Please wait for confirmation.')
            setDonationAmount('')
        } catch (error) {
            console.error('Failed to donate:', error)
            toast.error('Failed to donate. Please try again.')
        } finally {
            setSubmitting(false)
        }
    }

    // Format dates for display
    const formatDate = (timestamp: bigint) => {
        try {
            return formatDistanceToNow(new Date(Number(timestamp) * 1000), { addSuffix: true })
        } catch {
            return 'Invalid date'
        }
    }

    // Calculate funding progress
    const calculateProgress = () => {
        if (!campaignDetails || !campaignBalance) return 0

        const fundingGoal = campaignDetails.fundingGoal
        if (fundingGoal === BigInt(0)) return 0

        return Number((campaignBalance * BigInt(100)) / fundingGoal)
    }

    // Calculate time left
    const calculateTimeLeft = () => {
        if (!campaignDetails) return ''

        const endTime = campaignDetails.endTime
        const now = BigInt(Math.floor(Date.now() / 1000))

        if (endTime < now) {
            return 'Funding ended'
        }

        return `Ends ${formatDate(endTime)}`
    }

    // Determine funding model text
    const getFundingModelText = () => {
        if (!campaignDetails) return ''

        return campaignDetails.fundingModel === BigInt(0) ? 'All or Nothing' : 'Keep What You Raise'
    }

    if (isLoadingDetails || isLoadingBalance) {
        return (
            <Card>
                <CardContent className='pt-6'>
                    <div className='flex min-h-48 flex-col items-center justify-center'>
                        <p>Loading campaign details...</p>
                    </div>
                </CardContent>
            </Card>
        )
    }

    if (isErrorDetails || isErrorBalance || !campaignDetails) {
        return (
            <Card>
                <CardContent className='pt-6'>
                    <div className='flex min-h-48 flex-col items-center justify-center'>
                        <p className='text-red-500'>Error loading campaign details</p>
                        <Button onClick={() => window.location.reload()} className='mt-4'>
                            Retry
                        </Button>
                    </div>
                </CardContent>
            </Card>
        )
    }

    const progress = calculateProgress()

    return (
        <Card>
            <CardHeader>
                <CardTitle>{campaignDetails.campaignName}</CardTitle>
                <CardDescription>
                    {campaignDetails.imageUrl && (
                        <div className='mb-4'>
                            <Image
                                src={campaignDetails.imageUrl}
                                alt={campaignDetails.campaignName}
                                className='h-48 w-full rounded-md object-cover'
                            />
                        </div>
                    )}
                    <p className='mt-2'>{campaignDetails.campaignDescription}</p>
                    {campaignDetails.campaignUrl && (
                        <a
                            href={campaignDetails.campaignUrl}
                            target='_blank'
                            rel='noopener noreferrer'
                            className='mt-2 inline-block text-blue-500 hover:underline'>
                            Campaign Website
                        </a>
                    )}
                </CardDescription>
            </CardHeader>
            <CardContent>
                <div className='mb-6'>
                    <div className='mb-2 flex justify-between'>
                        <span>{campaignBalance ? formatEther(campaignBalance) : '0'} CELO raised</span>
                        <span>
                            Goal: {campaignDetails.fundingGoal ? formatEther(campaignDetails.fundingGoal) : '0'} CELO
                        </span>
                    </div>
                    <Progress value={progress} className='h-2 w-full' />
                    <div className='mt-2 flex justify-between text-sm text-gray-500'>
                        <span>{getFundingModelText()}</span>
                        <span>{calculateTimeLeft()}</span>
                    </div>
                </div>

                <form onSubmit={handleDonate} className='space-y-4'>
                    <div>
                        <label htmlFor='donationAmount' className='mb-1 block text-sm font-medium'>
                            Donation Amount (CELO)
                        </label>
                        <Input
                            id='donationAmount'
                            type='number'
                            step='0.01'
                            min='0.01'
                            value={donationAmount}
                            onChange={e => setDonationAmount(e.target.value)}
                            placeholder='Enter amount to donate'
                            required
                            disabled={!isConnected || !isOnCorrectNetwork || submitting || isPending}
                        />
                    </div>

                    <Button
                        type='submit'
                        className='w-full'
                        disabled={!isConnected || !isOnCorrectNetwork || submitting || isPending}>
                        {submitting || isPending ? 'Processing...' : 'Donate Now'}
                    </Button>
                </form>
            </CardContent>
            <CardFooter className='flex justify-between text-sm text-gray-500'>
                <span>Started {formatDate(campaignDetails.startTime)}</span>
                <span>Campaign ID: {campaignId.toString()}</span>
            </CardFooter>
        </Card>
    )
}



================================================
FILE: src/components/campaign-heart-button.tsx
================================================
'use client'

import { Button } from '@/components/ui/button'
import { formatCurrency } from '@/features/currencies/formatter'
import { Heart } from 'lucide-react'

interface ProjectHeartButtonProps {
    onClick?: () => void
    amount: number
    currency: string
}

export function ProjectHeartButton({ onClick, amount, currency }: ProjectHeartButtonProps) {
    return (
        <Button
            variant='outline'
            size='icon'
            className='h-10 w-10 rounded-full border-0 bg-white/90 text-[#22CC88] shadow-md hover:bg-white/95 hover:text-[#1eb77a]'
            onClick={onClick}
            title={`Donate ${formatCurrency(amount, currency)}`}>
            <Heart className='h-5 w-5' />
        </Button>
    )
}



================================================
FILE: src/components/campaign-image.tsx
================================================
'use client'

import Image, { ImageProps } from 'next/image'
import { useState } from 'react'

interface CampaignImageProps extends Omit<ImageProps, 'src' | 'alt'> {
    src: string
    alt: string
    fallbackClassName?: string
}

export function CampaignImage({ src, alt, fallbackClassName, className, onError, ...props }: CampaignImageProps) {
    const [error, setError] = useState(false)

    // Generate a random gradient for fallback
    const getRandomGradient = () => {
        const colors = [
            ['#FF6B6B', '#4ECDC4'],
            ['#A8E6CF', '#FFD3B6'],
            ['#DCEDC1', '#FFD3B6'],
            ['#FF9A9E', '#FAD0C4'],
            ['#96E6A1', '#D4FC79'],
        ]
        const [color1, color2] = colors[Math.floor(Math.random() * colors.length)]
        return `linear-gradient(45deg, ${color1}, ${color2})`
    }

    const handleError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {
        setError(true)
        if (onError) {
            onError(e)
        }
    }

    if (error) {
        return (
            <div
                className={`relative h-full w-full ${fallbackClassName || ''}`}
                style={{ backgroundImage: getRandomGradient() }}
                aria-hidden='true'
            />
        )
    }

    return <Image src={src} alt={alt} className={`${className || ''} object-cover`} onError={handleError} {...props} />
}



================================================
FILE: src/components/campaign-list-view.tsx
================================================
import { SwipeCard } from '@/components/swipe-card'
import { Campaign } from '@/types/campaign'

interface CampaignListViewProps {
    campaigns: Campaign[]
    onShowDetails: () => void
}

export function CampaignListView({ campaigns, onShowDetails }: CampaignListViewProps) {
    return (
        <div className='mb-[var(--height-bottombar)] flex flex-col gap-4 p-4'>
            {campaigns.map(campaign => (
                <SwipeCard key={campaign.id} campaign={campaign} mode='list' onShowDetails={onShowDetails} />
            ))}
        </div>
    )
}



================================================
FILE: src/components/campaign-list.tsx
================================================
'use client'

import { Progress } from '@/components/ui/progress'
import { useDonationPool } from '@/hooks/use-donation-pool'
import { useWallet } from '@/hooks/use-wallet'
import Image from 'next/image'
import Link from 'next/link'
import { useEffect, useState } from 'react'
// Type for formatted campaigns for UI
interface CampaignUI {
    id: string
    title: string
    description: string
    raised: string
    goal: string
    imageUrl: string
    progress: number
}

interface CampaignListProps {
    limit?: number
}

export function CampaignList({ limit }: CampaignListProps) {
    const [loading, setLoading] = useState(true)
    const [campaigns, setCampaigns] = useState<CampaignUI[]>([])
    const [mounted, setMounted] = useState(false)

    const { address } = useWallet()
    const { useCampaignsCreatedBy, mounted: hookMounted } = useDonationPool()

    // Ensure the component is mounted (client)
    useEffect(() => {
        setMounted(true)
    }, [])

    // Get the IDs of the created campaigns
    const {
        data: campaignIds,
        isLoading: isLoadingCampaigns,
        isError: isErrorCampaigns,
    } = useCampaignsCreatedBy(address as `0x${string}`)

    // Load details of the campaigns
    useEffect(() => {
        const fetchCampaignDetails = async () => {
            if (!mounted || !hookMounted) return

            if (!campaignIds || campaignIds.length === 0) {
                // If there are no campaigns or we are loading, use example data
                const mockCampaigns = [
                    {
                        id: '1',
                        title: 'Example Campaign 1',
                        description: 'This is a placeholder for a donation campaign.',
                        raised: '0.5',
                        goal: '5',
                        imageUrl: '',
                        progress: 10,
                    },
                    {
                        id: '2',
                        title: 'Example Campaign 2',
                        description: 'This is a placeholder for a donation campaign.',
                        raised: '1.2',
                        goal: '3',
                        imageUrl: '',
                        progress: 40,
                    },
                    {
                        id: '3',
                        title: 'Example Campaign 3',
                        description: 'This is a placeholder for a donation campaign.',
                        raised: '4.8',
                        goal: '5',
                        imageUrl: '',
                        progress: 96,
                    },
                ]
                setCampaigns(mockCampaigns)
                setLoading(false)
                return
            }

            // TODO: Implement the real loading of the campaigns when we have blockchain connection
            // This function would be where we would load the details of each campaign
            // using the useCampaignDetails hook for each ID

            setLoading(false)
        }

        if (!isLoadingCampaigns && mounted && hookMounted) {
            fetchCampaignDetails()
        }
    }, [campaignIds, isLoadingCampaigns, mounted, hookMounted])

    // Render a loading state or placeholder during SSR
    if (!mounted || !hookMounted) {
        return (
            <div className='grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3'>
                {[1, 2, 3].map(id => (
                    <div key={id} className='animate-pulse overflow-hidden rounded-lg bg-white shadow-md'>
                        <div className='h-48 bg-gray-200'></div>
                        <div className='p-6'>
                            <div className='mb-2 h-6 w-3/4 rounded bg-gray-200'></div>
                            <div className='mb-4 h-4 w-full rounded bg-gray-200'></div>
                            <div className='mb-2 flex justify-between'>
                                <div className='h-4 w-1/3 rounded bg-gray-200'></div>
                                <div className='h-4 w-1/3 rounded bg-gray-200'></div>
                            </div>
                            <div className='h-2 w-full rounded-full bg-gray-200'></div>
                        </div>
                    </div>
                ))}
            </div>
        )
    }

    if (loading || isLoadingCampaigns) {
        return (
            <div className='grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3'>
                {[1, 2, 3].map(id => (
                    <div key={id} className='animate-pulse overflow-hidden rounded-lg bg-white shadow-md'>
                        <div className='h-48 bg-gray-200'></div>
                        <div className='p-6'>
                            <div className='mb-2 h-6 w-3/4 rounded bg-gray-200'></div>
                            <div className='mb-4 h-4 w-full rounded bg-gray-200'></div>
                            <div className='mb-2 flex justify-between'>
                                <div className='h-4 w-1/3 rounded bg-gray-200'></div>
                                <div className='h-4 w-1/3 rounded bg-gray-200'></div>
                            </div>
                            <div className='h-2 w-full rounded-full bg-gray-200'></div>
                        </div>
                    </div>
                ))}
            </div>
        )
    }

    if (isErrorCampaigns) {
        return (
            <div className='p-8 text-center'>
                <p className='text-red-500'>Error loading campaigns. Please try again later.</p>
            </div>
        )
    }

    // If there are no campaigns, show message
    if (campaigns.length === 0) {
        return (
            <div className='p-8 text-center'>
                <p className='text-gray-500'>No campaigns found. Create your first campaign!</p>
                <Link
                    href='/create'
                    className='mt-4 inline-block rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600'>
                    Create Campaign
                </Link>
            </div>
        )
    }

    // Apply limit if specified
    const displayedCampaigns = limit ? campaigns.slice(0, limit) : campaigns

    return (
        <div className='grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3'>
            {displayedCampaigns.map(campaign => (
                <Link href={`/campaign/${campaign.id}`} key={campaign.id} className='block'>
                    <div className='overflow-hidden rounded-lg bg-white shadow-md transition-shadow hover:shadow-lg'>
                        {campaign.imageUrl ? (
                            <Image
                                src={campaign.imageUrl}
                                alt={campaign.title}
                                className='h-48 w-full object-cover'
                                width={1920}
                                height={1080}
                            />
                        ) : (
                            <div className='h-48 bg-gray-200'></div>
                        )}
                        <div className='p-6'>
                            <h3 className='mb-2 text-xl font-bold'>{campaign.title}</h3>
                            <p className='mb-4 text-gray-500'>{campaign.description}</p>
                            <div className='mb-2 flex justify-between text-sm'>
                                <span>{campaign.raised} CELO raised</span>
                                <span>Goal: {campaign.goal} CELO</span>
                            </div>
                            <Progress value={campaign.progress} className='h-2 w-full' />
                        </div>
                    </div>
                </Link>
            ))}
        </div>
    )
}



================================================
FILE: src/components/category-filter.tsx
================================================
import { Button } from '@/components/ui/button'
import { categories } from '@/lib/data/sample-data.json'

interface CategoryFilterProps {
    selectedCategory: string
    onCategoryChange: (category: string) => void
    className?: string
}

export function CategoryFilter({ selectedCategory, onCategoryChange, className = '' }: CategoryFilterProps) {
    return (
        <div
            className={`flex gap-2 overflow-x-auto ${className}`}
            style={{
                msOverflowStyle: 'none' /* IE and Edge */,
                scrollbarWidth: 'none' /* Firefox */,
                WebkitOverflowScrolling: 'touch',
            }}>
            <style jsx>{`
                div::-webkit-scrollbar {
                    display: none;
                }
            `}</style>
            {categories.map(category => (
                <Button
                    key={category}
                    variant={selectedCategory === category ? 'default' : 'outline'}
                    size='sm'
                    onClick={() => onCategoryChange(category)}
                    className={`relative shrink-0 border border-black/10 text-gray-800 ${
                        selectedCategory === category ? 'bg-primary/60 text-primary-foreground' : 'bg-white/20'
                    }`}>
                    {category}
                </Button>
            ))}
        </div>
    )
}



================================================
FILE: src/components/combo-indicator.tsx
================================================
"use client"

import { useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { FlameIcon as Fire } from "lucide-react"

interface ComboIndicatorProps {
  combo: number
  show: boolean
  onComplete?: () => void
}

export function ComboIndicator({ combo, show, onComplete }: ComboIndicatorProps) {
  useEffect(() => {
    if (show) {
      const timer = setTimeout(() => {
        if (onComplete) onComplete()
      }, 2000)
      return () => clearTimeout(timer)
    }
  }, [show, onComplete])

  if (!show || combo < 3) return null

  // Determinar el mensaje y estilo según el combo
  const getMessage = () => {
    if (combo >= 10) return "¡LEGENDARIO!"
    if (combo >= 8) return "¡INCREÍBLE!"
    if (combo >= 6) return "¡FANTÁSTICO!"
    if (combo >= 5) return "¡EXCELENTE!"
    if (combo >= 3) return "¡BUEN COMBO!"
    return ""
  }

  // Determinar el número de iconos de fuego según el combo
  const getFireIcons = () => {
    if (combo >= 10) return Array(3).fill(0)
    if (combo >= 7) return Array(2).fill(0)
    return Array(1).fill(0)
  }

  // Mover el combo indicator a la esquina superior derecha
  return (
    <AnimatePresence>
      {show && (
        <motion.div
          initial={{ opacity: 0, scale: 0.5, y: 50 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.5, y: 50 }}
          className="fixed top-16 right-4 z-50 pointer-events-none"
        >
          <motion.div
            className="bg-gradient-to-r from-amber-500 to-orange-500 text-white px-4 py-2 rounded-full shadow-lg flex items-center gap-2"
            animate={{ scale: [1, 1.1, 1] }}
            transition={{ repeat: 2, duration: 0.5 }}
          >
            <div className="flex">
              {getFireIcons().map((_, i) => (
                <motion.div
                  key={i}
                  animate={{ rotate: [-10, 10, -10] }}
                  transition={{ repeat: Number.POSITIVE_INFINITY, duration: 0.5 }}
                >
                  <Fire className="h-5 w-5 text-yellow-300" />
                </motion.div>
              ))}
            </div>
            <div className="flex items-center gap-1">
              <span className="font-bold">{getMessage()}</span>
              <motion.span
                className="font-bold text-yellow-300"
                animate={{ scale: [1, 1.3, 1] }}
                transition={{ repeat: 1, duration: 0.5 }}
              >
                x{combo}
              </motion.span>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  )
}



================================================
FILE: src/components/community-notes-button.tsx
================================================
"use client"

import { Button } from "@/components/ui/button"
import { MessageSquare } from "lucide-react"

interface CommunityNotesButtonProps {
  onClick?: () => void
}

export function CommunityNotesButton({ onClick }: CommunityNotesButtonProps) {
  return (
    <Button
      variant="outline"
      size="icon"
      className="bg-white/90 hover:bg-white/95 border-0 shadow-md rounded-full h-10 w-10 text-slate-600 hover:text-slate-800"
      onClick={onClick}
      title="Community Notes"
    >
      <MessageSquare className="h-4 w-4" />
    </Button>
  )
} 


================================================
FILE: src/components/community-notes-drawer.tsx
================================================
"use client"

import React from 'react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { ThumbsUp, ThumbsDown, Flag } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'

export interface Note {
  id: string
  content: string
  author: {
    name: string
    reputation: number
  }
  votes: {
    up: number
    down: number
  }
  createdAt: Date
  status: 'helpful' | 'disputed' | 'flagged'
}

interface CommunityNotesDrawerProps {
  isOpen: boolean
  onClose: () => void
  notes: Note[]
  onAddNote?: (content: string) => Promise<void>
  onVote?: (noteId: string, vote: 'up' | 'down') => Promise<void>
  onFlag?: (noteId: string) => Promise<void>
}

export function CommunityNotesDrawer({
  isOpen,
  onClose,
  notes,
  onAddNote,
  onVote,
  onFlag
}: CommunityNotesDrawerProps) {
  const [newNote, setNewNote] = React.useState('')
  const [isSubmitting, setIsSubmitting] = React.useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newNote.trim() || !onAddNote) return

    setIsSubmitting(true)
    try {
      await onAddNote(newNote.trim())
      setNewNote('')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-40"
            onClick={onClose}
          />

          {/* Drawer */}
          <motion.div
            initial={{ y: '100%' }}
            animate={{ y: 0 }}
            exit={{ y: '100%' }}
            transition={{ type: 'spring', damping: 25, stiffness: 200 }}
            className="fixed bottom-0 left-0 right-0 h-[60vh] bg-background rounded-t-2xl shadow-lg z-50 overflow-hidden"
          >
            {/* Header */}
            <div className="sticky top-0 bg-background border-b px-4 py-3 flex items-center justify-between">
              <h2 className="text-lg font-semibold">Community Notes</h2>
              <Button variant="ghost" size="sm" onClick={onClose}>
                Close
              </Button>
            </div>

            {/* Notes List */}
            <div className="overflow-y-auto h-[calc(100%-8rem)] p-4 space-y-4">
              {notes.map((note) => (
                <Card key={note.id} className="p-3">
                  <div className="flex items-start justify-between gap-2 mb-2">
                    <div>
                      <div className="flex items-center gap-2">
                        <span className="font-medium text-sm">{note.author.name}</span>
                        <Badge variant="secondary" className="text-xs">
                          Rep {note.author.reputation}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">
                        {note.content}
                      </p>
                    </div>
                    <Badge 
                      variant={
                        note.status === 'helpful' ? 'default' :
                        note.status === 'disputed' ? 'secondary' : 'destructive'
                      }
                      className="shrink-0"
                    >
                      {note.status}
                    </Badge>
                  </div>

                  <div className="flex items-center gap-2 mt-2 pt-2 border-t">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-8"
                      onClick={() => onVote?.(note.id, 'up')}
                    >
                      <ThumbsUp className="h-4 w-4 mr-1" />
                      <span className="text-xs">{note.votes.up}</span>
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-8"
                      onClick={() => onVote?.(note.id, 'down')}
                    >
                      <ThumbsDown className="h-4 w-4 mr-1" />
                      <span className="text-xs">{note.votes.down}</span>
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-8 ml-auto"
                      onClick={() => onFlag?.(note.id)}
                    >
                      <Flag className="h-4 w-4" />
                    </Button>
                  </div>
                </Card>
              ))}
            </div>

            {/* Add Note Form */}
            <form
              onSubmit={handleSubmit}
              className="sticky bottom-0 bg-background border-t p-4 flex gap-2"
            >
              <input
                type="text"
                value={newNote}
                onChange={(e) => setNewNote(e.target.value)}
                placeholder="Add a note..."
                className="flex-1 px-3 py-2 text-sm rounded-lg border focus:outline-none focus:ring-2 focus:ring-primary"
                disabled={isSubmitting}
              />
              <Button type="submit" disabled={isSubmitting || !newNote.trim()}>
                Post
              </Button>
            </form>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  )
} 


================================================
FILE: src/components/community-notes-panel.tsx
================================================
import { Button } from '@/components/ui/button'
import { getTagColor } from '@/features/campaigns/trust'
import { AlertTriangle, CheckCircle, HelpCircle, Send, ThumbsUp, X } from 'lucide-react'
import { useState } from 'react'

interface CommunityNotesProps {
    isOpen: boolean
    onClose: () => void
    project: {
        id: number
        title: string
        trustScore?: number
        communityTags?: Array<{
            id: number
            text: string
            color: string
            count: number
        }>
        communityNotes?: Array<{
            id: number
            author: string
            reputation: number
            text: string
            tags: string[]
            upvotes: number
        }>
    }
    onAddTag: (tag: string) => void
}

export function CommunityNotesPanel({ isOpen, onClose, project, onAddTag }: CommunityNotesProps) {
    const [newNote, setNewNote] = useState('')
    const [selectedTag, setSelectedTag] = useState<string | null>(null)

    const availableTags = ['✅ Trusted', '👍 Recommended', '🔍 Needs Review', '⚠️ Fake', '🚫 Spam', '🔍 Unverified']

    const handleAddTag = () => {
        if (selectedTag) {
            onAddTag(selectedTag)
            setSelectedTag(null)
        }
    }

    const getTrustIcon = () => {
        const score = project.trustScore || 0
        if (score >= 70) {
            return <CheckCircle className='mr-2 h-5 w-5 text-green-500' />
        } else if (score >= 40) {
            return <HelpCircle className='mr-2 h-5 w-5 text-orange-500' />
        } else {
            return <AlertTriangle className='mr-2 h-5 w-5 text-red-500' />
        }
    }

    if (!isOpen) return null

    return (
        <div className={`fixed inset-0 z-50 bg-black/50 ${isOpen ? 'slide-up-panel open' : 'slide-up-panel'}`}>
            <div className='absolute right-0 bottom-0 left-0 max-h-[80vh] overflow-y-auto rounded-t-2xl bg-white'>
                <div className='sticky top-0 flex items-center justify-between border-b bg-white p-4'>
                    <h2 className='text-lg font-semibold'>Community Notes</h2>
                    <button onClick={onClose} className='p-1'>
                        <X className='h-5 w-5' />
                    </button>
                </div>

                <div className='p-4'>
                    <div className='mb-4 flex items-center'>
                        {getTrustIcon()}
                        <h3 className='font-medium'>{project.title}</h3>
                    </div>

                    <div className='mb-4'>
                        <p className='mb-2 text-sm text-slate-500'>Community Tags</p>
                        <div className='flex flex-wrap gap-2'>
                            {project.communityTags?.map(tag => (
                                <div key={tag.id} className={`rounded-full px-3 py-1 text-sm ${getTagColor(tag.text)}`}>
                                    {tag.text} ({tag.count})
                                </div>
                            ))}
                        </div>
                    </div>

                    <div className='mb-4'>
                        <p className='mb-2 text-sm text-slate-500'>Add a tag</p>
                        <div className='mb-2 flex flex-wrap gap-2'>
                            {availableTags.map(tag => (
                                <button
                                    key={tag}
                                    className={`rounded-full px-3 py-1 text-sm ${
                                        selectedTag === tag ? 'bg-[#22CC88] text-white' : 'bg-slate-100 text-slate-700'
                                    }`}
                                    onClick={() => setSelectedTag(tag)}>
                                    {tag}
                                </button>
                            ))}
                        </div>
                        <Button onClick={handleAddTag} disabled={!selectedTag} className='w-full'>
                            Add Tag
                        </Button>
                    </div>

                    <div className='mb-4'>
                        <p className='mb-2 text-sm text-slate-500'>Notes from the community</p>
                        {project.communityNotes
                            ?.sort((a, b) => b.reputation - a.reputation)
                            .map(note => (
                                <div key={note.id} className='mb-3 rounded-lg bg-slate-50 p-3'>
                                    <div className='mb-2 flex items-center justify-between'>
                                        <div className='flex items-center'>
                                            <div className='text-sm font-medium'>{note.author}</div>
                                            <div className='ml-2 text-xs text-slate-500'>Rep: {note.reputation}</div>
                                        </div>
                                        <div className='flex items-center text-slate-500'>
                                            <ThumbsUp className='mr-1 h-3 w-3' />
                                            <span className='text-xs'>{note.upvotes}</span>
                                        </div>
                                    </div>
                                    <p className='mb-2 text-sm'>{note.text}</p>
                                    <div className='flex flex-wrap gap-1'>
                                        {note.tags.map((tag, i) => (
                                            <span
                                                key={i}
                                                className={`rounded-full px-2 py-0.5 text-xs ${getTagColor(tag)}`}>
                                                {tag}
                                            </span>
                                        ))}
                                    </div>
                                </div>
                            ))}
                    </div>

                    <div className='sticky bottom-0 bg-white pt-2'>
                        <div className='flex items-center gap-2'>
                            <input
                                type='text'
                                className='flex-1 rounded-full border border-slate-200 px-4 py-2 text-sm'
                                placeholder='Add your note...'
                                value={newNote}
                                onChange={e => setNewNote(e.target.value)}
                            />
                            <Button size='icon' className='rounded-full'>
                                <Send className='h-4 w-4' />
                            </Button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}



================================================
FILE: src/components/connect-button.tsx
================================================
'use client'

import { Button } from '@/components/ui/button'
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'
import { useWallet } from '@/hooks/use-wallet'
import { cn } from '@/lib/styles/tailwind'
import { Check, ChevronDown, ExternalLink } from 'lucide-react'
import { useEffect, useState } from 'react'

export function ConnectButton() {
    // State to handle client-side rendering only
    const [mounted, setMounted] = useState(false)

    const { isConnected, address, isOnCorrectNetwork, networkName, connectWallet, disconnectWallet, switchNetwork } =
        useWallet()

    // Use useEffect to update the mounted state when the component mounts in the client
    useEffect(() => {
        setMounted(true)
    }, [])

    // Format address for display (e.g., 0x1234...abcd)
    const formatAddress = (address: string) => {
        if (!address) return ''
        return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`
    }

    // Render a placeholder button during SSR to avoid hydration errors
    if (!mounted) {
        return <Button>Connect Wallet</Button>
    }

    if (!isConnected) {
        return <Button onClick={connectWallet}>Connect Wallet</Button>
    }

    return (
        <div className='flex items-center gap-2'>
            {!isOnCorrectNetwork && (
                <Button variant='destructive' size='sm' onClick={switchNetwork}>
                    Switch to {networkName}
                </Button>
            )}

            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant='outline' className='gap-2'>
                        {formatAddress(address || '')}
                        <ChevronDown className='h-4 w-4' />
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align='end'>
                    <DropdownMenuItem className='gap-2' disabled>
                        <Check className={cn('h-4 w-4', isOnCorrectNetwork ? 'opacity-100' : 'opacity-0')} />
                        <span>Connected to {networkName}</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem
                        className='gap-2'
                        onClick={() => {
                            if (address) {
                                navigator.clipboard.writeText(address)
                            }
                        }}>
                        Copy Address
                    </DropdownMenuItem>
                    <DropdownMenuItem
                        className='gap-2'
                        onClick={() => {
                            if (address) {
                                window.open(`https://explorer.celo.org/alfajores/address/${address}`, '_blank')
                            }
                        }}>
                        <ExternalLink className='h-4 w-4' />
                        <span>View on Explorer</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem className='gap-2 text-red-500' onClick={disconnectWallet}>
                        Disconnect
                    </DropdownMenuItem>
                </DropdownMenuContent>
            </DropdownMenu>
        </div>
    )
}



================================================
FILE: src/components/container-aware-image.tsx
================================================
'use client'

import { useEffect, useRef } from 'react'
import NextImage from 'next/image'

interface ImageCandidate {
  width: number
  height: number
  src: string
}

interface ContainerAwareImageProps {
  candidates: ImageCandidate[]
  alt: string
  className?: string
  observeContainer?: string
  tolerance?: number
  placeholderColor?: string
}

export function ContainerAwareImage({
  candidates,
  alt,
  className = '',
  observeContainer,
  tolerance = 30,
  placeholderColor
}: ContainerAwareImageProps) {
  const imgRef = useRef<HTMLImageElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)
  const lastSrcRef = useRef<string>('')
  const lastAspectRatioRef = useRef<number | null>(null)
  const hasLoadedOnceRef = useRef(false)

  useEffect(() => {
    if (!imgRef.current || !containerRef.current || !candidates.length) return

    const img = imgRef.current
    const container = containerRef.current
    const observedContainer = observeContainer 
      ? container.closest(observeContainer) || container.parentElement
      : container.parentElement

    if (!observedContainer) return

    let active = false

    const processResize = (entry?: ResizeObserverEntry) => {
      if (!active || !candidates.length) return

      let containerWidth: number
      let containerHeight: number

      if (entry?.contentBoxSize) {
        const size = Array.isArray(entry.contentBoxSize)
          ? entry.contentBoxSize[0]
          : entry.contentBoxSize
        containerWidth = size.inlineSize
        containerHeight = size.blockSize
      } else if (entry?.contentRect) {
        containerWidth = entry.contentRect.width
        containerHeight = entry.contentRect.height
      } else {
        containerWidth = (observedContainer as HTMLElement).offsetWidth
        containerHeight = (observedContainer as HTMLElement).offsetHeight
      }

      const containerAspectRatio = containerWidth / containerHeight
      const containerArea = containerWidth * containerHeight

      let bestCandidate: ImageCandidate | null = null
      let bestScore = Infinity

      for (let i = candidates.length - 1; i >= 0; i--) {
        const candidate = candidates[i]
        const { width, height, src } = candidate

        if (!width || !height || !src) continue
        if (width + tolerance < containerWidth || height + tolerance < containerHeight) continue

        const aspectRatio = width / height
        const aspectRatioDelta = Math.abs(aspectRatio - containerAspectRatio)
        const areaDelta = Math.abs(width * height - containerArea) / containerArea
        const score = aspectRatioDelta * 2 + areaDelta

        if (score < bestScore) {
          bestScore = score
          bestCandidate = candidate
        }
      }

      if (!bestCandidate && candidates.length) {
        bestCandidate = candidates[0]
      }

      if (bestCandidate?.src) {
        updateImageSource(bestCandidate)
      }
    }

    const updateImageSource = (candidate: ImageCandidate) => {
      const newSrc = candidate.src
      if (!newSrc || newSrc === lastSrcRef.current) return

      const newAspectRatio = candidate.width / candidate.height
      const aspectRatioChanged = Math.abs(newAspectRatio - (lastAspectRatioRef.current || 0)) > 0.01

      if (aspectRatioChanged) {
        img.classList.remove('cai-loaded')
        img.classList.add('cai-loading')
        container.classList.add('cai-img-switching')
      }

      const preloadImg = new Image()
      preloadImg.src = newSrc

      preloadImg.onload = () => {
        if (!preloadImg.naturalWidth || !preloadImg.naturalHeight) return

        if (img.src !== preloadImg.src) {
          img.src = preloadImg.src
        }

        lastSrcRef.current = newSrc
        lastAspectRatioRef.current = newAspectRatio

        if (aspectRatioChanged) {
          img.classList.remove('cai-loading')
          img.classList.add('cai-loaded')
          container.classList.remove('cai-img-switching')
        }

        const placeholder = container.querySelector('.cai-placeholder')
        if (!hasLoadedOnceRef.current && placeholder) {
          requestAnimationFrame(() => {
            ;(placeholder as HTMLElement).style.opacity = '0'

            let done = false
            const removeAfterFade = () => {
              if (done) return
              done = true
              placeholder.removeEventListener('transitionend', removeAfterFade)
              placeholder.remove()
            }

            placeholder.addEventListener('transitionend', removeAfterFade)
            setTimeout(removeAfterFade, 500)
          })

          hasLoadedOnceRef.current = true
        }
      }
    }

    const resizeObserver = new ResizeObserver((entries) => {
      if (!entries.length) return
      requestAnimationFrame(() => processResize(entries[0]))
    })

    const intersectionObserver = new IntersectionObserver(
      ([entry]) => {
        if (entry?.isIntersecting) {
          active = true
          requestAnimationFrame(() => processResize())
          intersectionObserver.disconnect()
        }
      },
      { rootMargin: '200px', threshold: 0.01 }
    )

    resizeObserver.observe(observedContainer)
    intersectionObserver.observe(container)

    if (img.complete) {
      img.classList.add('cai-loaded')
    }

    return () => {
      resizeObserver.disconnect()
      intersectionObserver.disconnect()
    }
  }, [candidates, observeContainer, tolerance])

  return (
    <div ref={containerRef} className="container-aware-img">
      <NextImage
        ref={imgRef}
        src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1' height='1'%3E%3C/svg%3E"
        alt={alt}
        className={className}
        width={candidates[0].width}
        height={candidates[0].height}
      />
      <div 
        className="cai-placeholder"
        style={placeholderColor ? { background: placeholderColor } : undefined}
      />
    </div>
  )
} 


================================================
FILE: src/components/content-view.tsx
================================================
'use client'

import { cn } from '@/lib/styles/tailwind'
import { AnimatePresence, motion } from 'framer-motion'

interface ContentViewProps {
    children: React.ReactNode
    className?: string
}

export function ContentView({ children, className }: ContentViewProps) {
    return (
        <div className={cn('relative size-full', className)}>
            <AnimatePresence mode='wait'>
                <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    transition={{
                        duration: 0.2,
                        ease: 'easeInOut',
                    }}
                    className='size-full bg-gradient-to-br from-purple-50 via-blue-50 to-red-50'>
                    {children}
                </motion.div>
            </AnimatePresence>
        </div>
    )
}



================================================
FILE: src/components/create-donation.tsx
================================================
'use client'

import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { useDonationPool } from '@/hooks/use-donation-pool'
import { useWallet } from '@/hooks/use-wallet'
import { useState } from 'react'
import { toast } from 'sonner'

// Mock token address for CELO
const CELO_TOKEN_ADDRESS = '0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9'

export function CreateDonationProject() {
    const { createCampaign, isPending, isConfirmed } = useDonationPool()
    const { isConnected, isOnCorrectNetwork } = useWallet()

    const [formState, setFormState] = useState({
        projectName: '',
        projectDescription: '',
        projectUrl: '',
        imageUrl: '',
        fundingGoal: '',
        fundingModel: '0', // Default to ALL_OR_NOTHING
    })

    const [submitting, setSubmitting] = useState(false)

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target
        setFormState(prev => ({ ...prev, [name]: value }))
    }

    const handleSelectChange = (value: string) => {
        setFormState(prev => ({ ...prev, fundingModel: value }))
    }

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault()

        if (!isConnected) {
            toast.error('Please connect your wallet first')
            return
        }

        if (!isOnCorrectNetwork) {
            toast.error('Please switch to Celo Alfajores network')
            return
        }

        try {
            setSubmitting(true)

            await createCampaign(
                formState.projectName,
                formState.projectDescription,
                formState.projectUrl,
                formState.imageUrl,
                formState.fundingGoal,
                parseInt(formState.fundingModel) as 0 | 1,
                CELO_TOKEN_ADDRESS as `0x${string}`,
            )

            toast.success('Project creation initiated. Please wait for confirmation.')
        } catch (error) {
            console.error('Failed to create project:', error)
            toast.error('Failed to create project. Please try again.')
        } finally {
            setSubmitting(false)
        }
    }

    return (
        <div className='mx-auto w-full max-w-2xl rounded-lg bg-white p-6 shadow-md'>
            <h2 className='mb-6 text-2xl font-bold'>Create Donation Project</h2>

            <form onSubmit={handleSubmit} className='space-y-6'>
                <div className='space-y-2'>
                    <Label htmlFor='projectName'>Project Name</Label>
                    <Input
                        id='projectName'
                        name='projectName'
                        value={formState.projectName}
                        onChange={handleChange}
                        placeholder='Enter project name'
                        required
                    />
                </div>

                <div className='space-y-2'>
                    <Label htmlFor='projectDescription'>Project Description</Label>
                    <Textarea
                        id='projectDescription'
                        name='projectDescription'
                        value={formState.projectDescription}
                        onChange={handleChange}
                        placeholder='Describe your project'
                        rows={4}
                        required
                    />
                </div>

                <div className='space-y-2'>
                    <Label htmlFor='projectUrl'>Project URL</Label>
                    <Input
                        id='projectUrl'
                        name='projectUrl'
                        value={formState.projectUrl}
                        onChange={handleChange}
                        placeholder='https://your-project-website.com'
                        type='url'
                    />
                </div>

                <div className='space-y-2'>
                    <Label htmlFor='imageUrl'>Image URL</Label>
                    <Input
                        id='imageUrl'
                        name='imageUrl'
                        value={formState.imageUrl}
                        onChange={handleChange}
                        placeholder='https://example.com/your-image.jpg'
                        type='url'
                    />
                </div>

                <div className='space-y-2'>
                    <Label htmlFor='fundingGoal'>Funding Goal (CELO)</Label>
                    <Input
                        id='fundingGoal'
                        name='fundingGoal'
                        value={formState.fundingGoal}
                        onChange={handleChange}
                        placeholder='1.0'
                        type='number'
                        step='0.01'
                        min='0.01'
                        required
                    />
                </div>

                <div className='space-y-2'>
                    <Label htmlFor='fundingModel'>Funding Model</Label>
                    <Select value={formState.fundingModel} onValueChange={handleSelectChange}>
                        <SelectTrigger id='fundingModel'>
                            <SelectValue placeholder='Select funding model' />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value='0'>All or Nothing</SelectItem>
                            <SelectItem value='1'>Keep What You Raise</SelectItem>
                        </SelectContent>
                    </Select>
                    <p className='mt-1 text-sm text-gray-500'>
                        {formState.fundingModel === '0'
                            ? 'All or Nothing: Funds are only released if the goal is met'
                            : 'Keep What You Raise: All funds are released regardless of reaching the goal'}
                    </p>
                </div>

                <Button
                    type='submit'
                    className='w-full'
                    disabled={!isConnected || !isOnCorrectNetwork || submitting || isPending}>
                    {submitting || isPending ? 'Processing...' : 'Create Project'}
                </Button>

                {!isConnected && (
                    <p className='text-center text-sm text-red-500'>Please connect your wallet to create a project</p>
                )}

                {isConnected && !isOnCorrectNetwork && (
                    <p className='text-center text-sm text-red-500'>Please switch to Celo Alfajores network</p>
                )}

                {isConfirmed && <p className='text-center text-sm text-green-500'>Project created successfully!</p>}
            </form>
        </div>
    )
}



================================================
FILE: src/components/donate-modal.tsx
================================================
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardFooter } from '@/components/ui/card'
import { formatCurrency } from '@/features/currencies/formatter'
import { getUserSettings } from '@/features/settings/user-settings'
import { useEffect, useState } from 'react'

interface DonateModalProps {
    isOpen: boolean
    onClose: () => void
    onConfirm: () => void
    amount: number
}

export function DonateModal({ isOpen, onClose, onConfirm, amount }: DonateModalProps) {
    const [userSettings, setUserSettings] = useState({ currency: 'CENTS', language: 'en', region: 'US' })

    useEffect(() => {
        // Cargar configuración del usuario
        setUserSettings(getUserSettings())
    }, [])

    if (!isOpen) return null

    return (
        <div className='fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4'>
            <Card className='bento-bevel w-full max-w-sm'>
                <CardContent className='pt-6'>
                    <h2 className='mb-2 text-center text-xl font-semibold'>
                        Confirm {formatCurrency(amount || 0.01, userSettings.currency)} donation?
                    </h2>
                    <p className='text-center text-blue-500'>+5 pts earned</p>
                </CardContent>
                <CardFooter className='flex justify-between gap-4'>
                    <Button variant='secondary' className='flex-1' onClick={onClose}>
                        Cancel
                    </Button>
                    <Button className='flex-1' onClick={onConfirm}>
                        Confirm
                    </Button>
                </CardFooter>
            </Card>
        </div>
    )
}



================================================
FILE: src/components/donation-summary.tsx
================================================
"use client"

import { Trophy, Share2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"

interface DonationSummaryProps {
  isOpen: boolean
  onClose: () => void
  amount: number
  points: number
}

export function DonationSummary({ isOpen, onClose, amount, points }: DonationSummaryProps) {
  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-white z-50 flex flex-col items-center justify-center p-6">
      <div className="bg-[#22CC88]/10 p-6 rounded-full mb-6">
        <Trophy className="h-16 w-16 text-[#22CC88]" />
      </div>
      <h1 className="text-2xl font-bold mb-2">Well done!</h1>
      <p className="text-xl mb-1">You donated ${amount.toFixed(2)}</p>
      <p className="text-blue-500 font-medium mb-8">You earned {points} pts</p>

      <div className="w-full max-w-xs mb-2">
        <Progress value={30} max={50} />
      </div>
      <p className="text-sm text-slate-600 mb-8">Next bonus at 50 pts</p>

      <div className="space-y-4 w-full max-w-xs">
        <Button className="w-full">
          <Share2 className="mr-2 h-4 w-4" />
          Share your impact
        </Button>
        <Button variant="secondary" className="w-full" onClick={onClose}>
          Continue swiping
        </Button>
      </div>
    </div>
  )
}



================================================
FILE: src/components/emoji-animation.tsx
================================================
"use client"

import { useEffect, useState } from "react"
import { motion, AnimatePresence } from "framer-motion"

interface EmojiAnimationProps {
  type: "success" | "skip" | "error"
  show: boolean
  onComplete?: () => void
}

export function EmojiAnimation({ type, show, onComplete }: EmojiAnimationProps) {
  const [emojis, setEmojis] = useState<{ id: number; x: number; y: number; rotate: number; scale: number }[]>([])

  // Configuración según el tipo
  const config = {
    success: {
      emoji: "❤️",
      count: 8,
      duration: 1.5,
    },
    skip: {
      emoji: "😔",
      count: 5,
      duration: 1.2,
    },
    error: {
      emoji: "⚠️",
      count: 3,
      duration: 1.2,
    },
  }[type]

  useEffect(() => {
    if (show) {
      // Crear emojis con posiciones aleatorias
      const newEmojis = Array.from({ length: config.count }).map((_, i) => ({
        id: i,
        x: Math.random() * 200 - 100, // -100 a 100
        y: Math.random() * -200 - 50, // -50 a -250 (hacia arriba)
        rotate: Math.random() * 360,
        scale: 0.5 + Math.random() * 1.5,
      }))

      setEmojis(newEmojis)

      // Llamar a onComplete después de la animación
      const timer = setTimeout(() => {
        if (onComplete) onComplete()
      }, config.duration * 1000)

      return () => clearTimeout(timer)
    }
  }, [show, config.count, config.duration, onComplete])

  if (!show) return null

  return (
    <div className="fixed inset-0 pointer-events-none z-50 flex items-center justify-center">
      <AnimatePresence>
        {emojis.map((emoji) => (
          <motion.div
            key={emoji.id}
            initial={{
              opacity: 0,
              scale: 0.5,
              x: 0,
              y: 0,
              rotate: 0,
            }}
            animate={{
              opacity: [0, 1, 0],
              scale: [0.5, emoji.scale, 0],
              x: emoji.x,
              y: emoji.y,
              rotate: emoji.rotate,
            }}
            transition={{
              duration: config.duration,
              ease: "easeOut",
            }}
            className="absolute text-3xl"
          >
            {config.emoji}
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  )
}



================================================
FILE: src/components/expand-button.tsx
================================================
"use client"

import { Button } from "@/components/ui/button"
import { ChevronDown } from "lucide-react"

interface ExpandButtonProps {
  onClick?: () => void
}

export function ExpandButton({ onClick }: ExpandButtonProps) {
  return (
    <Button
      variant="ghost"
      size="icon"
      className="h-8 w-8 rounded-full hover:bg-slate-100"
      onClick={onClick}
      title="View more details"
    >
      <ChevronDown className="h-4 w-4 text-slate-500" />
    </Button>
  )
} 


================================================
FILE: src/components/footer.tsx
================================================
type Props = {
  className?: string;
};

const navigation = [
  {
    name: "Twitter",
    href: "https://twitter.com/CeloDevs",
    icon: (props: Props) => (
      <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
        <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
      </svg>
    ),
  },
  {
    name: "GitHub",
    href: "https://github.com/celo-org/celo-composer",
    icon: (props: Props) => (
      <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
        <path
          fillRule="evenodd"
          d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
          clipRule="evenodd"
        />
      </svg>
    ),
  },
];

export default function Footer() {
  return (
    <footer className="bg-gypsum mt-auto border-black border-t">
      <div className="mx-auto max-w-7xl py-6 px-4 sm:px-6 md:flex md:items-center md:justify-between lg:px-8">
        <div className="flex justify-center space-x-6 md:order-2">
          {navigation.map((item) => (
            <a
              key={item.name}
              href={item.href}
              className="text-black hover:text-forest"
              target="_blank"
              rel="noopener noreferrer"
            >
              <span className="sr-only">{item.name}</span>
              <item.icon className="h-6 w-6" aria-hidden="true" />
            </a>
          ))}
        </div>
        <div className="mt-8 md:order-1 md:mt-0">
          <p className="text-center text-base text-black">
            &copy; {new Date().getFullYear()} Build for Minipay.
          </p>
        </div>
      </div>
    </footer>
  );
}



================================================
FILE: src/components/friend-card.tsx
================================================
'use client'

import { StreakBadge } from '@/components/streak-badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import Image from 'next/image'

interface FriendCardProps {
    friend?: {
        id: string
        name: string
        avatar: string
        points: number
        maxPoints: number
        donations: number
        isFollowing?: boolean
        streak?: number
    }
    // Props directos para compatibilidad
    id?: string
    name?: string
    avatar?: string
    points?: number
    maxPoints?: number
    donations?: number
    isFollowing?: boolean
    streak?: number
    onToggleFollow?: () => void
}

export function FriendCard({
    friend,
    name: propName,
    avatar: propAvatar,
    points: propPoints,
    maxPoints: propMaxPoints,
    donations: propDonations,
    isFollowing: propIsFollowing,
    streak: propStreak,
    onToggleFollow,
}: FriendCardProps) {
    // Usar valores del objeto friend si está disponible, de lo contrario usar props directos
    const name = friend?.name || propName || 'Unknown'
    const avatar = friend?.avatar || propAvatar || '/placeholder.svg'
    const points = friend?.points || propPoints || 0
    const maxPoints = friend?.maxPoints || propMaxPoints || 100
    const donations = friend?.donations || propDonations || 0
    const isFollowing = friend?.isFollowing !== undefined ? friend.isFollowing : propIsFollowing || false
    const streak = friend?.streak || propStreak || 0

    const handleToggleFollow = () => {
        if (onToggleFollow) {
            onToggleFollow()
        }
    }

    return (
        <Card className='mb-3 overflow-hidden'>
            <CardContent className='p-4'>
                <div className='flex items-center'>
                    <div className='relative mr-3 h-12 w-12 overflow-hidden rounded-full'>
                        <Image src={avatar || '/placeholder.svg'} alt={name} fill className='object-cover' />
                    </div>

                    <div className='flex-1'>
                        <div className='mb-1 flex items-center justify-between'>
                            <div className='flex items-center gap-2'>
                                <p className='font-medium'>{name}</p>
                                {streak > 0 && <StreakBadge streak={streak} size='sm' showText={false} />}
                            </div>
                            <Button
                                variant={isFollowing ? 'secondary' : 'default'}
                                size='sm'
                                className='h-8 text-xs'
                                onClick={handleToggleFollow}>
                                {isFollowing ? 'Following' : 'Follow'}
                            </Button>
                        </div>

                        <div className='space-y-2'>
                            <div className='flex justify-between text-xs'>
                                <span className='text-slate-500'>
                                    {points} / {maxPoints} points
                                </span>
                                <span className='text-[#22CC88]'>${donations.toFixed(2)} donated</span>
                            </div>
                            <Progress value={points} max={maxPoints} />
                        </div>
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}



================================================
FILE: src/components/header-celo.tsx
================================================
import { Disclosure, DisclosureButton, DisclosurePanel } from "@headlessui/react";
import { Bars3Icon, XMarkIcon } from "@heroicons/react/24/outline";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import Image from "next/image";
import { useEffect, useState } from "react";
import { useConnect } from "wagmi";
import { injected } from "wagmi/connectors";

export default function Header() {
  const [hideConnectBtn, setHideConnectBtn] = useState(false);
  const { connect } = useConnect();

  useEffect(() => {
    if (window.ethereum && window.ethereum.isMiniPay) {
      setHideConnectBtn(true);
      connect({ connector: injected({ target: "metaMask" }) });
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <Disclosure as="nav" className="bg-colors-primary border-b border-black">
      {({ open }) => (
        <>
          <div className="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
            <div className="relative flex h-16 justify-between">
              <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
                {/* Mobile menu button */}
                <DisclosureButton className="inline-flex items-center justify-center rounded-md p-2 text-black focus:outline-none focus:ring-1 focus:ring-inset focus:rounded-none focus:ring-black">
                  <span className="sr-only">Open main menu</span>
                  {open ? (
                    <XMarkIcon className="block h-6 w-6" aria-hidden="true" />
                  ) : (
                    <Bars3Icon className="block h-6 w-6" aria-hidden="true" />
                  )}
                </DisclosureButton>
              </div>
              <div className="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
                <div className="flex flex-shrink-0 items-center">
                  <Image
                    className="block h-8 w-auto sm:block lg:block"
                    src="/logo.svg"
                    width="24"
                    height="24"
                    alt="Celo Logo"
                  />
                </div>
                <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
                  <a
                    href="#"
                    className="inline-flex items-center border-b-2 border-black px-1 pt-1 text-sm font-medium text-gray-900"
                  >
                    Home
                  </a>
                </div>
              </div>
              <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
                {!hideConnectBtn && (
                  <ConnectButton
                    showBalance={{
                      smallScreen: true,
                      largeScreen: false,
                    }}
                  />
                )}
              </div>
            </div>
          </div>

          <DisclosurePanel className="sm:hidden">
            <div className="space-y-1 pt-2 pb-4">
              <DisclosureButton
                as="a"
                href="#"
                className="block border-l-4 border-black py-2 pl-3 pr-4 text-base font-medium text-black"
              >
                Home
              </DisclosureButton>
              {/* Add here your custom menu elements */}
            </div>
          </DisclosurePanel>
        </>
      )}
    </Disclosure>
  );
}



================================================
FILE: src/components/header.tsx
================================================
import Link from "next/link"
import { ArrowLeft, Bell, Settings } from "lucide-react"

interface HeaderProps {
  showBack?: boolean
  backUrl?: string
  showIcons?: boolean
  title?: string
}

export function Header({ showBack = false, backUrl = "/", showIcons = true, title }: HeaderProps) {
  return (
    <header className="h-14 flex items-center justify-between px-4 bg-white border-b border-gray-100 shrink-0">
      <div className="w-16"></div>

      <div className="flex-1 text-center">
        <span className="text-lg font-semibold text-primary">{title}</span>
      </div>

      {showBack && (
        <Link href={backUrl} className="p-2 text-gray-400 hover:text-primary transition-colors rounded-full hover:bg-primary/10">
          <ArrowLeft className="h-5 w-5" />
        </Link>
      )}

      {showIcons && (
        <div className="flex items-center justify-end gap-2 w-16">
          <button className="p-2 text-gray-400 hover:text-primary transition-colors rounded-full hover:bg-primary/10">
            <Bell className="h-5 w-5" />
   